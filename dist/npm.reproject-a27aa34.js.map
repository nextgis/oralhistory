{"version":3,"sources":["webpack:///./node_modules/reproject/index.js"],"names":["proj4","__webpack_require__","hasOwnProperty","default","traverseCoords","coordinates","callback","list","length","map","coord","traverseGeoJson","geometryCb","nodeCb","geojson","r","obj","copy","constructor","attr","clone","self","bind","this","type","geometry","features","geometries","detectCrs","projs","crs","crsInfo","undefined","Error","properties","name","code","JSON","stringify","determineCrs","String","Proj","reproject","from","to","transformFunc","forward","transform","coords","transformed","gj","min","max","bbox","Number","MAX_VALUE","_gj","xy","Math","module","exports","reverse","toWgs84","WGS84"],"mappings":"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","file":"npm.reproject-a27aa34.js","sourcesContent":["'use strict';\n\nvar proj4 = require('proj4').hasOwnProperty('default') ? require('proj4').default : require('proj4');\n// Checks if `list` looks like a `[x, y]`.\nfunction isXY(list) {\n  return list.length >= 2 &&\n    typeof list[0] === 'number' &&\n    typeof list[1] === 'number';\n}\n\nfunction traverseCoords(coordinates, callback) {\n  if (isXY(coordinates)) return callback(coordinates);\n  return coordinates.map(function(coord){return traverseCoords(coord, callback);});\n}\n\n// Simplistic shallow clone that will work for a normal GeoJSON object.\nfunction clone(obj) {\n  if (null == obj || 'object' !== typeof obj) return obj;\n  var copy = obj.constructor();\n  for (var attr in obj) {\n    if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n  }\n  return copy;\n}\n\nfunction traverseGeoJson(geometryCb, nodeCb, geojson) {\n  if (geojson == null) return geojson;\n\n  var r = clone(geojson);\n  var self = traverseGeoJson.bind(this, geometryCb, nodeCb);\n\n  switch (geojson.type) {\n  case 'Feature':\n    r.geometry = self(geojson.geometry);\n    break;\n  case 'FeatureCollection':\n    r.features = r.features.map(self);\n    break;\n  case 'GeometryCollection':\n    r.geometries = r.geometries.map(self);\n    break;\n  default:\n    geometryCb(r);\n    break;\n  }\n\n  if (nodeCb) nodeCb(r);\n\n  return r;\n}\n\nfunction detectCrs(geojson, projs) {\n  var crsInfo = geojson.crs,\n      crs;\n\n  if (crsInfo === undefined) {\n    throw new Error('Unable to detect CRS, GeoJSON has no \"crs\" property.');\n  }\n\n  if (crsInfo.type === 'name') {\n    crs = projs[crsInfo.properties.name];\n  } else if (crsInfo.type === 'EPSG') {\n    crs = projs['EPSG:' + crsInfo.properties.code];\n  }\n\n  if (!crs) {\n    throw new Error('CRS defined in crs section could not be identified: ' + JSON.stringify(crsInfo));\n  }\n\n  return crs;\n}\n\nfunction determineCrs(crs, projs) {\n  if (typeof crs === 'string' || crs instanceof String) {\n    return projs[crs] || proj4.Proj(crs);\n  }\n\n  return crs;\n}\n\nfunction calcBbox(geojson) {\n  var min = [Number.MAX_VALUE, Number.MAX_VALUE],\n      max = [-Number.MAX_VALUE, -Number.MAX_VALUE];\n  traverseGeoJson(function(_gj) {\n    traverseCoords(_gj.coordinates, function(xy) {\n      min[0] = Math.min(min[0], xy[0]);\n      min[1] = Math.min(min[1], xy[1]);\n      max[0] = Math.max(max[0], xy[0]);\n      max[1] = Math.max(max[1], xy[1]);\n    });\n  }, null, geojson);\n  return [min[0], min[1], max[0], max[1]];\n}\n\nfunction reproject(geojson, from, to, projs) {\n  projs = projs || {};\n  if (!from) {\n    from = detectCrs(geojson, projs);\n  } else {\n    from = determineCrs(from, projs);\n  }\n\n  to = determineCrs(to, projs);\n  \n  var transformFunc = proj4(from, to).forward.bind(transformFunc);\n\n  function transform(coords) {\n    var transformed = transformFunc(coords);\n    if (coords.length === 3 && coords[2] !== undefined && transformed[2] === undefined) {\n      // If the projection doesn't explicitly handle Z coordinate, retain the old one.\n      transformed[2] = coords[2];\n    }\n    return transformed;\n  }\n\n  var transformGeometryCoords = function(gj) {\n    // No easy way to put correct CRS info into the GeoJSON,\n    // and definitely wrong to keep the old, so delete it.\n    if (gj.crs) {\n      delete gj.crs;\n    }\n    gj.coordinates = traverseCoords(gj.coordinates, transform);\n  }\n\n  var transformBbox = function(gj) {\n    if (gj.bbox) {\n      gj.bbox = calcBbox(gj);\n    }\n  }\n\n  return traverseGeoJson(transformGeometryCoords, transformBbox, geojson);\n}\n\nmodule.exports = {\n  detectCrs: detectCrs,\n\n  reproject: reproject,\n\n  reverse: function(geojson) {\n    return traverseGeoJson(function(gj) {\n      gj.coordinates = traverseCoords(gj.coordinates, function(xy) {\n        return [ xy[1], xy[0] ];\n      });\n    }, null, geojson);\n  },\n\n  toWgs84: function(geojson, from, projs) {\n    return reproject(geojson, from, proj4.WGS84, projs);\n  }\n};\n"],"sourceRoot":""}