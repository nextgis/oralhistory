{"version":3,"sources":["webpack:///./nextgisweb_frontend/node_modules/reproject/index.js"],"names":["proj4","__webpack_require__","hasOwnProperty","default","traverseCoords","coordinates","callback","list","length","map","coord","traverseGeoJson","geometryCb","nodeCb","geojson","r","obj","copy","constructor","attr","clone","self","bind","this","type","geometry","features","geometries","detectCrs","projs","crs","crsInfo","undefined","Error","properties","name","code","JSON","stringify","determineCrs","String","Proj","reproject","from","to","transform","forward","gj","min","max","bbox","Number","MAX_VALUE","_gj","xy","Math","module","exports","reverse","toWgs84","WGS84"],"mappings":"0FAEA,IAAAA,EAAYC,EAAQ,IAAOC,eAAA,WAA8BD,EAAQ,IAAOE,QAAYF,EAAQ,IAQ5F,SAAAG,EAAAC,EAAAC,GACA,OAPAC,EAOAF,GANAG,QAAA,GACA,iBAAAD,EAAA,IACA,iBAAAA,EAAA,GAIAD,EAAAD,GACAA,EAAAI,IAAA,SAAAC,GAAyC,OAAAN,EAAAM,EAAAJ,KARzC,IAAAC,EAqBA,SAAAI,EAAAC,EAAAC,EAAAC,GACA,SAAAA,EAAA,OAAAA,EAEA,IAAAC,EAZA,SAAAC,GACA,SAAAA,GAAA,iBAAAA,EAAA,OAAAA,EACA,IAAAC,EAAAD,EAAAE,cACA,QAAAC,KAAAH,EACAA,EAAAd,eAAAiB,KAAAF,EAAAE,GAAAH,EAAAG,IAEA,OAAAF,EAMAG,CAAAN,GACAO,EAAAV,EAAAW,KAAAC,KAAAX,EAAAC,GAEA,OAAAC,EAAAU,MACA,cACAT,EAAAU,SAAAJ,EAAAP,EAAAW,UACA,MACA,wBACAV,EAAAW,SAAAX,EAAAW,SAAAjB,IAAAY,GACA,MACA,yBACAN,EAAAY,WAAAZ,EAAAY,WAAAlB,IAAAY,GACA,MACA,QACAT,EAAAG,GAMA,OAFAF,KAAAE,GAEAA,EAGA,SAAAa,EAAAd,EAAAe,GACA,IACAC,EADAC,EAAAjB,EAAAgB,IAGA,QAAAE,IAAAD,EACA,UAAAE,MAAA,wDASA,GANA,SAAAF,EAAAP,KACAM,EAAAD,EAAAE,EAAAG,WAAAC,MACG,SAAAJ,EAAAP,OACHM,EAAAD,EAAA,QAAAE,EAAAG,WAAAE,QAGAN,EACA,UAAAG,MAAA,uDAAAI,KAAAC,UAAAP,IAGA,OAAAD,EAGA,SAAAS,EAAAT,EAAAD,GACA,uBAAAC,gBAAAU,OACAX,EAAAC,IAAA9B,EAAAyC,KAAAX,GAGAA,EAiBA,SAAAY,EAAA5B,EAAA6B,EAAAC,EAAAf,GACAA,KAAA,GAIAc,EAHAA,EAGAJ,EAAAI,EAAAd,GAFAD,EAAAd,EAAAe,GAKAe,EAAAL,EAAAK,EAAAf,GACA,IAAAgB,EAAA7C,EAAA2C,EAAAC,GAAAE,QAAAxB,KAAAuB,GAiBA,OAAAlC,EAfA,SAAAoC,GAGAA,EAAAjB,YACAiB,EAAAjB,IAEAiB,EAAA1C,YAAAD,EAAA2C,EAAA1C,YAAAwC,IAGA,SAAAE,GAlCA,IAAAjC,EACAkC,EACAC,EAiCAF,EAAAG,OACAH,EAAAG,MApCApC,EAoCAiC,EAnCAC,EAAA,CAAAG,OAAAC,UAAAD,OAAAC,WACAH,EAAA,EAAAE,OAAAC,WAAAD,OAAAC,WACAzC,EAAA,SAAA0C,GACAjD,EAAAiD,EAAAhD,YAAA,SAAAiD,GACAN,EAAA,GAAAO,KAAAP,MAAA,GAAAM,EAAA,IACAN,EAAA,GAAAO,KAAAP,MAAA,GAAAM,EAAA,IACAL,EAAA,GAAAM,KAAAN,MAAA,GAAAK,EAAA,IACAL,EAAA,GAAAM,KAAAN,MAAA,GAAAK,EAAA,OAEG,KAAAxC,GACH,CAAAkC,EAAA,GAAAA,EAAA,GAAAC,EAAA,GAAAA,EAAA,OA6BAnC,GAGA0C,EAAAC,QAAA,CACA7B,YAEAc,YAEAgB,QAAA,SAAA5C,GACA,OAAAH,EAAA,SAAAoC,GACAA,EAAA1C,YAAAD,EAAA2C,EAAA1C,YAAA,SAAAiD,GACA,OAAAA,EAAA,GAAAA,EAAA,OAEK,KAAAxC,IAGL6C,QAAA,SAAA7C,EAAA6B,EAAAd,GACA,OAAAa,EAAA5B,EAAA6B,EAAA3C,EAAA4D,MAAA/B","file":"npm.reproject-07160e2.js","sourcesContent":["'use strict';\r\n\r\nvar proj4 = require('proj4').hasOwnProperty('default') ? require('proj4').default : require('proj4');\r\n// Checks if `list` looks like a `[x, y]`.\r\nfunction isXY(list) {\r\n  return list.length >= 2 &&\r\n    typeof list[0] === 'number' &&\r\n    typeof list[1] === 'number';\r\n}\r\n\r\nfunction traverseCoords(coordinates, callback) {\r\n  if (isXY(coordinates)) return callback(coordinates);\r\n  return coordinates.map(function(coord){return traverseCoords(coord, callback);});\r\n}\r\n\r\n// Simplistic shallow clone that will work for a normal GeoJSON object.\r\nfunction clone(obj) {\r\n  if (null == obj || 'object' !== typeof obj) return obj;\r\n  var copy = obj.constructor();\r\n  for (var attr in obj) {\r\n    if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\r\n  }\r\n  return copy;\r\n}\r\n\r\nfunction traverseGeoJson(geometryCb, nodeCb, geojson) {\r\n  if (geojson == null) return geojson;\r\n\r\n  var r = clone(geojson);\r\n  var self = traverseGeoJson.bind(this, geometryCb, nodeCb);\r\n\r\n  switch (geojson.type) {\r\n  case 'Feature':\r\n    r.geometry = self(geojson.geometry);\r\n    break;\r\n  case 'FeatureCollection':\r\n    r.features = r.features.map(self);\r\n    break;\r\n  case 'GeometryCollection':\r\n    r.geometries = r.geometries.map(self);\r\n    break;\r\n  default:\r\n    geometryCb(r);\r\n    break;\r\n  }\r\n\r\n  if (nodeCb) nodeCb(r);\r\n\r\n  return r;\r\n}\r\n\r\nfunction detectCrs(geojson, projs) {\r\n  var crsInfo = geojson.crs,\r\n      crs;\r\n\r\n  if (crsInfo === undefined) {\r\n    throw new Error('Unable to detect CRS, GeoJSON has no \"crs\" property.');\r\n  }\r\n\r\n  if (crsInfo.type === 'name') {\r\n    crs = projs[crsInfo.properties.name];\r\n  } else if (crsInfo.type === 'EPSG') {\r\n    crs = projs['EPSG:' + crsInfo.properties.code];\r\n  }\r\n\r\n  if (!crs) {\r\n    throw new Error('CRS defined in crs section could not be identified: ' + JSON.stringify(crsInfo));\r\n  }\r\n\r\n  return crs;\r\n}\r\n\r\nfunction determineCrs(crs, projs) {\r\n  if (typeof crs === 'string' || crs instanceof String) {\r\n    return projs[crs] || proj4.Proj(crs);\r\n  }\r\n\r\n  return crs;\r\n}\r\n\r\nfunction calcBbox(geojson) {\r\n  var min = [Number.MAX_VALUE, Number.MAX_VALUE],\r\n      max = [-Number.MAX_VALUE, -Number.MAX_VALUE];\r\n  traverseGeoJson(function(_gj) {\r\n    traverseCoords(_gj.coordinates, function(xy) {\r\n      min[0] = Math.min(min[0], xy[0]);\r\n      min[1] = Math.min(min[1], xy[1]);\r\n      max[0] = Math.max(max[0], xy[0]);\r\n      max[1] = Math.max(max[1], xy[1]);\r\n    });\r\n  }, null, geojson);\r\n  return [min[0], min[1], max[0], max[1]];\r\n}\r\n\r\nfunction reproject(geojson, from, to, projs) {\r\n  projs = projs || {};\r\n  if (!from) {\r\n    from = detectCrs(geojson, projs);\r\n  } else {\r\n    from = determineCrs(from, projs);\r\n  }\r\n\r\n  to = determineCrs(to, projs);\r\n  var transform = proj4(from, to).forward.bind(transform);\r\n\r\n  var transformGeometryCoords = function(gj) {\r\n    // No easy way to put correct CRS info into the GeoJSON,\r\n    // and definitely wrong to keep the old, so delete it.\r\n    if (gj.crs) {\r\n      delete gj.crs;\r\n    }\r\n    gj.coordinates = traverseCoords(gj.coordinates, transform);\r\n  }\r\n\r\n  var transformBbox = function(gj) {\r\n    if (gj.bbox) {\r\n      gj.bbox = calcBbox(gj);\r\n    }\r\n  }\r\n\r\n  return traverseGeoJson(transformGeometryCoords, transformBbox, geojson);\r\n}\r\n\r\nmodule.exports = {\r\n  detectCrs: detectCrs,\r\n\r\n  reproject: reproject,\r\n\r\n  reverse: function(geojson) {\r\n    return traverseGeoJson(function(gj) {\r\n      gj.coordinates = traverseCoords(gj.coordinates, function(xy) {\r\n        return [ xy[1], xy[0] ];\r\n      });\r\n    }, null, geojson);\r\n  },\r\n\r\n  toWgs84: function(geojson, from, projs) {\r\n    return reproject(geojson, from, proj4.WGS84, projs);\r\n  }\r\n};\r\n"],"sourceRoot":""}