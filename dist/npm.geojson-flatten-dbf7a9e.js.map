{"version":3,"sources":["webpack:///./node_modules/geojson-flatten/index.js"],"names":["module","exports","flatten","gj","type","features","reduce","mem","feature","concat","geometry","map","geom","properties","JSON","parse","stringify","coordinates","_","geometries","memo","geoms"],"mappings":"2EAuCAA,EAAAC,QAvCA,SAAAC,EAAAC,GACA,OAAAA,KAAAC,MAAA,MACA,wBAIA,OAHAD,EAAAE,SAAAF,EAAAE,SAAAC,OAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAE,OAAAP,EAAAM,KACa,IACbL,EACA,cACA,OAAAA,EAAAO,SACAR,EAAAC,EAAAO,UAAAC,IAAA,SAAAC,GACA,OACAR,KAAA,UACAS,WAAAC,KAAAC,MAAAD,KAAAE,UAAAb,EAAAU,aACAH,SAAAE,KALAT,EAQA,iBACA,OAAAA,EAAAc,YAAAN,IAAA,SAAAO,GACA,OAAwBd,KAAA,QAAAa,YAAAC,KAExB,mBACA,OAAAf,EAAAc,YAAAN,IAAA,SAAAO,GACA,OAAwBd,KAAA,UAAAa,YAAAC,KAExB,sBACA,OAAAf,EAAAc,YAAAN,IAAA,SAAAO,GACA,OAAwBd,KAAA,aAAAa,YAAAC,KAExB,yBACA,OAAAf,EAAAgB,WAAAR,IAAAT,GAAAI,OAAA,SAAAc,EAAAC,GACA,OAAAD,EAAAX,OAAAY,IACa,IACb,YACA,cACA,iBACA,OAAAlB","file":"npm.geojson-flatten-dbf7a9e.js","sourcesContent":["function flatten(gj) {\n    switch ((gj && gj.type) || null) {\n        case 'FeatureCollection':\n            gj.features = gj.features.reduce(function(mem, feature) {\n                return mem.concat(flatten(feature));\n            }, []);\n            return gj;\n        case 'Feature':\n            if (!gj.geometry) return gj;\n            return flatten(gj.geometry).map(function(geom) {\n                return {\n                    type: 'Feature',\n                    properties: JSON.parse(JSON.stringify(gj.properties)),\n                    geometry: geom\n                };\n            });\n        case 'MultiPoint':\n            return gj.coordinates.map(function(_) {\n                return { type: 'Point', coordinates: _ };\n            });\n        case 'MultiPolygon':\n            return gj.coordinates.map(function(_) {\n                return { type: 'Polygon', coordinates: _ };\n            });\n        case 'MultiLineString':\n            return gj.coordinates.map(function(_) {\n                return { type: 'LineString', coordinates: _ };\n            });\n        case 'GeometryCollection':\n            return gj.geometries.map(flatten).reduce(function(memo, geoms) {\n                return memo.concat(geoms);\n            }, []);\n        case 'Point':\n        case 'Polygon':\n        case 'LineString':\n            return [gj];\n    }\n}\n\nmodule.exports = flatten;\n"],"sourceRoot":""}