{"version":3,"sources":["webpack:///./node_modules/mgrs/mgrs.js"],"names":["NUM_100K_SETS","SET_ORIGIN_COLUMN_LETTERS","SET_ORIGIN_ROW_LETTERS","A","I","O","V","Z","forward","ll","accuracy","utm","seasting","easting","snorthing","northing","zoneNumber","zoneLetter","setParm","get100kSetForZone","setColumn","Math","floor","setRow","column","row","parm","index","colOrigin","charCodeAt","rowOrigin","colInt","rowInt","rollover","String","fromCharCode","substr","length","encode","N","T","C","M","LongOriginRad","ZoneNumber","Lat","lat","Long","lon","a","LatRad","degToRad","LongRad","sqrt","sin","tan","cos","UTMEasting","UTMNorthing","round","LetterDesignator","getLetterDesignator","LLtoUTM","toPoint","mgrs","bbox","UTMtoLL","decode","toUpperCase","left","right","top","bottom","deg","PI","radToDeg","rad","N1","T1","C1","R1","D","LongOrigin","mu","phi1Rad","e1","x","y","pow","result","topRight","i","mgrsString","testChar","hunK","sb","test","charAt","parseInt","substring","set","east100k","e","curCol","eastingValue","rewindMarker","getEastingFromChar","north100k","n","curRow","northingValue","getNorthingFromChar","getMinNorthing","remainder","accuracyBonus","sepEastingString","sepNorthingString","sep","sepEasting","sepNorthing","parseFloat","__webpack_exports__","inverse"],"mappings":"yJASA,IAAAA,EAAA,EAQAC,EAAA,SAQAC,EAAA,SAEAC,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,GAeO,SAAAC,EAAAC,EAAAC,GAEP,OADAA,KAAA,EA6TA,SAAAC,EAAAD,GAEA,IAAAE,EAAA,QAAAD,EAAAE,QACAC,EAAA,QAAAH,EAAAI,SAEA,OAAAJ,EAAAK,WAAAL,EAAAM,YAaAJ,EAbAF,EAAAE,QAaAE,EAbAJ,EAAAI,SAaAC,EAbAL,EAAAK,WAcAE,EAAAC,EAAAH,GACAI,EAAAC,KAAAC,MAAAT,EAAA,KACAU,EAAAF,KAAAC,MAAAP,EAAA,QAoCAS,EAnCAJ,EAmCAK,EAnCAF,EAmCAG,EAnCAR,EAqCAS,EAAAD,EAAA,EACAE,EAAA3B,EAAA4B,WAAAF,GACAG,EAAA5B,EAAA2B,WAAAF,GAGAI,EAAAH,EAAAJ,EAAA,EACAQ,EAAAF,EAAAL,EACAQ,GAAA,EAEAF,EAAAxB,IACAwB,IAAAxB,EAAAJ,EAAA,EACA8B,GAAA,IAGAF,IAAA3B,GAAAwB,EAAAxB,GAAA2B,EAAA3B,IAAA2B,EAAA3B,GAAAwB,EAAAxB,IAAA6B,IACAF,KAGAA,IAAA1B,GAAAuB,EAAAvB,GAAA0B,EAAA1B,IAAA0B,EAAA1B,GAAAuB,EAAAvB,IAAA4B,MACAF,IAEA3B,GACA2B,IAIAA,EAAAxB,IACAwB,IAAAxB,EAAAJ,EAAA,GAGA6B,EAAA1B,GACA0B,IAAA1B,EAAAH,EAAA,EACA8B,GAAA,GAGAA,GAAA,GAGAD,IAAA5B,GAAA0B,EAAA1B,GAAA4B,EAAA5B,IAAA4B,EAAA5B,GAAA0B,EAAA1B,IAAA6B,IACAD,KAGAA,IAAA3B,GAAAyB,EAAAzB,GAAA2B,EAAA3B,IAAA2B,EAAA3B,GAAAyB,EAAAzB,IAAA4B,MACAD,IAEA5B,GACA4B,IAIAA,EAAA1B,IACA0B,IAAA1B,EAAAH,EAAA,GAGA+B,OAAAC,aAAAJ,GAAAG,OAAAC,aAAAH,IA5GApB,EAAAwB,OAAAxB,EAAAyB,OAAA,EAAA3B,GAAAI,EAAAsB,OAAAtB,EAAAuB,OAAA,EAAA3B,GAoDA,IAAAc,EAAAC,EAAAC,EAEAC,EACAC,EACAE,EAGAC,EACAC,EACAC,EAhDA,IAAApB,EAAAE,EAAAC,EACAE,EACAE,EACAG,EAjVAe,CA8DA,SAAA7B,GACA,IAOA8B,EAAAC,EAAAC,EAAAtC,EAAAuC,EAGAC,EACAC,EAXAC,EAAApC,EAAAqC,IACAC,EAAAtC,EAAAuC,IACAC,EAAA,QAMAC,EAAAC,EAAAN,GACAO,EAAAD,EAAAJ,GAIAH,EAAAvB,KAAAC,OAAAyB,EAAA,UAGA,MAAAA,IACAH,EAAA,IAIAC,GAAA,IAAAA,EAAA,IAAAE,GAAA,GAAAA,EAAA,KACAH,EAAA,IAIAC,GAAA,IAAAA,EAAA,KACAE,GAAA,GAAAA,EAAA,EACAH,EAAA,GAEAG,GAAA,GAAAA,EAAA,GACAH,EAAA,GAEAG,GAAA,IAAAA,EAAA,GACAH,EAAA,GAEAG,GAAA,IAAAA,EAAA,KACAH,EAAA,KAOAD,EAAAQ,EAHA,GAAAP,EAAA,UAKA,oBAEAL,EAAAU,EAAA5B,KAAAgC,KAAA,EA7CA,UA6CAhC,KAAAiC,IAAAJ,GAAA7B,KAAAiC,IAAAJ,IACAV,EAAAnB,KAAAkC,IAAAL,GAAA7B,KAAAkC,IAAAL,GACAT,EAJA,oBAIApB,KAAAmC,IAAAN,GAAA7B,KAAAmC,IAAAN,GACA/C,EAAAkB,KAAAmC,IAAAN,IAAAE,EAAAT,GAEAD,EAAAO,GAAA,kBAAAC,EAAA,oBAAA7B,KAAAiC,IAAA,EAAAJ,GAAA,qBAAA7B,KAAAiC,IAAA,EAAAJ,GAAA,qBAAA7B,KAAAiC,IAAA,EAAAJ,IAEA,IAAAO,EAnDA,MAmDAlB,GAAApC,GAAA,EAAAqC,EAAAC,GAAAtC,MAAA,QAAAqC,MAAA,GAAAC,EAAA,oBAAAtC,UAAA,SAEAuD,EArDA,OAqDAhB,EAAAH,EAAAlB,KAAAkC,IAAAL,IAAA/C,IAAA,KAAAqC,EAAA,EAAAC,EAAA,EAAAA,KAAAtC,QAAA,UAAAqC,MAAA,IAAAC,EAAA,oBAAAtC,YAAA,MACA0C,EAAA,IACAa,GAAA,KAIA,OACA3C,SAAAM,KAAAsC,MAAAD,GACA7C,QAAAQ,KAAAsC,MAAAF,GACAzC,WAAA4B,EACA3B,WA6GA,SAAA6B,GAGA,IAAAc,EAAA,IAEA,IAAAd,MAAA,GACAc,EAAA,IAEA,GAAAd,MAAA,GACAc,EAAA,IAEA,GAAAd,MAAA,GACAc,EAAA,IAEA,GAAAd,MAAA,GACAc,EAAA,IAEA,GAAAd,MAAA,GACAc,EAAA,IAEA,GAAAd,MAAA,GACAc,EAAA,IAEA,GAAAd,MAAA,GACAc,EAAA,IAEA,GAAAd,MAAA,GACAc,EAAA,IAEA,GAAAd,MAAA,EACAc,EAAA,IAEA,EAAAd,MAAA,EACAc,EAAA,IAEA,EAAAd,OAAA,EACAc,EAAA,KAEA,EAAAd,OAAA,GACAc,EAAA,KAEA,GAAAd,OAAA,GACAc,EAAA,KAEA,GAAAd,OAAA,GACAc,EAAA,KAEA,GAAAd,OAAA,GACAc,EAAA,KAEA,GAAAd,OAAA,GACAc,EAAA,KAEA,GAAAd,OAAA,GACAc,EAAA,KAEA,GAAAd,OAAA,GACAc,EAAA,KAEA,GAAAd,OAAA,GACAc,EAAA,KAEA,GAAAd,OAAA,KACAc,EAAA,KAEA,OAAAA,EA9KAC,CAAAhB,IAlIAiB,CAAA,CACAhB,IAAArC,EAAA,GACAuC,IAAAvC,EAAA,KACGC,GAmBI,SAAAqD,EAAAC,GACP,IAAAC,EAAAC,EAAAC,EAAAH,EAAAI,gBACA,OAAAH,EAAAnB,KAAAmB,EAAAjB,IACA,CAAAiB,EAAAjB,IAAAiB,EAAAnB,KAEA,EAAAmB,EAAAI,KAAAJ,EAAAK,OAAA,GAAAL,EAAAM,IAAAN,EAAAO,QAAA,GASA,SAAArB,EAAAsB,GACA,OAAAA,GAAApD,KAAAqD,GAAA,KAUA,SAAAC,EAAAC,GACA,OAAAA,EAAAvD,KAAAqD,GAAA,IAqGA,SAAAR,EAAAvD,GAEA,IAAA+C,EAAA/C,EAAAI,SACA0C,EAAA9C,EAAAE,QACAI,EAAAN,EAAAM,WACAD,EAAAL,EAAAK,WAEA,GAAAA,EAAA,GAAAA,EAAA,GACA,YAGA,IAKA6D,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EACAC,EAAAC,EANAnC,EAAA,QAGAoC,GAAA,EAAAhE,KAAAgC,KAAA,eAAAhC,KAAAgC,KAAA,YAMAiC,EAAA7B,EAAA,IACA8B,EAAA7B,EAMAzC,EAAA,MACAsE,GAAA,KAKAL,EAAA,GAAAlE,EAAA,SASAoE,GAFAD,EADAI,EA7BA,MA8BA,oBAEA,EAAAF,EAAA,KAAAA,MAAA,IAAAhE,KAAAiC,IAAA,EAAA6B,IAAA,GAAAE,IAAA,MAAAA,QAAA,IAAAhE,KAAAiC,IAAA,EAAA6B,GAAA,IAAAE,MAAA,GAAAhE,KAAAiC,IAAA,EAAA6B,GAGAN,EAAA5B,EAAA5B,KAAAgC,KAAA,EAjCA,UAiCAhC,KAAAiC,IAAA8B,GAAA/D,KAAAiC,IAAA8B,IACAN,EAAAzD,KAAAkC,IAAA6B,GAAA/D,KAAAkC,IAAA6B,GACAL,EAVA,oBAUA1D,KAAAmC,IAAA4B,GAAA/D,KAAAmC,IAAA4B,GACAJ,EAAA,UAAA/B,EAAA5B,KAAAmE,IAAA,EApCA,UAoCAnE,KAAAiC,IAAA8B,GAAA/D,KAAAiC,IAAA8B,GAAA,KACAH,EAAAK,GAvCA,MAuCAT,GAEA,IAAA/B,EAAAsC,EAAAP,EAAAxD,KAAAkC,IAAA6B,GAAAJ,GAAAC,IAAA,OAAAH,EAAA,GAAAC,EAAA,EAAAA,IAAA,oBAAAE,QAAA,UAAAH,EAAA,IAAAC,EAAA,GAAAD,IAAA,qBAAAC,KAAAE,YAAA,KACAnC,EAAA6B,EAAA7B,GAEA,IAGA2C,EAHAzC,GAAAiC,GAAA,IAAAH,EAAAC,GAAAE,MAAA,OAAAF,EAAA,GAAAD,EAAA,EAAAC,IAAA,sBAAAD,KAAAG,UAAA,KAAA5D,KAAAmC,IAAA4B,GAIA,GAHApC,EAAAkC,EAAAP,EAAA3B,GAGArC,EAAAD,SAAA,CACA,IAAAgF,EAAAxB,EAAA,CACAnD,SAAAJ,EAAAI,SAAAJ,EAAAD,SACAG,QAAAF,EAAAE,QAAAF,EAAAD,SACAO,WAAAN,EAAAM,WACAD,WAAAL,EAAAK,aAEAyE,EAAA,CACAlB,IAAAmB,EAAA5C,IACAwB,MAAAoB,EAAA1C,IACAwB,OAAA1B,EACAuB,KAAArB,QAIAyC,EAAA,CACA3C,MACAE,OAGA,OAAAyC,EAwHA,SAAAtE,EAAAwE,GACA,IAAAzE,EAAAyE,EAAA3F,EAKA,OAJA,IAAAkB,IACAA,EAAAlB,GAGAkB,EAuFA,SAAAiD,EAAAyB,GAEA,GAAAA,GAAA,IAAAA,EAAAvD,OACA,wCAWA,IARA,IAIAwD,EAJAxD,EAAAuD,EAAAvD,OAEAyD,EAAA,KACAC,EAAA,GAEAJ,EAAA,GAGA,QAAAK,KAAAH,EAAAD,EAAAK,OAAAN,KAAA,CACA,GAAAA,GAAA,EACA,uCAAAC,EAEAG,GAAAF,EACAF,IAGA,IAAA3E,EAAAkF,SAAAH,EAAA,IAEA,OAAAJ,KAAA,EAAAtD,EAGA,uCAAAuD,EAGA,IAAA3E,EAAA2E,EAAAK,OAAAN,KAGA,GAAA1E,GAAA,WAAAA,GAAA,MAAAA,MAAA,WAAAA,GAAA,MAAAA,EACA,8BAAAA,EAAA,iBAAA2E,EAGAE,EAAAF,EAAAO,UAAAR,KAAA,GAWA,IATA,IAAAS,EAAAjF,EAAAH,GAEAqF,EAqDA,SAAAC,EAAAF,GAGA,IAAAG,EAAAtG,EAAA4B,WAAAuE,EAAA,GACAI,EAAA,IACAC,GAAA,EAEA,KAAAF,IAAAD,EAAAzE,WAAA,KAQA,KAPA0E,IACAnG,GACAmG,IAEAA,IAAAlG,GACAkG,IAEAA,EAAAhG,EAAA,CACA,GAAAkG,EACA,uBAAAH,EAEAC,EAAApG,EACAsG,GAAA,EAEAD,GAAA,IAGA,OAAAA,EA9EAE,CAAAZ,EAAAG,OAAA,GAAAG,GACAO,EAgGA,SAAAC,EAAAR,GAEA,GAAAQ,EAAA,IACA,yCAAAA,EAKA,IAAAC,EAAA3G,EAAA2B,WAAAuE,EAAA,GACAU,EAAA,EACAL,GAAA,EAEA,KAAAI,IAAAD,EAAA/E,WAAA,KAUA,KATAgF,IACAzG,GACAyG,IAEAA,IAAAxG,GACAwG,IAIAA,EAAAvG,EAAA,CACA,GAAAmG,EACA,uBAAAG,EAEAC,EAAA1G,EACAsG,GAAA,EAEAK,GAAA,IAGA,OAAAA,EAhIAC,CAAAjB,EAAAG,OAAA,GAAAG,GAMAO,EAAAK,EAAA/F,IACA0F,GAAA,IAIA,IAAAM,EAAA5E,EAAAsD,EAEA,GAAAsB,EAAA,KACA,yKAAArB,EAGA,IAIAsB,EAAAC,EAAAC,EAJAC,EAAAJ,EAAA,EAEAK,EAAA,EACAC,EAAA,EAaA,OAXAF,EAAA,IACAH,EAAA,IAAA7F,KAAAmE,IAAA,GAAA6B,GACAF,EAAAvB,EAAAO,UAAAR,IAAA0B,GACAC,EAAAE,WAAAL,GAAAD,EACAE,EAAAxB,EAAAO,UAAAR,EAAA0B,GACAE,EAAAC,WAAAJ,GAAAF,GAMA,CACArG,QAJAyG,EAAAjB,EAKAtF,SAJAwG,EAAAZ,EAKA1F,aACAD,aACAN,SAAAwG,GAuGA,SAAAF,EAAA/F,GACA,IAAAF,EACA,OAAAE,GACA,QACAF,EAAA,KACA,MACA,QACAA,EAAA,IACA,MACA,QACAA,EAAA,KACA,MACA,QACAA,EAAA,KACA,MACA,QACAA,EAAA,KACA,MACA,QACAA,EAAA,KACA,MACA,QACAA,EAAA,KACA,MACA,QACAA,EAAA,KACA,MACA,QACAA,EAAA,KACA,MACA,QACAA,EAAA,KACA,MACA,QACAA,EAAA,EACA,MACA,QACAA,EAAA,IACA,MACA,QACAA,EAAA,KACA,MACA,QACAA,EAAA,KACA,MACA,QACAA,EAAA,KACA,MACA,QACAA,EAAA,KACA,MACA,QACAA,EAAA,KACA,MACA,QACAA,EAAA,KACA,MACA,QACAA,EAAA,IACA,MACA,QACAA,EAAA,KACA,MACA,QACAA,GAAA,EAEA,GAAAA,GAAA,EACA,OAAAA,EAGA,6BAAAE,EAtsBewG,EAAA,GACfjH,UACAkH,QA4BO,SAAA1D,GACP,IAAAC,EAAAC,EAAAC,EAAAH,EAAAI,gBACA,GAAAH,EAAAnB,KAAAmB,EAAAjB,IACA,OAAAiB,EAAAjB,IAAAiB,EAAAnB,IAAAmB,EAAAjB,IAAAiB,EAAAnB,KAEA,OAAAmB,EAAAI,KAAAJ,EAAAO,OAAAP,EAAAK,MAAAL,EAAAM,MAhCAR","file":"npm.mgrs-885fb01.js","sourcesContent":["\n\n\n/**\n * UTM zones are grouped, and assigned to one of a group of 6\n * sets.\n *\n * {int} @private\n */\nvar NUM_100K_SETS = 6;\n\n/**\n * The column letters (for easting) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n/**\n * The row letters (for northing) of the lower left value, per\n * set.\n *\n * {string} @private\n */\nvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\nvar A = 65; // A\nvar I = 73; // I\nvar O = 79; // O\nvar V = 86; // V\nvar Z = 90; // Z\nexport default {\n  forward: forward,\n  inverse: inverse,\n  toPoint: toPoint\n};\n/**\n * Conversion of lat/lon to MGRS.\n *\n * @param {object} ll Object literal with lat and lon properties on a\n *     WGS84 ellipsoid.\n * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n * @return {string} the MGRS string for the given location and accuracy.\n */\nexport function forward(ll, accuracy) {\n  accuracy = accuracy || 5; // default accuracy 1m\n  return encode(LLtoUTM({\n    lat: ll[1],\n    lon: ll[0]\n  }), accuracy);\n};\n\n/**\n * Conversion of MGRS to lat/lon.\n *\n * @param {string} mgrs MGRS string.\n * @return {array} An array with left (longitude), bottom (latitude), right\n *     (longitude) and top (latitude) values in WGS84, representing the\n *     bounding box for the provided MGRS reference.\n */\nexport function inverse(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n  }\n  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n};\n\nexport function toPoint(mgrs) {\n  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n  if (bbox.lat && bbox.lon) {\n    return [bbox.lon, bbox.lat];\n  }\n  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n};\n/**\n * Conversion from degrees to radians.\n *\n * @private\n * @param {number} deg the angle in degrees.\n * @return {number} the angle in radians.\n */\nfunction degToRad(deg) {\n  return (deg * (Math.PI / 180.0));\n}\n\n/**\n * Conversion from radians to degrees.\n *\n * @private\n * @param {number} rad the angle in radians.\n * @return {number} the angle in degrees.\n */\nfunction radToDeg(rad) {\n  return (180.0 * (rad / Math.PI));\n}\n\n/**\n * Converts a set of Longitude and Latitude co-ordinates to UTM\n * using the WGS84 ellipsoid.\n *\n * @private\n * @param {object} ll Object literal with lat and lon properties\n *     representing the WGS84 coordinate to be converted.\n * @return {object} Object literal containing the UTM value with easting,\n *     northing, zoneNumber and zoneLetter properties, and an optional\n *     accuracy property in digits. Returns null if the conversion failed.\n */\nfunction LLtoUTM(ll) {\n  var Lat = ll.lat;\n  var Long = ll.lon;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var k0 = 0.9996;\n  var LongOrigin;\n  var eccPrimeSquared;\n  var N, T, C, A, M;\n  var LatRad = degToRad(Lat);\n  var LongRad = degToRad(Long);\n  var LongOriginRad;\n  var ZoneNumber;\n  // (int)\n  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n  //Make sure the longitude 180.00 is in Zone 60\n  if (Long === 180) {\n    ZoneNumber = 60;\n  }\n\n  // Special zone for Norway\n  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n    ZoneNumber = 32;\n  }\n\n  // Special zones for Svalbard\n  if (Lat >= 72.0 && Lat < 84.0) {\n    if (Long >= 0.0 && Long < 9.0) {\n      ZoneNumber = 31;\n    }\n    else if (Long >= 9.0 && Long < 21.0) {\n      ZoneNumber = 33;\n    }\n    else if (Long >= 21.0 && Long < 33.0) {\n      ZoneNumber = 35;\n    }\n    else if (Long >= 33.0 && Long < 42.0) {\n      ZoneNumber = 37;\n    }\n  }\n\n  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n  // in middle of\n  // zone\n  LongOriginRad = degToRad(LongOrigin);\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n  T = Math.tan(LatRad) * Math.tan(LatRad);\n  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n  if (Lat < 0.0) {\n    UTMNorthing += 10000000.0; //10000000 meter offset for\n    // southern hemisphere\n  }\n\n  return {\n    northing: Math.round(UTMNorthing),\n    easting: Math.round(UTMEasting),\n    zoneNumber: ZoneNumber,\n    zoneLetter: getLetterDesignator(Lat)\n  };\n}\n\n/**\n * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n * class where the Zone can be specified as a single string eg.\"60N\" which\n * is then broken down into the ZoneNumber and ZoneLetter.\n *\n * @private\n * @param {object} utm An object literal with northing, easting, zoneNumber\n *     and zoneLetter properties. If an optional accuracy property is\n *     provided (in meters), a bounding box will be returned instead of\n *     latitude and longitude.\n * @return {object} An object literal containing either lat and lon values\n *     (if no accuracy was provided), or top, right, bottom and left values\n *     for the bounding box calculated according to the provided accuracy.\n *     Returns null if the conversion failed.\n */\nfunction UTMtoLL(utm) {\n\n  var UTMNorthing = utm.northing;\n  var UTMEasting = utm.easting;\n  var zoneLetter = utm.zoneLetter;\n  var zoneNumber = utm.zoneNumber;\n  // check the ZoneNummber is valid\n  if (zoneNumber < 0 || zoneNumber > 60) {\n    return null;\n  }\n\n  var k0 = 0.9996;\n  var a = 6378137.0; //ellip.radius;\n  var eccSquared = 0.00669438; //ellip.eccsq;\n  var eccPrimeSquared;\n  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n  var N1, T1, C1, R1, D, M;\n  var LongOrigin;\n  var mu, phi1Rad;\n\n  // remove 500,000 meter offset for longitude\n  var x = UTMEasting - 500000.0;\n  var y = UTMNorthing;\n\n  // We must know somehow if we are in the Northern or Southern\n  // hemisphere, this is the only time we use the letter So even\n  // if the Zone letter isn't exactly correct it should indicate\n  // the hemisphere correctly\n  if (zoneLetter < 'N') {\n    y -= 10000000.0; // remove 10,000,000 meter offset used\n    // for southern hemisphere\n  }\n\n  // There are 60 zones with zone 1 being at West -180 to -174\n  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n  // in middle of\n  // zone\n\n  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n  M = y / k0;\n  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n  D = x / (N1 * k0);\n\n  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n  lat = radToDeg(lat);\n\n  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n  lon = LongOrigin + radToDeg(lon);\n\n  var result;\n  if (utm.accuracy) {\n    var topRight = UTMtoLL({\n      northing: utm.northing + utm.accuracy,\n      easting: utm.easting + utm.accuracy,\n      zoneLetter: utm.zoneLetter,\n      zoneNumber: utm.zoneNumber\n    });\n    result = {\n      top: topRight.lat,\n      right: topRight.lon,\n      bottom: lat,\n      left: lon\n    };\n  }\n  else {\n    result = {\n      lat: lat,\n      lon: lon\n    };\n  }\n  return result;\n}\n\n/**\n * Calculates the MGRS letter designator for the given latitude.\n *\n * @private\n * @param {number} lat The latitude in WGS84 to get the letter designator\n *     for.\n * @return {char} The letter designator.\n */\nfunction getLetterDesignator(lat) {\n  //This is here as an error flag to show that the Latitude is\n  //outside MGRS limits\n  var LetterDesignator = 'Z';\n\n  if ((84 >= lat) && (lat >= 72)) {\n    LetterDesignator = 'X';\n  }\n  else if ((72 > lat) && (lat >= 64)) {\n    LetterDesignator = 'W';\n  }\n  else if ((64 > lat) && (lat >= 56)) {\n    LetterDesignator = 'V';\n  }\n  else if ((56 > lat) && (lat >= 48)) {\n    LetterDesignator = 'U';\n  }\n  else if ((48 > lat) && (lat >= 40)) {\n    LetterDesignator = 'T';\n  }\n  else if ((40 > lat) && (lat >= 32)) {\n    LetterDesignator = 'S';\n  }\n  else if ((32 > lat) && (lat >= 24)) {\n    LetterDesignator = 'R';\n  }\n  else if ((24 > lat) && (lat >= 16)) {\n    LetterDesignator = 'Q';\n  }\n  else if ((16 > lat) && (lat >= 8)) {\n    LetterDesignator = 'P';\n  }\n  else if ((8 > lat) && (lat >= 0)) {\n    LetterDesignator = 'N';\n  }\n  else if ((0 > lat) && (lat >= -8)) {\n    LetterDesignator = 'M';\n  }\n  else if ((-8 > lat) && (lat >= -16)) {\n    LetterDesignator = 'L';\n  }\n  else if ((-16 > lat) && (lat >= -24)) {\n    LetterDesignator = 'K';\n  }\n  else if ((-24 > lat) && (lat >= -32)) {\n    LetterDesignator = 'J';\n  }\n  else if ((-32 > lat) && (lat >= -40)) {\n    LetterDesignator = 'H';\n  }\n  else if ((-40 > lat) && (lat >= -48)) {\n    LetterDesignator = 'G';\n  }\n  else if ((-48 > lat) && (lat >= -56)) {\n    LetterDesignator = 'F';\n  }\n  else if ((-56 > lat) && (lat >= -64)) {\n    LetterDesignator = 'E';\n  }\n  else if ((-64 > lat) && (lat >= -72)) {\n    LetterDesignator = 'D';\n  }\n  else if ((-72 > lat) && (lat >= -80)) {\n    LetterDesignator = 'C';\n  }\n  return LetterDesignator;\n}\n\n/**\n * Encodes a UTM location as MGRS string.\n *\n * @private\n * @param {object} utm An object literal with easting, northing,\n *     zoneLetter, zoneNumber\n * @param {number} accuracy Accuracy in digits (1-5).\n * @return {string} MGRS string for the given UTM location.\n */\nfunction encode(utm, accuracy) {\n  // prepend with leading zeroes\n  var seasting = \"00000\" + utm.easting,\n    snorthing = \"00000\" + utm.northing;\n\n  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n}\n\n/**\n * Get the two letter 100k designator for a given UTM easting,\n * northing and zone number value.\n *\n * @private\n * @param {number} easting\n * @param {number} northing\n * @param {number} zoneNumber\n * @return the two letter 100k designator for the given UTM location.\n */\nfunction get100kID(easting, northing, zoneNumber) {\n  var setParm = get100kSetForZone(zoneNumber);\n  var setColumn = Math.floor(easting / 100000);\n  var setRow = Math.floor(northing / 100000) % 20;\n  return getLetter100kID(setColumn, setRow, setParm);\n}\n\n/**\n * Given a UTM zone number, figure out the MGRS 100K set it is in.\n *\n * @private\n * @param {number} i An UTM zone number.\n * @return {number} the 100k set the UTM zone is in.\n */\nfunction get100kSetForZone(i) {\n  var setParm = i % NUM_100K_SETS;\n  if (setParm === 0) {\n    setParm = NUM_100K_SETS;\n  }\n\n  return setParm;\n}\n\n/**\n * Get the two-letter MGRS 100k designator given information\n * translated from the UTM northing, easting and zone number.\n *\n * @private\n * @param {number} column the column index as it relates to the MGRS\n *        100k set spreadsheet, created from the UTM easting.\n *        Values are 1-8.\n * @param {number} row the row index as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM northing value. Values\n *        are from 0-19.\n * @param {number} parm the set block, as it relates to the MGRS 100k set\n *        spreadsheet, created from the UTM zone. Values are from\n *        1-60.\n * @return two letter MGRS 100k code.\n */\nfunction getLetter100kID(column, row, parm) {\n  // colOrigin and rowOrigin are the letters at the origin of the set\n  var index = parm - 1;\n  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n  // colInt and rowInt are the letters to build to return\n  var colInt = colOrigin + column - 1;\n  var rowInt = rowOrigin + row;\n  var rollover = false;\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n    rollover = true;\n  }\n\n  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n    colInt++;\n  }\n\n  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n    colInt++;\n\n    if (colInt === I) {\n      colInt++;\n    }\n  }\n\n  if (colInt > Z) {\n    colInt = colInt - Z + A - 1;\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n    rollover = true;\n  }\n  else {\n    rollover = false;\n  }\n\n  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n    rowInt++;\n  }\n\n  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n    rowInt++;\n\n    if (rowInt === I) {\n      rowInt++;\n    }\n  }\n\n  if (rowInt > V) {\n    rowInt = rowInt - V + A - 1;\n  }\n\n  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n  return twoLetter;\n}\n\n/**\n * Decode the UTM parameters from a MGRS string.\n *\n * @private\n * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n * @return {object} An object literal with easting, northing, zoneLetter,\n *     zoneNumber and accuracy (in meters) properties.\n */\nfunction decode(mgrsString) {\n\n  if (mgrsString && mgrsString.length === 0) {\n    throw (\"MGRSPoint coverting from nothing\");\n  }\n\n  var length = mgrsString.length;\n\n  var hunK = null;\n  var sb = \"\";\n  var testChar;\n  var i = 0;\n\n  // get Zone number\n  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n    if (i >= 2) {\n      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n    }\n    sb += testChar;\n    i++;\n  }\n\n  var zoneNumber = parseInt(sb, 10);\n\n  if (i === 0 || i + 3 > length) {\n    // A good MGRS string has to be 4-5 digits long,\n    // ##AAA/#AAA at least.\n    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n  }\n\n  var zoneLetter = mgrsString.charAt(i++);\n\n  // Should we check the zone letter here? Why not.\n  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n  }\n\n  hunK = mgrsString.substring(i, i += 2);\n\n  var set = get100kSetForZone(zoneNumber);\n\n  var east100k = getEastingFromChar(hunK.charAt(0), set);\n  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n  // We have a bug where the northing may be 2000000 too low.\n  // How\n  // do we know when to roll over?\n\n  while (north100k < getMinNorthing(zoneLetter)) {\n    north100k += 2000000;\n  }\n\n  // calculate the char index for easting/northing separator\n  var remainder = length - i;\n\n  if (remainder % 2 !== 0) {\n    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n  }\n\n  var sep = remainder / 2;\n\n  var sepEasting = 0.0;\n  var sepNorthing = 0.0;\n  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n  if (sep > 0) {\n    accuracyBonus = 100000.0 / Math.pow(10, sep);\n    sepEastingString = mgrsString.substring(i, i + sep);\n    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n    sepNorthingString = mgrsString.substring(i + sep);\n    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n  }\n\n  easting = sepEasting + east100k;\n  northing = sepNorthing + north100k;\n\n  return {\n    easting: easting,\n    northing: northing,\n    zoneLetter: zoneLetter,\n    zoneNumber: zoneNumber,\n    accuracy: accuracyBonus\n  };\n}\n\n/**\n * Given the first letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the easting value that\n * should be added to the other, secondary easting value.\n *\n * @private\n * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n * @param {number} set The MGRS table set for the zone number.\n * @return {number} The easting value for the given letter and set.\n */\nfunction getEastingFromChar(e, set) {\n  // colOrigin is the letter at the origin of the set for the\n  // column\n  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n  var eastingValue = 100000.0;\n  var rewindMarker = false;\n\n  while (curCol !== e.charCodeAt(0)) {\n    curCol++;\n    if (curCol === I) {\n      curCol++;\n    }\n    if (curCol === O) {\n      curCol++;\n    }\n    if (curCol > Z) {\n      if (rewindMarker) {\n        throw (\"Bad character: \" + e);\n      }\n      curCol = A;\n      rewindMarker = true;\n    }\n    eastingValue += 100000.0;\n  }\n\n  return eastingValue;\n}\n\n/**\n * Given the second letter from a two-letter MGRS 100k zone, and given the\n * MGRS table set for the zone number, figure out the northing value that\n * should be added to the other, secondary northing value. You have to\n * remember that Northings are determined from the equator, and the vertical\n * cycle of letters mean a 2000000 additional northing meters. This happens\n * approx. every 18 degrees of latitude. This method does *NOT* count any\n * additional northings. You have to figure out how many 2000000 meters need\n * to be added for the zone letter of the MGRS coordinate.\n *\n * @private\n * @param {char} n Second letter of the MGRS 100k zone\n * @param {number} set The MGRS table set number, which is dependent on the\n *     UTM zone number.\n * @return {number} The northing value for the given letter and set.\n */\nfunction getNorthingFromChar(n, set) {\n\n  if (n > 'V') {\n    throw (\"MGRSPoint given invalid Northing \" + n);\n  }\n\n  // rowOrigin is the letter at the origin of the set for the\n  // column\n  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n  var northingValue = 0.0;\n  var rewindMarker = false;\n\n  while (curRow !== n.charCodeAt(0)) {\n    curRow++;\n    if (curRow === I) {\n      curRow++;\n    }\n    if (curRow === O) {\n      curRow++;\n    }\n    // fixing a bug making whole application hang in this loop\n    // when 'n' is a wrong character\n    if (curRow > V) {\n      if (rewindMarker) { // making sure that this loop ends\n        throw (\"Bad character: \" + n);\n      }\n      curRow = A;\n      rewindMarker = true;\n    }\n    northingValue += 100000.0;\n  }\n\n  return northingValue;\n}\n\n/**\n * The function getMinNorthing returns the minimum northing value of a MGRS\n * zone.\n *\n * Ported from Geotrans' c Lattitude_Band_Value structure table.\n *\n * @private\n * @param {char} zoneLetter The MGRS zone to get the min northing for.\n * @return {number}\n */\nfunction getMinNorthing(zoneLetter) {\n  var northing;\n  switch (zoneLetter) {\n  case 'C':\n    northing = 1100000.0;\n    break;\n  case 'D':\n    northing = 2000000.0;\n    break;\n  case 'E':\n    northing = 2800000.0;\n    break;\n  case 'F':\n    northing = 3700000.0;\n    break;\n  case 'G':\n    northing = 4600000.0;\n    break;\n  case 'H':\n    northing = 5500000.0;\n    break;\n  case 'J':\n    northing = 6400000.0;\n    break;\n  case 'K':\n    northing = 7300000.0;\n    break;\n  case 'L':\n    northing = 8200000.0;\n    break;\n  case 'M':\n    northing = 9100000.0;\n    break;\n  case 'N':\n    northing = 0.0;\n    break;\n  case 'P':\n    northing = 800000.0;\n    break;\n  case 'Q':\n    northing = 1700000.0;\n    break;\n  case 'R':\n    northing = 2600000.0;\n    break;\n  case 'S':\n    northing = 3500000.0;\n    break;\n  case 'T':\n    northing = 4400000.0;\n    break;\n  case 'U':\n    northing = 5300000.0;\n    break;\n  case 'V':\n    northing = 6200000.0;\n    break;\n  case 'W':\n    northing = 7000000.0;\n    break;\n  case 'X':\n    northing = 7900000.0;\n    break;\n  default:\n    northing = -1.0;\n  }\n  if (northing >= 0.0) {\n    return northing;\n  }\n  else {\n    throw (\"Invalid zone letter: \" + zoneLetter);\n  }\n\n}\n"],"sourceRoot":""}