{"version":3,"sources":["webpack:///./node_modules/stackblur-canvas/dist/stackblur-es.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","__webpack_require__","r","__webpack_exports__","d","BlurStack","processImage","processCanvasRGBA","processCanvasRGB","processImageDataRGBA","processImageDataRGB","mulTable","shgTable","img","canvas","radius","blurAlphaChannel","document","getElementById","w","naturalWidth","h","naturalHeight","style","width","height","context","getContext","clearRect","drawImage","isNaN","getImageDataFromCanvas","topX","topY","TypeError","getImageData","e","Error","imageData","putImageData","x","y","i","p","yp","yi","yw","rSum","gSum","bSum","aSum","rOutSum","gOutSum","bOutSum","aOutSum","rInSum","gInSum","bInSum","aInSum","pr","pg","pb","pa","rbs","stackEnd","pixels","data","div","widthMinus1","heightMinus1","radiusPlus1","sumFactor","stackStart","stack","next","stackIn","stackOut","mulSum","shgSum","g","b","a","instance","Constructor","_classCallCheck","this"],"mappings":"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","file":"npm.stackblur-canvas-ba94e6b.js","sourcesContent":["function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/**\n* StackBlur - a fast almost Gaussian Blur For Canvas\n*\n* In case you find this class useful - especially in commercial projects -\n* I am not totally unhappy for a small donation to my PayPal account\n* mario@quasimondo.de\n*\n* Or support me on flattr:\n* {@link https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript}\n* @module StackBlur\n* @version 0.5\n* @author Mario Klingemann\n* Contact: mario@quasimondo.com\n* Website: {@link http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html}\n* Twitter: @quasimondo\n*\n* @copyright (c) 2010 Mario Klingemann\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\nvar mulTable = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];\nvar shgTable = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];\n/**\n * @param {string|HTMLImageElement} img\n * @param {string|HTMLCanvasElement} canvas\n * @param {Float} radius\n * @param {boolean} blurAlphaChannel\n * @returns {undefined}\n */\n\nfunction processImage(img, canvas, radius, blurAlphaChannel) {\n  if (typeof img === 'string') {\n    img = document.getElementById(img);\n  }\n\n  if (!img || !('naturalWidth' in img)) {\n    return;\n  }\n\n  var w = img.naturalWidth;\n  var h = img.naturalHeight;\n\n  if (typeof canvas === 'string') {\n    canvas = document.getElementById(canvas);\n  }\n\n  if (!canvas || !('getContext' in canvas)) {\n    return;\n  }\n\n  canvas.style.width = w + 'px';\n  canvas.style.height = h + 'px';\n  canvas.width = w;\n  canvas.height = h;\n  var context = canvas.getContext('2d');\n  context.clearRect(0, 0, w, h);\n  context.drawImage(img, 0, 0);\n\n  if (isNaN(radius) || radius < 1) {\n    return;\n  }\n\n  if (blurAlphaChannel) {\n    processCanvasRGBA(canvas, 0, 0, w, h, radius);\n  } else {\n    processCanvasRGB(canvas, 0, 0, w, h, radius);\n  }\n}\n/**\n * @param {string|HTMLCanvasElement} canvas\n * @param {Integer} topX\n * @param {Integer} topY\n * @param {Integer} width\n * @param {Integer} height\n * @throws {Error|TypeError}\n * @returns {ImageData} See {@link https://html.spec.whatwg.org/multipage/canvas.html#imagedata}\n */\n\n\nfunction getImageDataFromCanvas(canvas, topX, topY, width, height) {\n  if (typeof canvas === 'string') {\n    canvas = document.getElementById(canvas);\n  }\n\n  if (!canvas || _typeof(canvas) !== 'object' || !('getContext' in canvas)) {\n    throw new TypeError('Expecting canvas with `getContext` method in processCanvasRGB(A) calls!');\n  }\n\n  var context = canvas.getContext('2d');\n\n  try {\n    return context.getImageData(topX, topY, width, height);\n  } catch (e) {\n    throw new Error('unable to access image data: ' + e);\n  }\n}\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {Integer} topX\n * @param {Integer} topY\n * @param {Integer} width\n * @param {Integer} height\n * @param {Float} radius\n * @returns {undefined}\n */\n\n\nfunction processCanvasRGBA(canvas, topX, topY, width, height, radius) {\n  if (isNaN(radius) || radius < 1) {\n    return;\n  }\n\n  radius |= 0;\n  var imageData = getImageDataFromCanvas(canvas, topX, topY, width, height);\n  imageData = processImageDataRGBA(imageData, topX, topY, width, height, radius);\n  canvas.getContext('2d').putImageData(imageData, topX, topY);\n}\n/**\n * @param {ImageData} imageData\n * @param {Integer} topX\n * @param {Integer} topY\n * @param {Integer} width\n * @param {Integer} height\n * @param {Float} radius\n * @returns {ImageData}\n */\n\n\nfunction processImageDataRGBA(imageData, topX, topY, width, height, radius) {\n  var pixels = imageData.data;\n  var x, y, i, p, yp, yi, yw, rSum, gSum, bSum, aSum, rOutSum, gOutSum, bOutSum, aOutSum, rInSum, gInSum, bInSum, aInSum, pr, pg, pb, pa, rbs;\n  var div = 2 * radius + 1; // const w4 = width << 2;\n\n  var widthMinus1 = width - 1;\n  var heightMinus1 = height - 1;\n  var radiusPlus1 = radius + 1;\n  var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n  var stackStart = new BlurStack();\n  var stack = stackStart;\n  var stackEnd;\n\n  for (i = 1; i < div; i++) {\n    stack = stack.next = new BlurStack();\n\n    if (i === radiusPlus1) {\n      stackEnd = stack;\n    }\n  }\n\n  stack.next = stackStart;\n  var stackIn = null;\n  var stackOut = null;\n  yw = yi = 0;\n  var mulSum = mulTable[radius];\n  var shgSum = shgTable[radius];\n\n  for (y = 0; y < height; y++) {\n    rInSum = gInSum = bInSum = aInSum = rSum = gSum = bSum = aSum = 0;\n    rOutSum = radiusPlus1 * (pr = pixels[yi]);\n    gOutSum = radiusPlus1 * (pg = pixels[yi + 1]);\n    bOutSum = radiusPlus1 * (pb = pixels[yi + 2]);\n    aOutSum = radiusPlus1 * (pa = pixels[yi + 3]);\n    rSum += sumFactor * pr;\n    gSum += sumFactor * pg;\n    bSum += sumFactor * pb;\n    aSum += sumFactor * pa;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack.a = pa;\n      stack = stack.next;\n    }\n\n    for (i = 1; i < radiusPlus1; i++) {\n      p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n      rSum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);\n      gSum += (stack.g = pg = pixels[p + 1]) * rbs;\n      bSum += (stack.b = pb = pixels[p + 2]) * rbs;\n      aSum += (stack.a = pa = pixels[p + 3]) * rbs;\n      rInSum += pr;\n      gInSum += pg;\n      bInSum += pb;\n      aInSum += pa;\n      stack = stack.next;\n    }\n\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (x = 0; x < width; x++) {\n      pixels[yi + 3] = pa = aSum * mulSum >> shgSum;\n\n      if (pa !== 0) {\n        pa = 255 / pa;\n        pixels[yi] = (rSum * mulSum >> shgSum) * pa;\n        pixels[yi + 1] = (gSum * mulSum >> shgSum) * pa;\n        pixels[yi + 2] = (bSum * mulSum >> shgSum) * pa;\n      } else {\n        pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;\n      }\n\n      rSum -= rOutSum;\n      gSum -= gOutSum;\n      bSum -= bOutSum;\n      aSum -= aOutSum;\n      rOutSum -= stackIn.r;\n      gOutSum -= stackIn.g;\n      bOutSum -= stackIn.b;\n      aOutSum -= stackIn.a;\n      p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;\n      rInSum += stackIn.r = pixels[p];\n      gInSum += stackIn.g = pixels[p + 1];\n      bInSum += stackIn.b = pixels[p + 2];\n      aInSum += stackIn.a = pixels[p + 3];\n      rSum += rInSum;\n      gSum += gInSum;\n      bSum += bInSum;\n      aSum += aInSum;\n      stackIn = stackIn.next;\n      rOutSum += pr = stackOut.r;\n      gOutSum += pg = stackOut.g;\n      bOutSum += pb = stackOut.b;\n      aOutSum += pa = stackOut.a;\n      rInSum -= pr;\n      gInSum -= pg;\n      bInSum -= pb;\n      aInSum -= pa;\n      stackOut = stackOut.next;\n      yi += 4;\n    }\n\n    yw += width;\n  }\n\n  for (x = 0; x < width; x++) {\n    gInSum = bInSum = aInSum = rInSum = gSum = bSum = aSum = rSum = 0;\n    yi = x << 2;\n    rOutSum = radiusPlus1 * (pr = pixels[yi]);\n    gOutSum = radiusPlus1 * (pg = pixels[yi + 1]);\n    bOutSum = radiusPlus1 * (pb = pixels[yi + 2]);\n    aOutSum = radiusPlus1 * (pa = pixels[yi + 3]);\n    rSum += sumFactor * pr;\n    gSum += sumFactor * pg;\n    bSum += sumFactor * pb;\n    aSum += sumFactor * pa;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack.a = pa;\n      stack = stack.next;\n    }\n\n    yp = width;\n\n    for (i = 1; i <= radius; i++) {\n      yi = yp + x << 2;\n      rSum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);\n      gSum += (stack.g = pg = pixels[yi + 1]) * rbs;\n      bSum += (stack.b = pb = pixels[yi + 2]) * rbs;\n      aSum += (stack.a = pa = pixels[yi + 3]) * rbs;\n      rInSum += pr;\n      gInSum += pg;\n      bInSum += pb;\n      aInSum += pa;\n      stack = stack.next;\n\n      if (i < heightMinus1) {\n        yp += width;\n      }\n    }\n\n    yi = x;\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (y = 0; y < height; y++) {\n      p = yi << 2;\n      pixels[p + 3] = pa = aSum * mulSum >> shgSum;\n\n      if (pa > 0) {\n        pa = 255 / pa;\n        pixels[p] = (rSum * mulSum >> shgSum) * pa;\n        pixels[p + 1] = (gSum * mulSum >> shgSum) * pa;\n        pixels[p + 2] = (bSum * mulSum >> shgSum) * pa;\n      } else {\n        pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;\n      }\n\n      rSum -= rOutSum;\n      gSum -= gOutSum;\n      bSum -= bOutSum;\n      aSum -= aOutSum;\n      rOutSum -= stackIn.r;\n      gOutSum -= stackIn.g;\n      bOutSum -= stackIn.b;\n      aOutSum -= stackIn.a;\n      p = x + ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width << 2;\n      rSum += rInSum += stackIn.r = pixels[p];\n      gSum += gInSum += stackIn.g = pixels[p + 1];\n      bSum += bInSum += stackIn.b = pixels[p + 2];\n      aSum += aInSum += stackIn.a = pixels[p + 3];\n      stackIn = stackIn.next;\n      rOutSum += pr = stackOut.r;\n      gOutSum += pg = stackOut.g;\n      bOutSum += pb = stackOut.b;\n      aOutSum += pa = stackOut.a;\n      rInSum -= pr;\n      gInSum -= pg;\n      bInSum -= pb;\n      aInSum -= pa;\n      stackOut = stackOut.next;\n      yi += width;\n    }\n  }\n\n  return imageData;\n}\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {Integer} topX\n * @param {Integer} topY\n * @param {Integer} width\n * @param {Integer} height\n * @param {Float} radius\n * @returns {undefined}\n */\n\n\nfunction processCanvasRGB(canvas, topX, topY, width, height, radius) {\n  if (isNaN(radius) || radius < 1) {\n    return;\n  }\n\n  radius |= 0;\n  var imageData = getImageDataFromCanvas(canvas, topX, topY, width, height);\n  imageData = processImageDataRGB(imageData, topX, topY, width, height, radius);\n  canvas.getContext('2d').putImageData(imageData, topX, topY);\n}\n/**\n * @param {ImageData} imageData\n * @param {Integer} topX\n * @param {Integer} topY\n * @param {Integer} width\n * @param {Integer} height\n * @param {Float} radius\n * @returns {ImageData}\n */\n\n\nfunction processImageDataRGB(imageData, topX, topY, width, height, radius) {\n  var pixels = imageData.data;\n  var x, y, i, p, yp, yi, yw, rSum, gSum, bSum, rOutSum, gOutSum, bOutSum, rInSum, gInSum, bInSum, pr, pg, pb, rbs;\n  var div = 2 * radius + 1; // const w4 = width << 2;\n\n  var widthMinus1 = width - 1;\n  var heightMinus1 = height - 1;\n  var radiusPlus1 = radius + 1;\n  var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n  var stackStart = new BlurStack();\n  var stack = stackStart;\n  var stackEnd;\n\n  for (i = 1; i < div; i++) {\n    stack = stack.next = new BlurStack();\n\n    if (i === radiusPlus1) {\n      stackEnd = stack;\n    }\n  }\n\n  stack.next = stackStart;\n  var stackIn = null;\n  var stackOut = null;\n  yw = yi = 0;\n  var mulSum = mulTable[radius];\n  var shgSum = shgTable[radius];\n\n  for (y = 0; y < height; y++) {\n    rInSum = gInSum = bInSum = rSum = gSum = bSum = 0;\n    rOutSum = radiusPlus1 * (pr = pixels[yi]);\n    gOutSum = radiusPlus1 * (pg = pixels[yi + 1]);\n    bOutSum = radiusPlus1 * (pb = pixels[yi + 2]);\n    rSum += sumFactor * pr;\n    gSum += sumFactor * pg;\n    bSum += sumFactor * pb;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack = stack.next;\n    }\n\n    for (i = 1; i < radiusPlus1; i++) {\n      p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n      rSum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);\n      gSum += (stack.g = pg = pixels[p + 1]) * rbs;\n      bSum += (stack.b = pb = pixels[p + 2]) * rbs;\n      rInSum += pr;\n      gInSum += pg;\n      bInSum += pb;\n      stack = stack.next;\n    }\n\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (x = 0; x < width; x++) {\n      pixels[yi] = rSum * mulSum >> shgSum;\n      pixels[yi + 1] = gSum * mulSum >> shgSum;\n      pixels[yi + 2] = bSum * mulSum >> shgSum;\n      rSum -= rOutSum;\n      gSum -= gOutSum;\n      bSum -= bOutSum;\n      rOutSum -= stackIn.r;\n      gOutSum -= stackIn.g;\n      bOutSum -= stackIn.b;\n      p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;\n      rInSum += stackIn.r = pixels[p];\n      gInSum += stackIn.g = pixels[p + 1];\n      bInSum += stackIn.b = pixels[p + 2];\n      rSum += rInSum;\n      gSum += gInSum;\n      bSum += bInSum;\n      stackIn = stackIn.next;\n      rOutSum += pr = stackOut.r;\n      gOutSum += pg = stackOut.g;\n      bOutSum += pb = stackOut.b;\n      rInSum -= pr;\n      gInSum -= pg;\n      bInSum -= pb;\n      stackOut = stackOut.next;\n      yi += 4;\n    }\n\n    yw += width;\n  }\n\n  for (x = 0; x < width; x++) {\n    gInSum = bInSum = rInSum = gSum = bSum = rSum = 0;\n    yi = x << 2;\n    rOutSum = radiusPlus1 * (pr = pixels[yi]);\n    gOutSum = radiusPlus1 * (pg = pixels[yi + 1]);\n    bOutSum = radiusPlus1 * (pb = pixels[yi + 2]);\n    rSum += sumFactor * pr;\n    gSum += sumFactor * pg;\n    bSum += sumFactor * pb;\n    stack = stackStart;\n\n    for (i = 0; i < radiusPlus1; i++) {\n      stack.r = pr;\n      stack.g = pg;\n      stack.b = pb;\n      stack = stack.next;\n    }\n\n    yp = width;\n\n    for (i = 1; i <= radius; i++) {\n      yi = yp + x << 2;\n      rSum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);\n      gSum += (stack.g = pg = pixels[yi + 1]) * rbs;\n      bSum += (stack.b = pb = pixels[yi + 2]) * rbs;\n      rInSum += pr;\n      gInSum += pg;\n      bInSum += pb;\n      stack = stack.next;\n\n      if (i < heightMinus1) {\n        yp += width;\n      }\n    }\n\n    yi = x;\n    stackIn = stackStart;\n    stackOut = stackEnd;\n\n    for (y = 0; y < height; y++) {\n      p = yi << 2;\n      pixels[p] = rSum * mulSum >> shgSum;\n      pixels[p + 1] = gSum * mulSum >> shgSum;\n      pixels[p + 2] = bSum * mulSum >> shgSum;\n      rSum -= rOutSum;\n      gSum -= gOutSum;\n      bSum -= bOutSum;\n      rOutSum -= stackIn.r;\n      gOutSum -= stackIn.g;\n      bOutSum -= stackIn.b;\n      p = x + ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width << 2;\n      rSum += rInSum += stackIn.r = pixels[p];\n      gSum += gInSum += stackIn.g = pixels[p + 1];\n      bSum += bInSum += stackIn.b = pixels[p + 2];\n      stackIn = stackIn.next;\n      rOutSum += pr = stackOut.r;\n      gOutSum += pg = stackOut.g;\n      bOutSum += pb = stackOut.b;\n      rInSum -= pr;\n      gInSum -= pg;\n      bInSum -= pb;\n      stackOut = stackOut.next;\n      yi += width;\n    }\n  }\n\n  return imageData;\n}\n/**\n *\n */\n\n\nvar BlurStack = function BlurStack() {\n  _classCallCheck(this, BlurStack);\n\n  this.r = 0;\n  this.g = 0;\n  this.b = 0;\n  this.a = 0;\n  this.next = null;\n};\n\nexport { BlurStack, processImage as image, processCanvasRGBA as canvasRGBA, processCanvasRGB as canvasRGB, processImageDataRGBA as imageDataRGBA, processImageDataRGB as imageDataRGB };\n"],"sourceRoot":""}