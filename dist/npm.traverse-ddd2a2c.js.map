{"version":3,"sources":["webpack:///./node_modules/traverse/index.js"],"names":["traverse","module","exports","obj","Traverse","this","value","walk","root","cb","immutable","path","parents","alive","walker","node_","node","copy","modifiers","keepGoing","state","concat","parent","length","key","slice","isRoot","level","circular","update","x","stopHere","delete","remove","isArray","splice","keys","before","f","after","pre","post","stop","block","updateState","objectKeys","isLeaf","i","notLeaf","notRoot","ret","call","undefined","push","forEach","child","hasOwnProperty","isLast","isFirst","pop","src","dst","toS","Date","getTime","isRegExp","RegExp","isError","message","isBoolean","Boolean","isNumber","Number","isString","String","Object","create","getPrototypeOf","constructor","proto","prototype","__proto__","T","get","ps","has","set","map","reduce","init","skip","arguments","acc","paths","nodes","clone","res","toString","Array","xs","fn","args","t","apply"],"mappings":"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","file":"npm.traverse-ddd2a2c.js","sourcesContent":["var traverse = module.exports = function (obj) {\n    return new Traverse(obj);\n};\n\nfunction Traverse (obj) {\n    this.value = obj;\n}\n\nTraverse.prototype.get = function (ps) {\n    var node = this.value;\n    for (var i = 0; i < ps.length; i ++) {\n        var key = ps[i];\n        if (!node || !hasOwnProperty.call(node, key)) {\n            node = undefined;\n            break;\n        }\n        node = node[key];\n    }\n    return node;\n};\n\nTraverse.prototype.has = function (ps) {\n    var node = this.value;\n    for (var i = 0; i < ps.length; i ++) {\n        var key = ps[i];\n        if (!node || !hasOwnProperty.call(node, key)) {\n            return false;\n        }\n        node = node[key];\n    }\n    return true;\n};\n\nTraverse.prototype.set = function (ps, value) {\n    var node = this.value;\n    for (var i = 0; i < ps.length - 1; i ++) {\n        var key = ps[i];\n        if (!hasOwnProperty.call(node, key)) node[key] = {};\n        node = node[key];\n    }\n    node[ps[i]] = value;\n    return value;\n};\n\nTraverse.prototype.map = function (cb) {\n    return walk(this.value, cb, true);\n};\n\nTraverse.prototype.forEach = function (cb) {\n    this.value = walk(this.value, cb, false);\n    return this.value;\n};\n\nTraverse.prototype.reduce = function (cb, init) {\n    var skip = arguments.length === 1;\n    var acc = skip ? this.value : init;\n    this.forEach(function (x) {\n        if (!this.isRoot || !skip) {\n            acc = cb.call(this, acc, x);\n        }\n    });\n    return acc;\n};\n\nTraverse.prototype.paths = function () {\n    var acc = [];\n    this.forEach(function (x) {\n        acc.push(this.path); \n    });\n    return acc;\n};\n\nTraverse.prototype.nodes = function () {\n    var acc = [];\n    this.forEach(function (x) {\n        acc.push(this.node);\n    });\n    return acc;\n};\n\nTraverse.prototype.clone = function () {\n    var parents = [], nodes = [];\n    \n    return (function clone (src) {\n        for (var i = 0; i < parents.length; i++) {\n            if (parents[i] === src) {\n                return nodes[i];\n            }\n        }\n        \n        if (typeof src === 'object' && src !== null) {\n            var dst = copy(src);\n            \n            parents.push(src);\n            nodes.push(dst);\n            \n            forEach(objectKeys(src), function (key) {\n                dst[key] = clone(src[key]);\n            });\n            \n            parents.pop();\n            nodes.pop();\n            return dst;\n        }\n        else {\n            return src;\n        }\n    })(this.value);\n};\n\nfunction walk (root, cb, immutable) {\n    var path = [];\n    var parents = [];\n    var alive = true;\n    \n    return (function walker (node_) {\n        var node = immutable ? copy(node_) : node_;\n        var modifiers = {};\n        \n        var keepGoing = true;\n        \n        var state = {\n            node : node,\n            node_ : node_,\n            path : [].concat(path),\n            parent : parents[parents.length - 1],\n            parents : parents,\n            key : path.slice(-1)[0],\n            isRoot : path.length === 0,\n            level : path.length,\n            circular : null,\n            update : function (x, stopHere) {\n                if (!state.isRoot) {\n                    state.parent.node[state.key] = x;\n                }\n                state.node = x;\n                if (stopHere) keepGoing = false;\n            },\n            'delete' : function (stopHere) {\n                delete state.parent.node[state.key];\n                if (stopHere) keepGoing = false;\n            },\n            remove : function (stopHere) {\n                if (isArray(state.parent.node)) {\n                    state.parent.node.splice(state.key, 1);\n                }\n                else {\n                    delete state.parent.node[state.key];\n                }\n                if (stopHere) keepGoing = false;\n            },\n            keys : null,\n            before : function (f) { modifiers.before = f },\n            after : function (f) { modifiers.after = f },\n            pre : function (f) { modifiers.pre = f },\n            post : function (f) { modifiers.post = f },\n            stop : function () { alive = false },\n            block : function () { keepGoing = false }\n        };\n        \n        if (!alive) return state;\n        \n        function updateState() {\n            if (typeof state.node === 'object' && state.node !== null) {\n                if (!state.keys || state.node_ !== state.node) {\n                    state.keys = objectKeys(state.node)\n                }\n                \n                state.isLeaf = state.keys.length == 0;\n                \n                for (var i = 0; i < parents.length; i++) {\n                    if (parents[i].node_ === node_) {\n                        state.circular = parents[i];\n                        break;\n                    }\n                }\n            }\n            else {\n                state.isLeaf = true;\n                state.keys = null;\n            }\n            \n            state.notLeaf = !state.isLeaf;\n            state.notRoot = !state.isRoot;\n        }\n        \n        updateState();\n        \n        // use return values to update if defined\n        var ret = cb.call(state, state.node);\n        if (ret !== undefined && state.update) state.update(ret);\n        \n        if (modifiers.before) modifiers.before.call(state, state.node);\n        \n        if (!keepGoing) return state;\n        \n        if (typeof state.node == 'object'\n        && state.node !== null && !state.circular) {\n            parents.push(state);\n            \n            updateState();\n            \n            forEach(state.keys, function (key, i) {\n                path.push(key);\n                \n                if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);\n                \n                var child = walker(state.node[key]);\n                if (immutable && hasOwnProperty.call(state.node, key)) {\n                    state.node[key] = child.node;\n                }\n                \n                child.isLast = i == state.keys.length - 1;\n                child.isFirst = i == 0;\n                \n                if (modifiers.post) modifiers.post.call(state, child);\n                \n                path.pop();\n            });\n            parents.pop();\n        }\n        \n        if (modifiers.after) modifiers.after.call(state, state.node);\n        \n        return state;\n    })(root).node;\n}\n\nfunction copy (src) {\n    if (typeof src === 'object' && src !== null) {\n        var dst;\n        \n        if (isArray(src)) {\n            dst = [];\n        }\n        else if (isDate(src)) {\n            dst = new Date(src.getTime ? src.getTime() : src);\n        }\n        else if (isRegExp(src)) {\n            dst = new RegExp(src);\n        }\n        else if (isError(src)) {\n            dst = { message: src.message };\n        }\n        else if (isBoolean(src)) {\n            dst = new Boolean(src);\n        }\n        else if (isNumber(src)) {\n            dst = new Number(src);\n        }\n        else if (isString(src)) {\n            dst = new String(src);\n        }\n        else if (Object.create && Object.getPrototypeOf) {\n            dst = Object.create(Object.getPrototypeOf(src));\n        }\n        else if (src.constructor === Object) {\n            dst = {};\n        }\n        else {\n            var proto =\n                (src.constructor && src.constructor.prototype)\n                || src.__proto__\n                || {}\n            ;\n            var T = function () {};\n            T.prototype = proto;\n            dst = new T;\n        }\n        \n        forEach(objectKeys(src), function (key) {\n            dst[key] = src[key];\n        });\n        return dst;\n    }\n    else return src;\n}\n\nvar objectKeys = Object.keys || function keys (obj) {\n    var res = [];\n    for (var key in obj) res.push(key)\n    return res;\n};\n\nfunction toS (obj) { return Object.prototype.toString.call(obj) }\nfunction isDate (obj) { return toS(obj) === '[object Date]' }\nfunction isRegExp (obj) { return toS(obj) === '[object RegExp]' }\nfunction isError (obj) { return toS(obj) === '[object Error]' }\nfunction isBoolean (obj) { return toS(obj) === '[object Boolean]' }\nfunction isNumber (obj) { return toS(obj) === '[object Number]' }\nfunction isString (obj) { return toS(obj) === '[object String]' }\n\nvar isArray = Array.isArray || function isArray (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nvar forEach = function (xs, fn) {\n    if (xs.forEach) return xs.forEach(fn)\n    else for (var i = 0; i < xs.length; i++) {\n        fn(xs[i], i, xs);\n    }\n};\n\nforEach(objectKeys(Traverse.prototype), function (key) {\n    traverse[key] = function (obj) {\n        var args = [].slice.call(arguments, 1);\n        var t = new Traverse(obj);\n        return t[key].apply(t, args);\n    };\n});\n\nvar hasOwnProperty = Object.hasOwnProperty || function (obj, key) {\n    return key in obj;\n};\n"],"sourceRoot":""}