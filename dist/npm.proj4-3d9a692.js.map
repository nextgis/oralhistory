{"version":3,"sources":["webpack:///./node_modules/proj4/lib/global.js","webpack:///./node_modules/proj4/lib/constants/values.js","webpack:///./node_modules/proj4/lib/constants/PrimeMeridian.js","webpack:///./node_modules/proj4/lib/constants/units.js","webpack:///./node_modules/proj4/lib/match.js","webpack:///./node_modules/proj4/lib/projString.js","webpack:///./node_modules/proj4/lib/defs.js","webpack:///./node_modules/proj4/lib/parseCode.js","webpack:///./node_modules/proj4/lib/extend.js","webpack:///./node_modules/proj4/lib/common/msfnz.js","webpack:///./node_modules/proj4/lib/common/sign.js","webpack:///./node_modules/proj4/lib/common/adjust_lon.js","webpack:///./node_modules/proj4/lib/common/tsfnz.js","webpack:///./node_modules/proj4/lib/common/phi2z.js","webpack:///./node_modules/proj4/lib/projections/longlat.js","webpack:///./node_modules/proj4/lib/projections.js","webpack:///./node_modules/proj4/lib/projections/merc.js","webpack:///./node_modules/proj4/lib/constants/Ellipsoid.js","webpack:///./node_modules/proj4/lib/constants/Datum.js","webpack:///./node_modules/proj4/lib/datum.js","webpack:///./node_modules/proj4/lib/Proj.js","webpack:///./node_modules/proj4/lib/deriveConstants.js","webpack:///./node_modules/proj4/lib/datum_transform.js","webpack:///./node_modules/proj4/lib/datumUtils.js","webpack:///./node_modules/proj4/lib/adjust_axis.js","webpack:///./node_modules/proj4/lib/common/toPoint.js","webpack:///./node_modules/proj4/lib/checkSanity.js","webpack:///./node_modules/proj4/lib/transform.js","webpack:///./node_modules/proj4/lib/core.js","webpack:///./node_modules/proj4/lib/Point.js","webpack:///./node_modules/proj4/lib/common/pj_enfn.js","webpack:///./node_modules/proj4/lib/common/pj_mlfn.js","webpack:///./node_modules/proj4/lib/common/pj_inv_mlfn.js","webpack:///./node_modules/proj4/lib/projections/tmerc.js","webpack:///./node_modules/proj4/lib/common/sinh.js","webpack:///./node_modules/proj4/lib/common/hypot.js","webpack:///./node_modules/proj4/lib/common/asinhy.js","webpack:///./node_modules/proj4/lib/common/log1py.js","webpack:///./node_modules/proj4/lib/common/gatg.js","webpack:///./node_modules/proj4/lib/common/clens.js","webpack:///./node_modules/proj4/lib/common/clens_cmplx.js","webpack:///./node_modules/proj4/lib/common/cosh.js","webpack:///./node_modules/proj4/lib/projections/etmerc.js","webpack:///./node_modules/proj4/lib/common/adjust_zone.js","webpack:///./node_modules/proj4/lib/projections/utm.js","webpack:///./node_modules/proj4/lib/common/srat.js","webpack:///./node_modules/proj4/lib/projections/gauss.js","webpack:///./node_modules/proj4/lib/projections/sterea.js","webpack:///./node_modules/proj4/lib/projections/stere.js","webpack:///./node_modules/proj4/lib/projections/somerc.js","webpack:///./node_modules/proj4/lib/projections/omerc.js","webpack:///./node_modules/proj4/lib/projections/lcc.js","webpack:///./node_modules/proj4/lib/projections/krovak.js","webpack:///./node_modules/proj4/lib/common/mlfn.js","webpack:///./node_modules/proj4/lib/common/e0fn.js","webpack:///./node_modules/proj4/lib/common/e1fn.js","webpack:///./node_modules/proj4/lib/common/e2fn.js","webpack:///./node_modules/proj4/lib/common/e3fn.js","webpack:///./node_modules/proj4/lib/common/gN.js","webpack:///./node_modules/proj4/lib/common/adjust_lat.js","webpack:///./node_modules/proj4/lib/common/imlfn.js","webpack:///./node_modules/proj4/lib/projections/cass.js","webpack:///./node_modules/proj4/lib/common/qsfnz.js","webpack:///./node_modules/proj4/lib/projections/laea.js","webpack:///./node_modules/proj4/lib/common/asinz.js","webpack:///./node_modules/proj4/lib/projections/aea.js","webpack:///./node_modules/proj4/lib/projections/gnom.js","webpack:///./node_modules/proj4/lib/common/iqsfnz.js","webpack:///./node_modules/proj4/lib/projections/cea.js","webpack:///./node_modules/proj4/lib/projections/eqc.js","webpack:///./node_modules/proj4/lib/projections/poly.js","webpack:///./node_modules/proj4/lib/projections/nzmg.js","webpack:///./node_modules/proj4/lib/projections/mill.js","webpack:///./node_modules/proj4/lib/projections/sinu.js","webpack:///./node_modules/proj4/lib/projections/moll.js","webpack:///./node_modules/proj4/lib/projections/eqdc.js","webpack:///./node_modules/proj4/lib/projections/vandg.js","webpack:///./node_modules/proj4/lib/projections/aeqd.js","webpack:///./node_modules/proj4/lib/projections/ortho.js","webpack:///./node_modules/proj4/lib/projections/qsc.js","webpack:///./node_modules/proj4/lib/projections/robin.js","webpack:///./node_modules/proj4/projs.js","webpack:///./node_modules/proj4/lib/index.js"],"names":["PJD_3PARAM","PJD_7PARAM","PJD_WGS84","PJD_NODATUM","SEC_TO_RAD","HALF_PI","Math","PI","SIXTH","RA4","RA6","EPSLN","D2R","R2D","FORTPI","TWO_PI","SPI","PrimeMeridian_exports","greenwich","lisbon","paris","bogota","madrid","rome","bern","jakarta","ferro","brussels","stockholm","athens","oslo","units","ft","to_meter","us-ft","ignoredChar","match","obj","key","testkey","keys","Object","lkey","toLowerCase","replace","i","length","projString","defData","paramName","paramVal","paramOutname","self","paramObj","split","map","v","trim","filter","a","reduce","p","push","params","proj","datum","rf","parseFloat","lat_0","lat0","lat_1","lat1","lat_2","lat2","lat_ts","lon_0","long0","lon_1","long1","lon_2","long2","alpha","lonc","longc","x_0","x0","y_0","y0","k_0","k0","k","b","r_a","R_A","zone","parseInt","south","utmSouth","towgs84","datum_params","unit","from_greenwich","pm","nadgrids","datumCode","axis","indexOf","substr","defs","name","that","this","arguments","def","charAt","wkt_parser","Array","isArray","apply","EPSG","ESRI","IAU2000","console","log","WGS84","GOOGLE","global","lib_defs","codeWords","codes","parseCode","code","testObj","testDef","some","word","testWKT","out","item","auth","checkMercator","maybeProjStr","ext","checkProjStr","testProj","extend","destination","source","value","property","undefined","msfnz","eccent","sinphi","cosphi","con","sqrt","sign","x","adjust_lon","abs","tsfnz","phi","com","pow","tan","phi2z","ts","dphi","eccnth","atan","sin","identity","pt","projs","init","es","e","sphere","cos","forward","y","lon","lat","inverse","exp","names","projections_names","projStore","add","len","forEach","n","projections","start","get","Ellipsoid_exports","MERIT","ellipseName","SGS85","GRS80","IAU76","airy","APL4","NWL9D","mod_airy","andrae","aust_SA","GRS67","bessel","bess_nam","clrk66","clrk80","clrk58","CPM","delmbr","engelis","evrst30","evrst48","evrst56","evrst69","evrstSS","fschr60","fschr60m","fschr68","helmert","hough","intl","kaula","lerch","mprts","new_intl","plessis","krass","SEasia","walbeck","WGS60","WGS66","WGS7","Datum_exports","wgs84","ellipse","datumName","ch1903","ggrs87","nad83","nad27","potsdam","carthage","hermannskogel","osni52","ire65","rassadiran","nzgd49","osgb36","s_jtsk","beduaram","gunung_segara","rnb72","lib_datum","ep2","datum_type","Projection","srsCode","callback","error","json","ourProj","projName","datumDef","ellps","a2","b2","sphere_","deriveConstants_sphere","ecc","datumObj","Proj","checkParams","type","datum_transform","dest","point","compareDatums","Rn","Sin_Lat","Sin2_Lat","Cos_Lat","Longitude","Latitude","Height","z","Infinity","geodeticToGeocentric","Dx_BF","Dy_BF","Dz_BF","Rx_BF","Ry_BF","Rz_BF","M_BF","geocentricToWgs84","x_tmp","y_tmp","z_tmp","geocentricFromWgs84","P","RR","CT","ST","RX","RK","RN","CPHI0","SPHI0","CPHI","SPHI","SDPHI","iter","X","Y","Z","atan2","geocentricToGeodetic","adjust_axis","crs","denorm","t","xin","yin","zin","toPoint","array","m","checkSanity","checkCoord","num","Number","isFinite","TypeError","transform","checkNotWGS","core_wgs84","transformer","from","to","coords","transformedArray","checkProj","oProj","core","fromProj","toProj","coord","single","Point","warn","fromMGRS","mgrsStr","mgrs","prototype","toMGRS","accuracy","lib_Point","C08","pj_enfn","en","pj_mlfn","sphi","cphi","pj_inv_mlfn","arg","s","tmerc","ml0","delta_lon","sin_phi","cos_phi","al","als","c","cs","tq","ml","acos","tan_phi","d","ds","f","g","temp","h","asin","sinh","r","hypot","max","min","asinhy","log1py","gatg","pp","B","cos_2B","h1","h2","clens","arg_r","hr","hr1","hr2","clens_cmplx","arg_i","hi2","sin_arg_r","cos_arg_r","sinh_arg_i","cosh_arg_i","cosh","j","hi1","hi","etmerc","Error","cgb","cbg","utg","gtu","np","Qn","Zb","Ce","Cn","sin_Cn","cos_Cn","sin_Ce","cos_Ce","tmp","adjust_zone","floor","utm","dependsOn","srat","esinp","gauss_MAX_ITER","gauss","rc","C","phic0","ratexp","K","sterea","sinc0","cosc0","R2","title","sinc","cosc","cosl","rho","stere","coslat0","sinlat0","isNaN","cons","ms1","X0","ssfn_","cosX0","sinX0","A","sinX","cosX","rh","sinlat","coslat","dlon","NaN","ce","Chi","phit","eccen","somerc","phy0","lambda0","sinPhy0","semiMajorAxis","flattening","e2","R","b0","k1","k2","k3","Sa1","Sa2","S","I","rotI","rotB","lambda","phy","prevPhy","iteration","omerc","no_off","no_rot","bl","fl","gl","t0","dl","t1","t2","el","hl","ll","jl","pl","dlon12","dlon10","gamma0","uc","us","vs","ql","sl","tl","vl","ul","POSITIVE_INFINITY","qp","sp","tp","vp","up","lcc","sin1","cos1","ts1","sin2","cos2","ms2","ts2","ts0","ns","f0","rh1","theta","krovak","s45","s90","fi0","alfa","uq","u0","n0","s0","ro0","ad","gfi","u","deltav","eps","ro","czech","fi1","ok","mlfn","e0","e1","e3","e0fn","e1fn","e2fn","e3fn","gN","adjust_lat","imlfn","cass","lam","nl","asq","cl","dd","ml1","phi1","nl1","rl1","tl1","dsq","qsfnz","P00","P01","P02","P10","P11","P20","laea","mode","S_POLE","N_POLE","EQUIT","OBLIQ","mmf","apa","APA","authset","rq","xmf","ymf","sinb1","cosb1","sinph0","cosph0","coslam","sinlam","q","sinb","cosb","phi0","cCe","sCe","ab","beta","cosz","sinz","asinz","aea","sin_po","cos_po","qs1","qs2","t3","qs0","ns0","qs","phi1z","eccnts","gnom","sin_p14","cos_p14","infinity_dist","coslon","iqsfnz","cea","eqc","dlat","poly_MAX_ITER","poly","tanphi","mln","mlnp","ma","nzmg","B_re","B_im","C_re","C_im","D","delta_lat","d_phi","d_lambda","d_phi_n","d_psi","th_n_im1","th_re","th_im","th_n_re","th_n_im","z_re","z_im","z_n_im1","delta_x","z_n_re","z_n_im","iterations","num_re","num_im","den_re","den_im","den2","d_psi_n","mill","sinu_MAX_ITER","sinu","C_y","C_x","V","moll","delta_theta","eqdc","ml2","vandg","sinth","costh","gsq","msq","xx","yy","xys","c1","c2","c3","a1","m1","th1","aeqd","sin_p12","cos_p12","Mlp","Ml","Nl1","Nl","psi","Az","G","H","GH","Hs","kp","cos_c","s2","s3","s4","N1","cosAz","Ee","F","ortho","FACE_ENUM","FRONT","RIGHT","BACK","LEFT","TOP","BOTTOM","AREA_ENUM","AREA_0","AREA_1","AREA_2","AREA_3","qsc_fwd_equat_face_theta","area","qsc_shift_lon_origin","offset","slon","qsc","face","one_minus_f","one_minus_f_squared","mu","xy","sinlon","nu","cosmu","tannu","tantheta","invert_sign","xa","lp","COEFS_X","COEFS_Y","FXC","FYC","C1","RC1","NODES","poly3_val","coefs","poly3_der","proj4","robin","f_df","max_err","iters","upd","newton_rapshon","defaultDatum","version","proj4_package","__webpack_exports__"],"mappings":"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","file":"npm.proj4-3d9a692.js","sourcesContent":["export default function(defs) {\n  defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\n  defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\n  defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\n\n  defs.WGS84 = defs['EPSG:4326'];\n  defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\n  defs.GOOGLE = defs['EPSG:3857'];\n  defs['EPSG:900913'] = defs['EPSG:3857'];\n  defs['EPSG:102113'] = defs['EPSG:3857'];\n}\n","export var PJD_3PARAM = 1;\nexport var PJD_7PARAM = 2;\nexport var PJD_WGS84 = 4; // WGS84 or equivalent\nexport var PJD_NODATUM = 5; // WGS84 or equivalent\nexport var SEC_TO_RAD = 4.84813681109535993589914102357e-6;\nexport var HALF_PI = Math.PI/2;\n// ellipoid pj_set_ell.c\nexport var SIXTH = 0.1666666666666666667;\n/* 1/6 */\nexport var RA4 = 0.04722222222222222222;\n/* 17/360 */\nexport var RA6 = 0.02215608465608465608;\nexport var EPSLN = 1.0e-10;\n// you'd think you could use Number.EPSILON above but that makes\n// Mollweide get into an infinate loop.\n\nexport var D2R = 0.01745329251994329577;\nexport var R2D = 57.29577951308232088;\nexport var FORTPI = Math.PI/4;\nexport var TWO_PI = Math.PI * 2;\n// SPI is slightly greater than Math.PI, so values that exceed the -180..180\n// degree range by a tiny amount don't get wrapped. This prevents points that\n// have drifted from their original location along the 180th meridian (due to\n// floating point error) from changing their sign.\nexport var SPI = 3.14159265359;\n","var exports = {};\nexport {exports as default};\n\nexports.greenwich = 0.0; //\"0dE\",\nexports.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\nexports.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\nexports.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\nexports.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\nexports.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\nexports.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\nexports.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\nexports.ferro = -17.666666666667; //\"17d40'W\",\nexports.brussels = 4.367975; //\"4d22'4.71\\\"E\",\nexports.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\nexports.athens = 23.7163375; //\"23d42'58.815\\\"E\",\nexports.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"\n","export default {\n  ft: {to_meter: 0.3048},\n  'us-ft': {to_meter: 1200 / 3937}\n};\n","var ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\nexport default function match(obj, key) {\n  if (obj[key]) {\n    return obj[key];\n  }\n  var keys = Object.keys(obj);\n  var lkey = key.toLowerCase().replace(ignoredChar, '');\n  var i = -1;\n  var testkey, processedKey;\n  while (++i < keys.length) {\n    testkey = keys[i];\n    processedKey = testkey.toLowerCase().replace(ignoredChar, '');\n    if (processedKey === lkey) {\n      return obj[testkey];\n    }\n  }\n}\n","import {D2R} from './constants/values';\nimport PrimeMeridian from './constants/PrimeMeridian';\nimport units from './constants/units';\nimport match from './match';\n\nexport default function(defData) {\n  var self = {};\n  var paramObj = defData.split('+').map(function(v) {\n    return v.trim();\n  }).filter(function(a) {\n    return a;\n  }).reduce(function(p, a) {\n    var split = a.split('=');\n    split.push(true);\n    p[split[0].toLowerCase()] = split[1];\n    return p;\n  }, {});\n  var paramName, paramVal, paramOutname;\n  var params = {\n    proj: 'projName',\n    datum: 'datumCode',\n    rf: function(v) {\n      self.rf = parseFloat(v);\n    },\n    lat_0: function(v) {\n      self.lat0 = v * D2R;\n    },\n    lat_1: function(v) {\n      self.lat1 = v * D2R;\n    },\n    lat_2: function(v) {\n      self.lat2 = v * D2R;\n    },\n    lat_ts: function(v) {\n      self.lat_ts = v * D2R;\n    },\n    lon_0: function(v) {\n      self.long0 = v * D2R;\n    },\n    lon_1: function(v) {\n      self.long1 = v * D2R;\n    },\n    lon_2: function(v) {\n      self.long2 = v * D2R;\n    },\n    alpha: function(v) {\n      self.alpha = parseFloat(v) * D2R;\n    },\n    lonc: function(v) {\n      self.longc = v * D2R;\n    },\n    x_0: function(v) {\n      self.x0 = parseFloat(v);\n    },\n    y_0: function(v) {\n      self.y0 = parseFloat(v);\n    },\n    k_0: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    k: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    a: function(v) {\n      self.a = parseFloat(v);\n    },\n    b: function(v) {\n      self.b = parseFloat(v);\n    },\n    r_a: function() {\n      self.R_A = true;\n    },\n    zone: function(v) {\n      self.zone = parseInt(v, 10);\n    },\n    south: function() {\n      self.utmSouth = true;\n    },\n    towgs84: function(v) {\n      self.datum_params = v.split(\",\").map(function(a) {\n        return parseFloat(a);\n      });\n    },\n    to_meter: function(v) {\n      self.to_meter = parseFloat(v);\n    },\n    units: function(v) {\n      self.units = v;\n      var unit = match(units, v);\n      if (unit) {\n        self.to_meter = unit.to_meter;\n      }\n    },\n    from_greenwich: function(v) {\n      self.from_greenwich = v * D2R;\n    },\n    pm: function(v) {\n      var pm = match(PrimeMeridian, v);\n      self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\n    },\n    nadgrids: function(v) {\n      if (v === '@null') {\n        self.datumCode = 'none';\n      }\n      else {\n        self.nadgrids = v;\n      }\n    },\n    axis: function(v) {\n      var legalAxis = \"ewnsud\";\n      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n        self.axis = v;\n      }\n    }\n  };\n  for (paramName in paramObj) {\n    paramVal = paramObj[paramName];\n    if (paramName in params) {\n      paramOutname = params[paramName];\n      if (typeof paramOutname === 'function') {\n        paramOutname(paramVal);\n      }\n      else {\n        self[paramOutname] = paramVal;\n      }\n    }\n    else {\n      self[paramName] = paramVal;\n    }\n  }\n  if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\n    self.datumCode = self.datumCode.toLowerCase();\n  }\n  return self;\n}\n","import globals from './global';\nimport parseProj from './projString';\nimport wkt from 'wkt-parser';\n\nfunction defs(name) {\n  /*global console*/\n  var that = this;\n  if (arguments.length === 2) {\n    var def = arguments[1];\n    if (typeof def === 'string') {\n      if (def.charAt(0) === '+') {\n        defs[name] = parseProj(arguments[1]);\n      }\n      else {\n        defs[name] = wkt(arguments[1]);\n      }\n    } else {\n      defs[name] = def;\n    }\n  }\n  else if (arguments.length === 1) {\n    if (Array.isArray(name)) {\n      return name.map(function(v) {\n        if (Array.isArray(v)) {\n          defs.apply(that, v);\n        }\n        else {\n          defs(v);\n        }\n      });\n    }\n    else if (typeof name === 'string') {\n      if (name in defs) {\n        return defs[name];\n      }\n    }\n    else if ('EPSG' in name) {\n      defs['EPSG:' + name.EPSG] = name;\n    }\n    else if ('ESRI' in name) {\n      defs['ESRI:' + name.ESRI] = name;\n    }\n    else if ('IAU2000' in name) {\n      defs['IAU2000:' + name.IAU2000] = name;\n    }\n    else {\n      console.log(name);\n    }\n    return;\n  }\n\n\n}\nglobals(defs);\nexport default defs;\n","import defs from './defs';\nimport wkt from 'wkt-parser';\nimport projStr from './projString';\nimport match from './match';\nfunction testObj(code){\n  return typeof code === 'string';\n}\nfunction testDef(code){\n  return code in defs;\n}\n var codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];\nfunction testWKT(code){\n  return codeWords.some(function (word) {\n    return code.indexOf(word) > -1;\n  });\n}\nvar codes = ['3857', '900913', '3785', '102113'];\nfunction checkMercator(item) {\n  var auth = match(item, 'authority');\n  if (!auth) {\n    return;\n  }\n  var code = match(auth, 'epsg');\n  return code && codes.indexOf(code) > -1;\n}\nfunction checkProjStr(item) {\n  var ext = match(item, 'extension');\n  if (!ext) {\n    return;\n  }\n  return match(ext, 'proj4');\n}\nfunction testProj(code){\n  return code[0] === '+';\n}\nfunction parse(code){\n  if (testObj(code)) {\n    //check to see if this is a WKT string\n    if (testDef(code)) {\n      return defs[code];\n    }\n    if (testWKT(code)) {\n      var out = wkt(code);\n      // test of spetial case, due to this being a very common and often malformed\n      if (checkMercator(out)) {\n        return defs['EPSG:3857'];\n      }\n      var maybeProjStr = checkProjStr(out);\n      if (maybeProjStr) {\n        return projStr(maybeProjStr);\n      }\n      return out;\n    }\n    if (testProj(code)) {\n      return projStr(code);\n    }\n  }else{\n    return code;\n  }\n}\n\nexport default parse;\n","export default function(destination, source) {\n  destination = destination || {};\n  var value, property;\n  if (!source) {\n    return destination;\n  }\n  for (property in source) {\n    value = source[property];\n    if (value !== undefined) {\n      destination[property] = value;\n    }\n  }\n  return destination;\n}\n","export default function(eccent, sinphi, cosphi) {\n  var con = eccent * sinphi;\n  return cosphi / (Math.sqrt(1 - con * con));\n}","export default function(x) {\n  return x<0 ? -1 : 1;\n}","\nimport {TWO_PI, SPI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, phi, sinphi) {\n  var con = eccent * sinphi;\n  var com = 0.5 * eccent;\n  con = Math.pow(((1 - con) / (1 + con)), com);\n  return (Math.tan(0.5 * (HALF_PI - phi)) / con);\n}\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, ts) {\n  var eccnth = 0.5 * eccent;\n  var con, dphi;\n  var phi = HALF_PI - 2 * Math.atan(ts);\n  for (var i = 0; i <= 15; i++) {\n    con = eccent * Math.sin(phi);\n    dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n  //console.log(\"phi2z has NoConvergence\");\n  return -9999;\n}\n","export function init() {\n  //no-op for longlat\n}\n\nfunction identity(pt) {\n  return pt;\n}\nexport {identity as forward};\nexport {identity as inverse};\nexport var names = [\"longlat\", \"identity\"];\nexport default {\n  init: init,\n  forward: identity,\n  inverse: identity,\n  names: names\n};\n","import merc from \"./projections/merc\";\nimport longlat from \"./projections/longlat\";\nvar projs = [merc, longlat];\nvar names = {};\nvar projStore = [];\n\nfunction add(proj, i) {\n  var len = projStore.length;\n  if (!proj.names) {\n    console.log(i);\n    return true;\n  }\n  projStore[len] = proj;\n  proj.names.forEach(function(n) {\n    names[n.toLowerCase()] = len;\n  });\n  return this;\n}\n\nexport {add};\n\nexport function get(name) {\n  if (!name) {\n    return false;\n  }\n  var n = name.toLowerCase();\n  if (typeof names[n] !== 'undefined' && projStore[names[n]]) {\n    return projStore[names[n]];\n  }\n}\n\nexport function start() {\n  projs.forEach(add);\n}\nexport default {\n  start: start,\n  add: add,\n  get: get\n};\n","import msfnz from '../common/msfnz';\n\nimport adjust_lon from '../common/adjust_lon';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport {FORTPI, R2D, EPSLN, HALF_PI} from '../constants/values';\nexport function init() {\n  var con = this.b / this.a;\n  this.es = 1 - con * con;\n  if(!('x0' in this)){\n    this.x0 = 0;\n  }\n  if(!('y0' in this)){\n    this.y0 = 0;\n  }\n  this.e = Math.sqrt(this.es);\n  if (this.lat_ts) {\n    if (this.sphere) {\n      this.k0 = Math.cos(this.lat_ts);\n    }\n    else {\n      this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n    }\n  }\n  else {\n    if (!this.k0) {\n      if (this.k) {\n        this.k0 = this.k;\n      }\n      else {\n        this.k0 = 1;\n      }\n    }\n  }\n}\n\n/* Mercator forward equations--mapping lat,long to x,y\n  --------------------------------------------------*/\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  // convert to radians\n  if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\n    return null;\n  }\n\n  var x, y;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    return null;\n  }\n  else {\n    if (this.sphere) {\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\n    }\n    else {\n      var sinphi = Math.sin(lat);\n      var ts = tsfnz(this.e, lat, sinphi);\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 - this.a * this.k0 * Math.log(ts);\n    }\n    p.x = x;\n    p.y = y;\n    return p;\n  }\n}\n\n/* Mercator inverse equations--mapping x,y to lat/long\n  --------------------------------------------------*/\nexport function inverse(p) {\n\n  var x = p.x - this.x0;\n  var y = p.y - this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\n  }\n  else {\n    var ts = Math.exp(-y / (this.a * this.k0));\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  lon = adjust_lon(this.long0 + x / (this.a * this.k0));\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","var exports = {};\nexport {exports as default};\nexports.MERIT = {\n  a: 6378137.0,\n  rf: 298.257,\n  ellipseName: \"MERIT 1983\"\n};\n\nexports.SGS85 = {\n  a: 6378136.0,\n  rf: 298.257,\n  ellipseName: \"Soviet Geodetic System 85\"\n};\n\nexports.GRS80 = {\n  a: 6378137.0,\n  rf: 298.257222101,\n  ellipseName: \"GRS 1980(IUGG, 1980)\"\n};\n\nexports.IAU76 = {\n  a: 6378140.0,\n  rf: 298.257,\n  ellipseName: \"IAU 1976\"\n};\n\nexports.airy = {\n  a: 6377563.396,\n  b: 6356256.910,\n  ellipseName: \"Airy 1830\"\n};\n\nexports.APL4 = {\n  a: 6378137,\n  rf: 298.25,\n  ellipseName: \"Appl. Physics. 1965\"\n};\n\nexports.NWL9D = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"Naval Weapons Lab., 1965\"\n};\n\nexports.mod_airy = {\n  a: 6377340.189,\n  b: 6356034.446,\n  ellipseName: \"Modified Airy\"\n};\n\nexports.andrae = {\n  a: 6377104.43,\n  rf: 300.0,\n  ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n};\n\nexports.aust_SA = {\n  a: 6378160.0,\n  rf: 298.25,\n  ellipseName: \"Australian Natl & S. Amer. 1969\"\n};\n\nexports.GRS67 = {\n  a: 6378160.0,\n  rf: 298.2471674270,\n  ellipseName: \"GRS 67(IUGG 1967)\"\n};\n\nexports.bessel = {\n  a: 6377397.155,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841\"\n};\n\nexports.bess_nam = {\n  a: 6377483.865,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841 (Namibia)\"\n};\n\nexports.clrk66 = {\n  a: 6378206.4,\n  b: 6356583.8,\n  ellipseName: \"Clarke 1866\"\n};\n\nexports.clrk80 = {\n  a: 6378249.145,\n  rf: 293.4663,\n  ellipseName: \"Clarke 1880 mod.\"\n};\n\nexports.clrk58 = {\n  a: 6378293.645208759,\n  rf: 294.2606763692654,\n  ellipseName: \"Clarke 1858\"\n};\n\nexports.CPM = {\n  a: 6375738.7,\n  rf: 334.29,\n  ellipseName: \"Comm. des Poids et Mesures 1799\"\n};\n\nexports.delmbr = {\n  a: 6376428.0,\n  rf: 311.5,\n  ellipseName: \"Delambre 1810 (Belgium)\"\n};\n\nexports.engelis = {\n  a: 6378136.05,\n  rf: 298.2566,\n  ellipseName: \"Engelis 1985\"\n};\n\nexports.evrst30 = {\n  a: 6377276.345,\n  rf: 300.8017,\n  ellipseName: \"Everest 1830\"\n};\n\nexports.evrst48 = {\n  a: 6377304.063,\n  rf: 300.8017,\n  ellipseName: \"Everest 1948\"\n};\n\nexports.evrst56 = {\n  a: 6377301.243,\n  rf: 300.8017,\n  ellipseName: \"Everest 1956\"\n};\n\nexports.evrst69 = {\n  a: 6377295.664,\n  rf: 300.8017,\n  ellipseName: \"Everest 1969\"\n};\n\nexports.evrstSS = {\n  a: 6377298.556,\n  rf: 300.8017,\n  ellipseName: \"Everest (Sabah & Sarawak)\"\n};\n\nexports.fschr60 = {\n  a: 6378166.0,\n  rf: 298.3,\n  ellipseName: \"Fischer (Mercury Datum) 1960\"\n};\n\nexports.fschr60m = {\n  a: 6378155.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1960\"\n};\n\nexports.fschr68 = {\n  a: 6378150.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1968\"\n};\n\nexports.helmert = {\n  a: 6378200.0,\n  rf: 298.3,\n  ellipseName: \"Helmert 1906\"\n};\n\nexports.hough = {\n  a: 6378270.0,\n  rf: 297.0,\n  ellipseName: \"Hough\"\n};\n\nexports.intl = {\n  a: 6378388.0,\n  rf: 297.0,\n  ellipseName: \"International 1909 (Hayford)\"\n};\n\nexports.kaula = {\n  a: 6378163.0,\n  rf: 298.24,\n  ellipseName: \"Kaula 1961\"\n};\n\nexports.lerch = {\n  a: 6378139.0,\n  rf: 298.257,\n  ellipseName: \"Lerch 1979\"\n};\n\nexports.mprts = {\n  a: 6397300.0,\n  rf: 191.0,\n  ellipseName: \"Maupertius 1738\"\n};\n\nexports.new_intl = {\n  a: 6378157.5,\n  b: 6356772.2,\n  ellipseName: \"New International 1967\"\n};\n\nexports.plessis = {\n  a: 6376523.0,\n  rf: 6355863.0,\n  ellipseName: \"Plessis 1817 (France)\"\n};\n\nexports.krass = {\n  a: 6378245.0,\n  rf: 298.3,\n  ellipseName: \"Krassovsky, 1942\"\n};\n\nexports.SEasia = {\n  a: 6378155.0,\n  b: 6356773.3205,\n  ellipseName: \"Southeast Asia\"\n};\n\nexports.walbeck = {\n  a: 6376896.0,\n  b: 6355834.8467,\n  ellipseName: \"Walbeck\"\n};\n\nexports.WGS60 = {\n  a: 6378165.0,\n  rf: 298.3,\n  ellipseName: \"WGS 60\"\n};\n\nexports.WGS66 = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"WGS 66\"\n};\n\nexports.WGS7 = {\n  a: 6378135.0,\n  rf: 298.26,\n  ellipseName: \"WGS 72\"\n};\n\nexport var WGS84 = exports.WGS84 = {\n  a: 6378137.0,\n  rf: 298.257223563,\n  ellipseName: \"WGS 84\"\n};\n\nexports.sphere = {\n  a: 6370997.0,\n  b: 6370997.0,\n  ellipseName: \"Normal Sphere (r=6370997)\"\n};\n","var exports = {};\nexport {exports as default};\nexports.wgs84 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"WGS84\",\n  datumName: \"WGS84\"\n};\n\nexports.ch1903 = {\n  towgs84: \"674.374,15.056,405.346\",\n  ellipse: \"bessel\",\n  datumName: \"swiss\"\n};\n\nexports.ggrs87 = {\n  towgs84: \"-199.87,74.79,246.62\",\n  ellipse: \"GRS80\",\n  datumName: \"Greek_Geodetic_Reference_System_1987\"\n};\n\nexports.nad83 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"GRS80\",\n  datumName: \"North_American_Datum_1983\"\n};\n\nexports.nad27 = {\n  nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n  ellipse: \"clrk66\",\n  datumName: \"North_American_Datum_1927\"\n};\n\nexports.potsdam = {\n  towgs84: \"606.0,23.0,413.0\",\n  ellipse: \"bessel\",\n  datumName: \"Potsdam Rauenberg 1950 DHDN\"\n};\n\nexports.carthage = {\n  towgs84: \"-263.0,6.0,431.0\",\n  ellipse: \"clark80\",\n  datumName: \"Carthage 1934 Tunisia\"\n};\n\nexports.hermannskogel = {\n  towgs84: \"653.0,-212.0,449.0\",\n  ellipse: \"bessel\",\n  datumName: \"Hermannskogel\"\n};\n\nexports.osni52 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"airy\",\n  datumName: \"Irish National\"\n};\n\nexports.ire65 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"mod_airy\",\n  datumName: \"Ireland 1965\"\n};\n\nexports.rassadiran = {\n  towgs84: \"-133.63,-157.5,-158.62\",\n  ellipse: \"intl\",\n  datumName: \"Rassadiran\"\n};\n\nexports.nzgd49 = {\n  towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n  ellipse: \"intl\",\n  datumName: \"New Zealand Geodetic Datum 1949\"\n};\n\nexports.osgb36 = {\n  towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n  ellipse: \"airy\",\n  datumName: \"Airy 1830\"\n};\n\nexports.s_jtsk = {\n  towgs84: \"589,76,480\",\n  ellipse: 'bessel',\n  datumName: 'S-JTSK (Ferro)'\n};\n\nexports.beduaram = {\n  towgs84: '-106,-87,188',\n  ellipse: 'clrk80',\n  datumName: 'Beduaram'\n};\n\nexports.gunung_segara = {\n  towgs84: '-403,684,41',\n  ellipse: 'bessel',\n  datumName: 'Gunung Segara Jakarta'\n};\n\nexports.rnb72 = {\n  towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n  ellipse: \"intl\",\n  datumName: \"Reseau National Belge 1972\"\n};\n","import {PJD_3PARAM, PJD_7PARAM, PJD_WGS84, PJD_NODATUM, SEC_TO_RAD} from './constants/values';\n\nfunction datum(datumCode, datum_params, a, b, es, ep2) {\n  var out = {};\n\n  if (datumCode === undefined || datumCode === 'none') {\n    out.datum_type = PJD_NODATUM;\n  } else {\n    out.datum_type = PJD_WGS84;\n  }\n\n  if (datum_params) {\n    out.datum_params = datum_params.map(parseFloat);\n    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\n      out.datum_type = PJD_3PARAM;\n    }\n    if (out.datum_params.length > 3) {\n      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\n        out.datum_type = PJD_7PARAM;\n        out.datum_params[3] *= SEC_TO_RAD;\n        out.datum_params[4] *= SEC_TO_RAD;\n        out.datum_params[5] *= SEC_TO_RAD;\n        out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\n      }\n    }\n  }\n\n  out.a = a; //datum object also uses these values\n  out.b = b;\n  out.es = es;\n  out.ep2 = ep2;\n  return out;\n}\n\nexport default datum;\n","import parseCode from './parseCode';\nimport extend from './extend';\nimport projections from './projections';\nimport {sphere as dc_sphere, eccentricity as dc_eccentricity} from './deriveConstants';\nimport Datum from './constants/Datum';\nimport datum from './datum';\nimport match from './match';\n\nfunction Projection(srsCode,callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n  callback = callback || function(error){\n    if(error){\n      throw error;\n    }\n  };\n  var json = parseCode(srsCode);\n  if(typeof json !== 'object'){\n    callback(srsCode);\n    return;\n  }\n  var ourProj = Projection.projections.get(json.projName);\n  if(!ourProj){\n    callback(srsCode);\n    return;\n  }\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = match(Datum, json.datumCode);\n    if (datumDef) {\n      json.datum_params = datumDef.towgs84 ? datumDef.towgs84.split(',') : null;\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n  json.ellps = json.ellps || 'wgs84';\n  var sphere_ = dc_sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = dc_eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2);\n\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n  extend(this, ourProj); // transfer all the methods from the projection\n\n  // copy the 4 things over we calulated in deriveConstants.sphere\n  this.a = sphere_.a;\n  this.b = sphere_.b;\n  this.rf = sphere_.rf;\n  this.sphere = sphere_.sphere;\n\n  // copy the 3 things we calculated in deriveConstants.eccentricity\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2;\n\n  // add in the datum object\n  this.datum = datumObj;\n\n  // init the projection\n  this.init();\n\n  // legecy callback from back in the day when it went to spatialreference.org\n  callback(null, this);\n\n}\nProjection.projections = projections;\nProjection.projections.start();\nexport default Projection;\n","import {SIXTH, RA4, RA6, EPSLN} from './constants/values';\nimport {default as Ellipsoid, WGS84} from './constants/Ellipsoid';\nimport match from './match';\n\nexport function eccentricity(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n  var b2 = b * b; // used in geocentric\n  var es = (a2 - b2) / a2; // e ^ 2\n  var e = 0;\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n}\nexport function sphere(a, b, rf, ellps, sphere) {\n  if (!a) { // do we have an ellipsoid?\n    var ellipse = match(Ellipsoid, ellps);\n    if (!ellipse) {\n      ellipse = WGS84;\n    }\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n}\n","import {PJD_3PARAM, PJD_7PARAM, PJD_NODATUM} from './constants/values';\n\nimport {geodeticToGeocentric, geocentricToGeodetic, geocentricToWgs84, geocentricFromWgs84, compareDatums} from './datumUtils';\nfunction checkParams(type) {\n  return (type === PJD_3PARAM || type === PJD_7PARAM);\n}\n\nexport default function(source, dest, point) {\n  // Short cut if the datums are identical.\n  if (compareDatums(source, dest)) {\n    return point; // in this case, zero is sucess,\n    // whereas cs_compare_datums returns 1 to indicate TRUE\n    // confusing, should fix this\n  }\n\n  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n    return point;\n  }\n\n  // If this datum requires grid shifts, then apply it to geodetic coordinates.\n\n  // Do we need to go through geocentric coordinates?\n  if (source.es === dest.es && source.a === dest.a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n    return point;\n  }\n\n  // Convert to geocentric coordinates.\n  point = geodeticToGeocentric(point, source.es, source.a);\n  // Convert between datums\n  if (checkParams(source.datum_type)) {\n    point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n  }\n  if (checkParams(dest.datum_type)) {\n    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n  }\n  return geocentricToGeodetic(point, dest.es, dest.a, dest.b);\n\n}\n","'use strict';\nimport {PJD_3PARAM, PJD_7PARAM, HALF_PI} from './constants/values';\nexport function compareDatums(source, dest) {\n  if (source.datum_type !== dest.datum_type) {\n    return false; // false, datums are not equal\n  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\n    // the tolerance for es is to ensure that GRS80 and WGS84\n    // are considered identical\n    return false;\n  } else if (source.datum_type === PJD_3PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n  } else if (source.datum_type === PJD_7PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n  } else {\n    return true; // datums are equal\n  }\n} // cs_compare_datums()\n\n/*\n * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n * according to the current ellipsoid parameters.\n *\n *    Latitude  : Geodetic latitude in radians                     (input)\n *    Longitude : Geodetic longitude in radians                    (input)\n *    Height    : Geodetic height, in meters                       (input)\n *    X         : Calculated Geocentric X coordinate, in meters    (output)\n *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n *\n */\nexport function geodeticToGeocentric(p, es, a) {\n  var Longitude = p.x;\n  var Latitude = p.y;\n  var Height = p.z ? p.z : 0; //Z value not always supplied\n\n  var Rn; /*  Earth radius at location  */\n  var Sin_Lat; /*  Math.sin(Latitude)  */\n  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n  var Cos_Lat; /*  Math.cos(Latitude)  */\n\n  /*\n   ** Don't blow up if Latitude is just a little out of the value\n   ** range as it may just be a rounding issue.  Also removed longitude\n   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n   */\n  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n    Latitude = -HALF_PI;\n  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n    Latitude = HALF_PI;\n  } else if (Latitude < -HALF_PI) {\n    /* Latitude out of range */\n    //..reportError('geocent:lat out of range:' + Latitude);\n    return { x: -Infinity, y: -Infinity, z: p.z };\n  } else if (Latitude > HALF_PI) {\n    /* Latitude out of range */\n    return { x: Infinity, y: Infinity, z: p.z };\n  }\n\n  if (Longitude > Math.PI) {\n    Longitude -= (2 * Math.PI);\n  }\n  Sin_Lat = Math.sin(Latitude);\n  Cos_Lat = Math.cos(Latitude);\n  Sin2_Lat = Sin_Lat * Sin_Lat;\n  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n  return {\n    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n    z: ((Rn * (1 - es)) + Height) * Sin_Lat\n  };\n} // cs_geodetic_to_geocentric()\n\nexport function geocentricToGeodetic(p, es, a, b) {\n  /* local defintions and variables */\n  /* end-criterium of loop, accuracy of sin(Latitude) */\n  var genau = 1e-12;\n  var genau2 = (genau * genau);\n  var maxiter = 30;\n\n  var P; /* distance between semi-minor axis and location */\n  var RR; /* distance between center and location */\n  var CT; /* sin of geocentric latitude */\n  var ST; /* cos of geocentric latitude */\n  var RX;\n  var RK;\n  var RN; /* Earth radius at location */\n  var CPHI0; /* cos of start or old geodetic latitude in iterations */\n  var SPHI0; /* sin of start or old geodetic latitude in iterations */\n  var CPHI; /* cos of searched geodetic latitude */\n  var SPHI; /* sin of searched geodetic latitude */\n  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n  var X = p.x;\n  var Y = p.y;\n  var Z = p.z ? p.z : 0.0; //Z value not always supplied\n  var Longitude;\n  var Latitude;\n  var Height;\n\n  P = Math.sqrt(X * X + Y * Y);\n  RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n  /*      special cases for latitude and longitude */\n  if (P / a < genau) {\n\n    /*  special case, if P=0. (X=0., Y=0.) */\n    Longitude = 0.0;\n\n    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n    if (RR / a < genau) {\n      Latitude = HALF_PI;\n      Height = -b;\n      return {\n        x: p.x,\n        y: p.y,\n        z: p.z\n      };\n    }\n  } else {\n    /*  ellipsoidal (geodetic) longitude\n     *  interval: -PI < Longitude <= +PI */\n    Longitude = Math.atan2(Y, X);\n  }\n\n  /* --------------------------------------------------------------\n   * Following iterative algorithm was developped by\n   * \"Institut for Erdmessung\", University of Hannover, July 1988.\n   * Internet: www.ife.uni-hannover.de\n   * Iterative computation of CPHI,SPHI and Height.\n   * Iteration of CPHI and SPHI to 10**-12 radian resp.\n   * 2*10**-7 arcsec.\n   * --------------------------------------------------------------\n   */\n  CT = Z / RR;\n  ST = P / RR;\n  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n  CPHI0 = ST * (1.0 - es) * RX;\n  SPHI0 = CT * RX;\n  iter = 0;\n\n  /* loop to find sin(Latitude) resp. Latitude\n   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n  do {\n    iter++;\n    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n    /*  ellipsoidal (geodetic) height */\n    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n    RK = es * RN / (RN + Height);\n    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n    CPHI = ST * (1.0 - RK) * RX;\n    SPHI = CT * RX;\n    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n    CPHI0 = CPHI;\n    SPHI0 = SPHI;\n  }\n  while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n  /*      ellipsoidal (geodetic) latitude */\n  Latitude = Math.atan(SPHI / Math.abs(CPHI));\n  return {\n    x: Longitude,\n    y: Latitude,\n    z: Height\n  };\n} // cs_geocentric_to_geodetic()\n\n/****************************************************************/\n// pj_geocentic_to_wgs84( p )\n//  p = point to transform in geocentric coordinates (x,y,z)\n\n\n/** point object, nothing fancy, just allows values to be\n    passed back and forth by reference rather than by value.\n    Other point classes may be used as long as they have\n    x and y properties, which will get modified in the transform method.\n*/\nexport function geocentricToWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x + datum_params[0],\n      y: p.y + datum_params[1],\n      z: p.z + datum_params[2],\n    };\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n    };\n  }\n} // cs_geocentric_to_wgs84\n\n/****************************************************************/\n// pj_geocentic_from_wgs84()\n//  coordinate system definition,\n//  point to transform in geocentric coordinates (x,y,z)\nexport function geocentricFromWgs84(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x - datum_params[0],\n      y: p.y - datum_params[1],\n      z: p.z - datum_params[2],\n    };\n\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    var x_tmp = (p.x - Dx_BF) / M_BF;\n    var y_tmp = (p.y - Dy_BF) / M_BF;\n    var z_tmp = (p.z - Dz_BF) / M_BF;\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n\n    return {\n      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n    };\n  } //cs_geocentric_from_wgs84()\n}\n","export default function(crs, denorm, point) {\n  var xin = point.x,\n    yin = point.y,\n    zin = point.z || 0.0;\n  var v, t, i;\n  var out = {};\n  for (i = 0; i < 3; i++) {\n    if (denorm && i === 2 && point.z === undefined) {\n      continue;\n    }\n    if (i === 0) {\n      v = xin;\n      t = 'x';\n    }\n    else if (i === 1) {\n      v = yin;\n      t = 'y';\n    }\n    else {\n      v = zin;\n      t = 'z';\n    }\n    switch (crs.axis[i]) {\n    case 'e':\n      out[t] = v;\n      break;\n    case 'w':\n      out[t] = -v;\n      break;\n    case 'n':\n      out[t] = v;\n      break;\n    case 's':\n      out[t] = -v;\n      break;\n    case 'u':\n      if (point[t] !== undefined) {\n        out.z = v;\n      }\n      break;\n    case 'd':\n      if (point[t] !== undefined) {\n        out.z = -v;\n      }\n      break;\n    default:\n      //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n      return null;\n    }\n  }\n  return out;\n}\n","export default function (array){\n  var out = {\n    x: array[0],\n    y: array[1]\n  };\n  if (array.length>2) {\n    out.z = array[2];\n  }\n  if (array.length>3) {\n    out.m = array[3];\n  }\n  return out;\n}","export default function (point) {\n  checkCoord(point.x);\n  checkCoord(point.y);\n}\nfunction checkCoord(num) {\n  if (typeof Number.isFinite === 'function') {\n    if (Number.isFinite(num)) {\n      return;\n    }\n    throw new TypeError('coordinates must be finite numbers');\n  }\n  if (typeof num !== 'number' || num !== num || !isFinite(num)) {\n    throw new TypeError('coordinates must be finite numbers');\n  }\n}\n","import {D2R, R2D, PJD_3PARAM, PJD_7PARAM} from './constants/values';\nimport datum_transform from './datum_transform';\nimport adjust_axis from './adjust_axis';\nimport proj from './Proj';\nimport toPoint from './common/toPoint';\nimport checkSanity from './checkSanity';\n\nfunction checkNotWGS(source, dest) {\n  return ((source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== 'WGS84') || ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM) && source.datumCode !== 'WGS84');\n}\n\nexport default function transform(source, dest, point) {\n  var wgs84;\n  if (Array.isArray(point)) {\n    point = toPoint(point);\n  }\n  checkSanity(point);\n  // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n  if (source.datum && dest.datum && checkNotWGS(source, dest)) {\n    wgs84 = new proj('WGS84');\n    point = transform(source, wgs84, point);\n    source = wgs84;\n  }\n  // DGR, 2010/11/12\n  if (source.axis !== 'enu') {\n    point = adjust_axis(source, false, point);\n  }\n  // Transform source points to long/lat, if they aren't already.\n  if (source.projName === 'longlat') {\n    point = {\n      x: point.x * D2R,\n      y: point.y * D2R\n    };\n  }\n  else {\n    if (source.to_meter) {\n      point = {\n        x: point.x * source.to_meter,\n        y: point.y * source.to_meter\n      };\n    }\n    point = source.inverse(point); // Convert Cartesian to longlat\n  }\n  // Adjust for the prime meridian if necessary\n  if (source.from_greenwich) {\n    point.x += source.from_greenwich;\n  }\n\n  // Convert datums if needed, and if possible.\n  point = datum_transform(source.datum, dest.datum, point);\n\n  // Adjust for the prime meridian if necessary\n  if (dest.from_greenwich) {\n    point = {\n      x: point.x - dest.from_greenwich,\n      y: point.y\n    };\n  }\n\n  if (dest.projName === 'longlat') {\n    // convert radians to decimal degrees\n    point = {\n      x: point.x * R2D,\n      y: point.y * R2D\n    };\n  } else { // else project\n    point = dest.forward(point);\n    if (dest.to_meter) {\n      point = {\n        x: point.x / dest.to_meter,\n        y: point.y / dest.to_meter\n      };\n    }\n  }\n\n  // DGR, 2010/11/12\n  if (dest.axis !== 'enu') {\n    return adjust_axis(dest, true, point);\n  }\n\n  return point;\n}\n","import proj from './Proj';\nimport transform from './transform';\nvar wgs84 = proj('WGS84');\n\nfunction transformer(from, to, coords) {\n  var transformedArray, out, keys;\n  if (Array.isArray(coords)) {\n    transformedArray = transform(from, to, coords);\n    if (coords.length === 3) {\n      return [transformedArray.x, transformedArray.y, transformedArray.z];\n    }\n    else {\n      return [transformedArray.x, transformedArray.y];\n    }\n  }\n  else {\n    out = transform(from, to, coords);\n    keys = Object.keys(coords);\n    if (keys.length === 2) {\n      return out;\n    }\n    keys.forEach(function (key) {\n      if (key === 'x' || key === 'y') {\n        return;\n      }\n      out[key] = coords[key];\n    });\n    return out;\n  }\n}\n\nfunction checkProj(item) {\n  if (item instanceof proj) {\n    return item;\n  }\n  if (item.oProj) {\n    return item.oProj;\n  }\n  return proj(item);\n}\nfunction proj4(fromProj, toProj, coord) {\n  fromProj = checkProj(fromProj);\n  var single = false;\n  var obj;\n  if (typeof toProj === 'undefined') {\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n    coord = toProj;\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  toProj = checkProj(toProj);\n  if (coord) {\n    return transformer(fromProj, toProj, coord);\n  }\n  else {\n    obj = {\n      forward: function(coords) {\n        return transformer(fromProj, toProj, coords);\n      },\n      inverse: function(coords) {\n        return transformer(toProj, fromProj, coords);\n      }\n    };\n    if (single) {\n      obj.oProj = toProj;\n    }\n    return obj;\n  }\n}\nexport default proj4;\n","import {toPoint, forward} from 'mgrs';\n\nfunction Point(x, y, z) {\n  if (!(this instanceof Point)) {\n    return new Point(x, y, z);\n  }\n  if (Array.isArray(x)) {\n    this.x = x[0];\n    this.y = x[1];\n    this.z = x[2] || 0.0;\n  } else if(typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n    this.z = x.z || 0.0;\n  } else if (typeof x === 'string' && typeof y === 'undefined') {\n    var coords = x.split(',');\n    this.x = parseFloat(coords[0], 10);\n    this.y = parseFloat(coords[1], 10);\n    this.z = parseFloat(coords[2], 10) || 0.0;\n  } else {\n    this.x = x;\n    this.y = y;\n    this.z = z || 0.0;\n  }\n  console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');\n}\n\nPoint.fromMGRS = function(mgrsStr) {\n  return new Point(toPoint(mgrsStr));\n};\nPoint.prototype.toMGRS = function(accuracy) {\n  return forward([this.x, this.y], accuracy);\n};\nexport default Point;\n","var C00 = 1;\nvar C02 = 0.25;\nvar C04 = 0.046875;\nvar C06 = 0.01953125;\nvar C08 = 0.01068115234375;\nvar C22 = 0.75;\nvar C44 = 0.46875;\nvar C46 = 0.01302083333333333333;\nvar C48 = 0.00712076822916666666;\nvar C66 = 0.36458333333333333333;\nvar C68 = 0.00569661458333333333;\nvar C88 = 0.3076171875;\n\nexport default function(es) {\n  var en = [];\n  en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\n  en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\n  var t = es * es;\n  en[2] = t * (C44 - es * (C46 + es * C48));\n  t *= es;\n  en[3] = t * (C66 - es * C68);\n  en[4] = t * es * C88;\n  return en;\n}","export default function(phi, sphi, cphi, en) {\n  cphi *= sphi;\n  sphi *= sphi;\n  return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));\n}","import pj_mlfn from \"./pj_mlfn\";\nimport {EPSLN} from '../constants/values';\n\nvar MAX_ITER = 20;\n\nexport default function(arg, es, en) {\n  var k = 1 / (1 - es);\n  var phi = arg;\n  for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\n    var s = Math.sin(phi);\n    var t = 1 - es * s * s;\n    //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n    //phi -= t * (t * Math.sqrt(t)) * k;\n    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n    phi -= t;\n    if (Math.abs(t) < EPSLN) {\n      return phi;\n    }\n  }\n  //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n  return phi;\n}\n","// Heavily based on this tmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\n\nimport pj_enfn from '../common/pj_enfn';\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport adjust_lon from '../common/adjust_lon';\n\nimport {EPSLN, HALF_PI} from '../constants/values';\nimport sign from '../common/sign';\n\nexport function init() {\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  if (this.es) {\n    this.en = pj_enfn(this.es);\n    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n  }\n}\n\n/**\n    Transverse Mercator Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var con;\n  var x, y;\n  var sin_phi = Math.sin(lat);\n  var cos_phi = Math.cos(lat);\n\n  if (!this.es) {\n    var b = cos_phi * Math.sin(delta_lon);\n\n    if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\n      return (93);\n    }\n    else {\n      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n      b = Math.abs(y);\n\n      if (b >= 1) {\n        if ((b - 1) > EPSLN) {\n          return (93);\n        }\n        else {\n          y = 0;\n        }\n      }\n      else {\n        y = Math.acos(y);\n      }\n\n      if (lat < 0) {\n        y = -y;\n      }\n\n      y = this.a * this.k0 * (y - this.lat0) + this.y0;\n    }\n  }\n  else {\n    var al = cos_phi * delta_lon;\n    var als = Math.pow(al, 2);\n    var c = this.ep2 * Math.pow(cos_phi, 2);\n    var cs = Math.pow(c, 2);\n    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n    var t = Math.pow(tq, 2);\n    var ts = Math.pow(t, 2);\n    con = 1 - this.es * Math.pow(sin_phi, 2);\n    al = al / Math.sqrt(con);\n    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n\n    x = this.a * (this.k0 * al * (1 +\n      als / 6 * (1 - t + c +\n      als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\n      als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\n      this.x0;\n\n    y = this.a * (this.k0 * (ml - this.ml0 +\n      sin_phi * delta_lon * al / 2 * (1 +\n      als / 12 * (5 - t + 9 * c + 4 * cs +\n      als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\n      als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\n      this.y0;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\n/**\n    Transverse Mercator Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var con, phi;\n  var lat, lon;\n  var x = (p.x - this.x0) * (1 / this.a);\n  var y = (p.y - this.y0) * (1 / this.a);\n\n  if (!this.es) {\n    var f = Math.exp(x / this.k0);\n    var g = 0.5 * (f - 1 / f);\n    var temp = this.lat0 + y / this.k0;\n    var h = Math.cos(temp);\n    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n    lat = Math.asin(con);\n\n    if (y < 0) {\n      lat = -lat;\n    }\n\n    if ((g === 0) && (h === 0)) {\n      lon = 0;\n    }\n    else {\n      lon = adjust_lon(Math.atan2(g, h) + this.long0);\n    }\n  }\n  else { // ellipsoidal form\n    con = this.ml0 + y / this.k0;\n    phi = pj_inv_mlfn(con, this.es, this.en);\n\n    if (Math.abs(phi) < HALF_PI) {\n      var sin_phi = Math.sin(phi);\n      var cos_phi = Math.cos(phi);\n      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n      var c = this.ep2 * Math.pow(cos_phi, 2);\n      var cs = Math.pow(c, 2);\n      var t = Math.pow(tan_phi, 2);\n      var ts = Math.pow(t, 2);\n      con = 1 - this.es * Math.pow(sin_phi, 2);\n      var d = x * Math.sqrt(con) / this.k0;\n      var ds = Math.pow(d, 2);\n      con = con * tan_phi;\n\n      lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\n        ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\n        ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\n        ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n\n      lon = adjust_lon(this.long0 + (d * (1 -\n        ds / 6 * (1 + 2 * t + c -\n        ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\n        ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\n    }\n    else {\n      lat = HALF_PI * sign(y);\n      lon = 0;\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Transverse_Mercator\", \"Transverse Mercator\", \"tmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r - 1 / r) / 2;\n  return r;\n}","export default function(x, y) {\n  x = Math.abs(x);\n  y = Math.abs(y);\n  var a = Math.max(x, y);\n  var b = Math.min(x, y) / (a ? a : 1);\n\n  return a * Math.sqrt(1 + Math.pow(b, 2));\n}\n","import hypot from './hypot';\nimport log1py from './log1py';\n\nexport default function(x) {\n  var y = Math.abs(x);\n  y = log1py(y * (1 + y / (hypot(1, y) + 1)));\n\n  return x < 0 ? -y : y;\n}\n","export default function(x) {\n  var y = 1 + x;\n  var z = y - 1;\n\n  return z === 0 ? x : x * Math.log(y) / z;\n}\n","export default function(pp, B) {\n  var cos_2B = 2 * Math.cos(2 * B);\n  var i = pp.length - 1;\n  var h1 = pp[i];\n  var h2 = 0;\n  var h;\n\n  while (--i >= 0) {\n    h = -h2 + cos_2B * h1 + pp[i];\n    h2 = h1;\n    h1 = h;\n  }\n\n  return (B + h * Math.sin(2 * B));\n}\n","export default function(pp, arg_r) {\n  var r = 2 * Math.cos(arg_r);\n  var i = pp.length - 1;\n  var hr1 = pp[i];\n  var hr2 = 0;\n  var hr;\n\n  while (--i >= 0) {\n    hr = -hr2 + r * hr1 + pp[i];\n    hr2 = hr1;\n    hr1 = hr;\n  }\n\n  return Math.sin(arg_r) * hr;\n}\n","import sinh from './sinh';\nimport cosh from './cosh';\n\nexport default function(pp, arg_r, arg_i) {\n  var sin_arg_r = Math.sin(arg_r);\n  var cos_arg_r = Math.cos(arg_r);\n  var sinh_arg_i = sinh(arg_i);\n  var cosh_arg_i = cosh(arg_i);\n  var r = 2 * cos_arg_r * cosh_arg_i;\n  var i = -2 * sin_arg_r * sinh_arg_i;\n  var j = pp.length - 1;\n  var hr = pp[j];\n  var hi1 = 0;\n  var hr1 = 0;\n  var hi = 0;\n  var hr2;\n  var hi2;\n\n  while (--j >= 0) {\n    hr2 = hr1;\n    hi2 = hi1;\n    hr1 = hr;\n    hi1 = hi;\n    hr = -hr2 + r * hr1 - i * hi1 + pp[j];\n    hi = -hi2 + i * hr1 + r * hi1;\n  }\n\n  r = sin_arg_r * cosh_arg_i;\n  i = cos_arg_r * sinh_arg_i;\n\n  return [r * hr - i * hi, r * hi + i * hr];\n}\n","export default function(x) {\n  var r = Math.exp(x);\n  r = (r + 1 / r) / 2;\n  return r;\n}","// Heavily based on this etmerc projection implementation\n// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js\n\nimport sinh from '../common/sinh';\nimport hypot from '../common/hypot';\nimport asinhy from '../common/asinhy';\nimport gatg from '../common/gatg';\nimport clens from '../common/clens';\nimport clens_cmplx from '../common/clens_cmplx';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  if (this.es === undefined || this.es <= 0) {\n    throw new Error('incorrect elliptical usage');\n  }\n\n  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n  this.cgb = [];\n  this.cbg = [];\n  this.utg = [];\n  this.gtu = [];\n\n  var f = this.es / (1 + Math.sqrt(1 - this.es));\n  var n = f / (2 - f);\n  var np = n;\n\n  this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));\n  this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));\n\n  np = np * n;\n  this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));\n  this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));\n\n  np = np * n;\n  this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));\n  this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));\n\n  np = np * n;\n  this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));\n  this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));\n\n  np = np * n;\n  this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));\n  this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));\n\n  np = np * n;\n  this.cgb[5] = np * (601676 / 22275);\n  this.cbg[5] = np * (444337 / 155925);\n\n  np = Math.pow(n, 2);\n  this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));\n\n  this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));\n  this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));\n\n  this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));\n  this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));\n\n  np = np * n;\n  this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));\n  this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));\n\n  np = np * n;\n  this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));\n  this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));\n\n  np = np * n;\n  this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));\n  this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));\n\n  np = np * n;\n  this.utg[5] = np * (-20648693 / 638668800);\n  this.gtu[5] = np * (212378941 / 319334400);\n\n  var Z = gatg(this.cbg, this.lat0);\n  this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));\n}\n\nexport function forward(p) {\n  var Ce = adjust_lon(p.x - this.long0);\n  var Cn = p.y;\n\n  Cn = gatg(this.cbg, Cn);\n  var sin_Cn = Math.sin(Cn);\n  var cos_Cn = Math.cos(Cn);\n  var sin_Ce = Math.sin(Ce);\n  var cos_Ce = Math.cos(Ce);\n\n  Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);\n  Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));\n  Ce = asinhy(Math.tan(Ce));\n\n  var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);\n\n  Cn = Cn + tmp[0];\n  Ce = Ce + tmp[1];\n\n  var x;\n  var y;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    x = this.a * (this.Qn * Ce) + this.x0;\n    y = this.a * (this.Qn * Cn + this.Zb) + this.y0;\n  }\n  else {\n    x = Infinity;\n    y = Infinity;\n  }\n\n  p.x = x;\n  p.y = y;\n\n  return p;\n}\n\nexport function inverse(p) {\n  var Ce = (p.x - this.x0) * (1 / this.a);\n  var Cn = (p.y - this.y0) * (1 / this.a);\n\n  Cn = (Cn - this.Zb) / this.Qn;\n  Ce = Ce / this.Qn;\n\n  var lon;\n  var lat;\n\n  if (Math.abs(Ce) <= 2.623395162778) {\n    var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);\n\n    Cn = Cn + tmp[0];\n    Ce = Ce + tmp[1];\n    Ce = Math.atan(sinh(Ce));\n\n    var sin_Cn = Math.sin(Cn);\n    var cos_Cn = Math.cos(Cn);\n    var sin_Ce = Math.sin(Ce);\n    var cos_Ce = Math.cos(Ce);\n\n    Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));\n    Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);\n\n    lon = adjust_lon(Ce + this.long0);\n    lat = gatg(this.cgb, Cn);\n  }\n  else {\n    lon = Infinity;\n    lat = Infinity;\n  }\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"Extended_Transverse_Mercator\", \"Extended Transverse Mercator\", \"etmerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from './adjust_lon';\n\nexport default function(zone, lon) {\n  if (zone === undefined) {\n    zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;\n\n    if (zone < 0) {\n      return 0;\n    } else if (zone > 60) {\n      return 60;\n    }\n  }\n  return zone;\n}\n","import adjust_zone from '../common/adjust_zone';\nimport etmerc from './etmerc';\nexport var dependsOn = 'etmerc';\nimport {D2R} from '../constants/values';\n\n\nexport function init() {\n  var zone = adjust_zone(this.zone, this.long0);\n  if (zone === undefined) {\n    throw new Error('unknown utm zone');\n  }\n  this.lat0 = 0;\n  this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;\n  this.x0 = 500000;\n  this.y0 = this.utmSouth ? 10000000 : 0;\n  this.k0 = 0.9996;\n\n  etmerc.init.apply(this);\n  this.forward = etmerc.forward;\n  this.inverse = etmerc.inverse;\n}\n\nexport var names = [\"Universal Transverse Mercator System\", \"utm\"];\nexport default {\n  init: init,\n  names: names,\n  dependsOn: dependsOn\n};\n","export default function(esinp, exp) {\n  return (Math.pow((1 - esinp) / (1 + esinp), exp));\n}","import srat from '../common/srat';\nvar MAX_ITER = 20;\nimport {HALF_PI, FORTPI} from '../constants/values';\n\nexport function init() {\n  var sphi = Math.sin(this.lat0);\n  var cphi = Math.cos(this.lat0);\n  cphi *= cphi;\n  this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\n  this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\n  this.phic0 = Math.asin(sphi / this.C);\n  this.ratexp = 0.5 * this.C * this.e;\n  this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n\n  p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\n  p.x = this.C * lon;\n  return p;\n}\n\nexport function inverse(p) {\n  var DEL_TOL = 1e-14;\n  var lon = p.x / this.C;\n  var lat = p.y;\n  var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\n  for (var i = MAX_ITER; i > 0; --i) {\n    lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;\n    if (Math.abs(lat - p.y) < DEL_TOL) {\n      break;\n    }\n    p.y = lat;\n  }\n  /* convergence failed */\n  if (!i) {\n    return null;\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gauss\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import gauss from './gauss';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  gauss.init.apply(this);\n  if (!this.rc) {\n    return;\n  }\n  this.sinc0 = Math.sin(this.phic0);\n  this.cosc0 = Math.cos(this.phic0);\n  this.R2 = 2 * this.rc;\n  if (!this.title) {\n    this.title = \"Oblique Stereographic Alternative\";\n  }\n}\n\nexport function forward(p) {\n  var sinc, cosc, cosl, k;\n  p.x = adjust_lon(p.x - this.long0);\n  gauss.forward.apply(this, [p]);\n  sinc = Math.sin(p.y);\n  cosc = Math.cos(p.y);\n  cosl = Math.cos(p.x);\n  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n  p.x = k * cosc * Math.sin(p.x);\n  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n  p.x = this.a * p.x + this.x0;\n  p.y = this.a * p.y + this.y0;\n  return p;\n}\n\nexport function inverse(p) {\n  var sinc, cosc, lon, lat, rho;\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n  if ((rho = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    var c = 2 * Math.atan2(rho, this.R2);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  gauss.inverse.apply(this, [p]);\n  p.x = adjust_lon(p.x + this.long0);\n  return p;\n}\n\nexport var names = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"Polar_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\",\"Double_Stereographic\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {EPSLN, HALF_PI} from '../constants/values';\n\nimport sign from '../common/sign';\nimport msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport phi2z from '../common/phi2z';\nimport adjust_lon from '../common/adjust_lon';\n\nexport function ssfn_(phit, sinphi, eccen) {\n  sinphi *= eccen;\n  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n}\n\nexport function init() {\n  this.coslat0 = Math.cos(this.lat0);\n  this.sinlat0 = Math.sin(this.lat0);\n  if (this.sphere) {\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n    }\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (this.lat0 > 0) {\n        //North pole\n        //trace('stere:north pole');\n        this.con = 1;\n      }\n      else {\n        //South pole\n        //trace('stere:south pole');\n        this.con = -1;\n      }\n    }\n    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n    }\n    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n    this.cosX0 = Math.cos(this.X0);\n    this.sinX0 = Math.sin(this.X0);\n  }\n}\n\n// Stereographic forward equations--mapping lat,long to x,y\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinlat = Math.sin(lat);\n  var coslat = Math.cos(lat);\n  var A, X, sinX, cosX, ts, rh;\n  var dlon = adjust_lon(lon - this.long0);\n\n  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n    //case of the origine point\n    //trace('stere:this is the origin point');\n    p.x = NaN;\n    p.y = NaN;\n    return p;\n  }\n  if (this.sphere) {\n    //trace('stere:sphere case');\n    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n    return p;\n  }\n  else {\n    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n    cosX = Math.cos(X);\n    sinX = Math.sin(X);\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n      rh = 2 * this.a * this.k0 * ts / this.cons;\n      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n      //trace(p.toString());\n      return p;\n    }\n    else if (Math.abs(this.sinlat0) < EPSLN) {\n      //Eq\n      //trace('stere:equateur');\n      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n      p.y = A * sinX;\n    }\n    else {\n      //other case\n      //trace('stere:normal case');\n      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n    }\n    p.x = A * cosX * Math.sin(dlon) + this.x0;\n  }\n  //trace(p.toString());\n  return p;\n}\n\n//* Stereographic inverse equations--mapping x,y to lat/long\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat, ts, ce, Chi;\n  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  if (this.sphere) {\n    var c = 2 * Math.atan(rh / (2 * this.a * this.k0));\n    lon = this.long0;\n    lat = this.lat0;\n    if (rh <= EPSLN) {\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n    if (Math.abs(this.coslat0) < EPSLN) {\n      if (this.lat0 > 0) {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      }\n      else {\n        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      }\n    }\n    else {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    if (Math.abs(this.coslat0) <= EPSLN) {\n      if (rh <= EPSLN) {\n        lat = this.lat0;\n        lon = this.long0;\n        p.x = lon;\n        p.y = lat;\n        //trace(p.toString());\n        return p;\n      }\n      p.x *= this.con;\n      p.y *= this.con;\n      ts = rh * this.cons / (2 * this.a * this.k0);\n      lat = this.con * phi2z(this.e, ts);\n      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n    }\n    else {\n      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n      lon = this.long0;\n      if (rh <= EPSLN) {\n        Chi = this.X0;\n      }\n      else {\n        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n      }\n      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n\n  //trace(p.toString());\n  return p;\n\n}\n\nexport var names = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  ssfn_: ssfn_\n};\n","/*\n  references:\n    Formules et constantes pour le Calcul pour la\n    projection cylindrique conforme à axe oblique et pour la transformation entre\n    des systèmes de référence.\n    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n  */\n\nexport function init() {\n  var phy0 = this.lat0;\n  this.lambda0 = this.long0;\n  var sinPhy0 = Math.sin(phy0);\n  var semiMajorAxis = this.a;\n  var invF = this.rf;\n  var flattening = 1 / invF;\n  var e2 = 2 * flattening - Math.pow(flattening, 2);\n  var e = this.e = Math.sqrt(e2);\n  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n  this.b0 = Math.asin(sinPhy0 / this.alpha);\n  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n}\n\nexport function forward(p) {\n  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n  var S = -this.alpha * (Sa1 + Sa2) + this.K;\n\n  // spheric latitude\n  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\n\n  // spheric longitude\n  var I = this.alpha * (p.x - this.lambda0);\n\n  // psoeudo equatorial rotation\n  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n\n  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n\n  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n  p.x = this.R * rotI + this.x0;\n  return p;\n}\n\nexport function inverse(p) {\n  var Y = p.x - this.x0;\n  var X = p.y - this.y0;\n\n  var rotI = Y / this.R;\n  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n\n  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n\n  var lambda = this.lambda0 + I / this.alpha;\n\n  var S = 0;\n  var phy = b;\n  var prevPhy = -1000;\n  var iteration = 0;\n  while (Math.abs(phy - prevPhy) > 0.0000001) {\n    if (++iteration > 20) {\n      //...reportError(\"omercFwdInfinity\");\n      return;\n    }\n    //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n    prevPhy = phy;\n    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n  }\n\n  p.x = lambda;\n  p.y = phy;\n  return p;\n}\n\nexport var names = [\"somerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import tsfnz from '../common/tsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {EPSLN, HALF_PI, FORTPI} from '../constants/values';\n\n/* Initialize the Oblique Mercator  projection\n    ------------------------------------------*/\nexport function init() {\n  this.no_off = this.no_off || false;\n  this.no_rot = this.no_rot || false;\n\n  if (isNaN(this.k0)) {\n    this.k0 = 1;\n  }\n  var sinlat = Math.sin(this.lat0);\n  var coslat = Math.cos(this.lat0);\n  var con = this.e * sinlat;\n\n  this.bl = Math.sqrt(1 + this.es / (1 - this.es) * Math.pow(coslat, 4));\n  this.al = this.a * this.bl * this.k0 * Math.sqrt(1 - this.es) / (1 - con * con);\n  var t0 = tsfnz(this.e, this.lat0, sinlat);\n  var dl = this.bl / coslat * Math.sqrt((1 - this.es) / (1 - con * con));\n  if (dl * dl < 1) {\n    dl = 1;\n  }\n  var fl;\n  var gl;\n  if (!isNaN(this.longc)) {\n    //Central point and azimuth method\n\n    if (this.lat0 >= 0) {\n      fl = dl + Math.sqrt(dl * dl - 1);\n    }\n    else {\n      fl = dl - Math.sqrt(dl * dl - 1);\n    }\n    this.el = fl * Math.pow(t0, this.bl);\n    gl = 0.5 * (fl - 1 / fl);\n    this.gamma0 = Math.asin(Math.sin(this.alpha) / dl);\n    this.long0 = this.longc - Math.asin(gl * Math.tan(this.gamma0)) / this.bl;\n\n  }\n  else {\n    //2 points method\n    var t1 = tsfnz(this.e, this.lat1, Math.sin(this.lat1));\n    var t2 = tsfnz(this.e, this.lat2, Math.sin(this.lat2));\n    if (this.lat0 >= 0) {\n      this.el = (dl + Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n    }\n    else {\n      this.el = (dl - Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n    }\n    var hl = Math.pow(t1, this.bl);\n    var ll = Math.pow(t2, this.bl);\n    fl = this.el / hl;\n    gl = 0.5 * (fl - 1 / fl);\n    var jl = (this.el * this.el - ll * hl) / (this.el * this.el + ll * hl);\n    var pl = (ll - hl) / (ll + hl);\n    var dlon12 = adjust_lon(this.long1 - this.long2);\n    this.long0 = 0.5 * (this.long1 + this.long2) - Math.atan(jl * Math.tan(0.5 * this.bl * (dlon12)) / pl) / this.bl;\n    this.long0 = adjust_lon(this.long0);\n    var dlon10 = adjust_lon(this.long1 - this.long0);\n    this.gamma0 = Math.atan(Math.sin(this.bl * (dlon10)) / gl);\n    this.alpha = Math.asin(dl * Math.sin(this.gamma0));\n  }\n\n  if (this.no_off) {\n    this.uc = 0;\n  }\n  else {\n    if (this.lat0 >= 0) {\n      this.uc = this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n    }\n    else {\n      this.uc = -1 * this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n    }\n  }\n\n}\n\n/* Oblique Mercator forward equations--mapping lat,long to x,y\n    ----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var dlon = adjust_lon(lon - this.long0);\n  var us, vs;\n  var con;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    if (lat > 0) {\n      con = -1;\n    }\n    else {\n      con = 1;\n    }\n    vs = this.al / this.bl * Math.log(Math.tan(FORTPI + con * this.gamma0 * 0.5));\n    us = -1 * con * HALF_PI * this.al / this.bl;\n  }\n  else {\n    var t = tsfnz(this.e, lat, Math.sin(lat));\n    var ql = this.el / Math.pow(t, this.bl);\n    var sl = 0.5 * (ql - 1 / ql);\n    var tl = 0.5 * (ql + 1 / ql);\n    var vl = Math.sin(this.bl * (dlon));\n    var ul = (sl * Math.sin(this.gamma0) - vl * Math.cos(this.gamma0)) / tl;\n    if (Math.abs(Math.abs(ul) - 1) <= EPSLN) {\n      vs = Number.POSITIVE_INFINITY;\n    }\n    else {\n      vs = 0.5 * this.al * Math.log((1 - ul) / (1 + ul)) / this.bl;\n    }\n    if (Math.abs(Math.cos(this.bl * (dlon))) <= EPSLN) {\n      us = this.al * this.bl * (dlon);\n    }\n    else {\n      us = this.al * Math.atan2(sl * Math.cos(this.gamma0) + vl * Math.sin(this.gamma0), Math.cos(this.bl * dlon)) / this.bl;\n    }\n  }\n\n  if (this.no_rot) {\n    p.x = this.x0 + us;\n    p.y = this.y0 + vs;\n  }\n  else {\n\n    us -= this.uc;\n    p.x = this.x0 + vs * Math.cos(this.alpha) + us * Math.sin(this.alpha);\n    p.y = this.y0 + us * Math.cos(this.alpha) - vs * Math.sin(this.alpha);\n  }\n  return p;\n}\n\nexport function inverse(p) {\n  var us, vs;\n  if (this.no_rot) {\n    vs = p.y - this.y0;\n    us = p.x - this.x0;\n  }\n  else {\n    vs = (p.x - this.x0) * Math.cos(this.alpha) - (p.y - this.y0) * Math.sin(this.alpha);\n    us = (p.y - this.y0) * Math.cos(this.alpha) + (p.x - this.x0) * Math.sin(this.alpha);\n    us += this.uc;\n  }\n  var qp = Math.exp(-1 * this.bl * vs / this.al);\n  var sp = 0.5 * (qp - 1 / qp);\n  var tp = 0.5 * (qp + 1 / qp);\n  var vp = Math.sin(this.bl * us / this.al);\n  var up = (vp * Math.cos(this.gamma0) + sp * Math.sin(this.gamma0)) / tp;\n  var ts = Math.pow(this.el / Math.sqrt((1 + up) / (1 - up)), 1 / this.bl);\n  if (Math.abs(up - 1) < EPSLN) {\n    p.x = this.long0;\n    p.y = HALF_PI;\n  }\n  else if (Math.abs(up + 1) < EPSLN) {\n    p.x = this.long0;\n    p.y = -1 * HALF_PI;\n  }\n  else {\n    p.y = phi2z(this.e, ts);\n    p.x = adjust_lon(this.long0 - Math.atan2(sp * Math.cos(this.gamma0) - vp * Math.sin(this.gamma0), Math.cos(this.bl * us / this.al)) / this.bl);\n  }\n  return p;\n}\n\nexport var names = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"omerc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import msfnz from '../common/msfnz';\nimport tsfnz from '../common/tsfnz';\nimport sign from '../common/sign';\nimport adjust_lon from '../common/adjust_lon';\nimport phi2z from '../common/phi2z';\nimport {HALF_PI, EPSLN} from '../constants/values';\nexport function init() {\n\n  // array of:  r_maj,r_min,lat1,lat2,c_lon,c_lat,false_east,false_north\n  //double c_lat;                   /* center latitude                      */\n  //double c_lon;                   /* center longitude                     */\n  //double lat1;                    /* first standard parallel              */\n  //double lat2;                    /* second standard parallel             */\n  //double r_maj;                   /* major axis                           */\n  //double r_min;                   /* minor axis                           */\n  //double false_east;              /* x offset in meters                   */\n  //double false_north;             /* y offset in meters                   */\n\n  if (!this.lat2) {\n    this.lat2 = this.lat1;\n  } //if lat2 is not defined\n  if (!this.k0) {\n    this.k0 = 1;\n  }\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n\n  var temp = this.b / this.a;\n  this.e = Math.sqrt(1 - temp * temp);\n\n  var sin1 = Math.sin(this.lat1);\n  var cos1 = Math.cos(this.lat1);\n  var ms1 = msfnz(this.e, sin1, cos1);\n  var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n  var sin2 = Math.sin(this.lat2);\n  var cos2 = Math.cos(this.lat2);\n  var ms2 = msfnz(this.e, sin2, cos2);\n  var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n  }\n  else {\n    this.ns = sin1;\n  }\n  if (isNaN(this.ns)) {\n    this.ns = sin1;\n  }\n  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n  if (!this.title) {\n    this.title = \"Lambert Conformal Conic\";\n  }\n}\n\n// Lambert Conformal conic forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  // singular cases :\n  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n  }\n\n  var con = Math.abs(Math.abs(lat) - HALF_PI);\n  var ts, rh1;\n  if (con > EPSLN) {\n    ts = tsfnz(this.e, lat, Math.sin(lat));\n    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n  }\n  else {\n    con = lat * this.ns;\n    if (con <= 0) {\n      return null;\n    }\n    rh1 = 0;\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n  return p;\n}\n\n// Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var rh1, con, ts;\n  var lat, lon;\n  var x = (p.x - this.x0) / this.k0;\n  var y = (this.rh - (p.y - this.y0) / this.k0);\n  if (this.ns > 0) {\n    rh1 = Math.sqrt(x * x + y * y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(x * x + y * y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2((con * x), (con * y));\n  }\n  if ((rh1 !== 0) || (this.ns > 0)) {\n    con = 1 / this.ns;\n    ts = Math.pow((rh1 / (this.a * this.f0)), con);\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  else {\n    lat = -HALF_PI;\n  }\n  lon = adjust_lon(theta / this.ns + this.long0);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Lambert Tangential Conformal Conic Projection\", \"Lambert_Conformal_Conic\", \"Lambert_Conformal_Conic_2SP\", \"lcc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nexport function init() {\n  this.a = 6377397.155;\n  this.es = 0.006674372230614;\n  this.e = Math.sqrt(this.es);\n  if (!this.lat0) {\n    this.lat0 = 0.863937979737193;\n  }\n  if (!this.long0) {\n    this.long0 = 0.7417649320975901 - 0.308341501185665;\n  }\n  /* if scale not set default to 0.9999 */\n  if (!this.k0) {\n    this.k0 = 0.9999;\n  }\n  this.s45 = 0.785398163397448; /* 45 */\n  this.s90 = 2 * this.s45;\n  this.fi0 = this.lat0;\n  this.e2 = this.es;\n  this.e = Math.sqrt(this.e2);\n  this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));\n  this.uq = 1.04216856380474;\n  this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\n  this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\n  this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\n  this.k1 = this.k0;\n  this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\n  this.s0 = 1.37008346281555;\n  this.n = Math.sin(this.s0);\n  this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\n  this.ad = this.s90 - this.uq;\n}\n\n/* ellipsoid */\n/* calculate xy from lat/lon */\n/* Constants, identical to inverse transform function */\nexport function forward(p) {\n  var gfi, u, deltav, s, d, eps, ro;\n  var lon = p.x;\n  var lat = p.y;\n  var delta_lon = adjust_lon(lon - this.long0);\n  /* Transformation */\n  gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));\n  u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\n  deltav = -delta_lon * this.alfa;\n  s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\n  d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\n  eps = this.n * d;\n  ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\n  p.y = ro * Math.cos(eps) / 1;\n  p.x = ro * Math.sin(eps) / 1;\n\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  return (p);\n}\n\n/* calculate lat/lon from xy */\nexport function inverse(p) {\n  var u, deltav, s, d, eps, ro, fi1;\n  var ok;\n\n  /* Transformation */\n  /* revert y, x*/\n  var tmp = p.x;\n  p.x = p.y;\n  p.y = tmp;\n  if (!this.czech) {\n    p.y *= -1;\n    p.x *= -1;\n  }\n  ro = Math.sqrt(p.x * p.x + p.y * p.y);\n  eps = Math.atan2(p.y, p.x);\n  d = eps / Math.sin(this.s0);\n  s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\n  u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\n  deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\n  p.x = this.long0 - deltav / this.alfa;\n  fi1 = u;\n  ok = 0;\n  var iter = 0;\n  do {\n    p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\n    if (Math.abs(fi1 - p.y) < 0.0000000001) {\n      ok = 1;\n    }\n    fi1 = p.y;\n    iter += 1;\n  } while (ok === 0 && iter < 15);\n  if (iter >= 15) {\n    return null;\n  }\n\n  return (p);\n}\n\nexport var names = [\"Krovak\", \"krovak\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(e0, e1, e2, e3, phi) {\n  return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));\n}","export default function(x) {\n  return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));\n}","export default function(x) {\n  return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));\n}","export default function(x) {\n  return (0.05859375 * x * x * (1 + 0.75 * x));\n}","export default function(x) {\n  return (x * x * x * (35 / 3072));\n}","export default function(a, e, sinphi) {\n  var temp = e * sinphi;\n  return a / Math.sqrt(1 - temp * temp);\n}","import {HALF_PI} from '../constants/values';\nimport sign from './sign';\n\nexport default function(x) {\n  return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));\n}\n","export default function(ml, e0, e1, e2, e3) {\n  var phi;\n  var dphi;\n\n  phi = ml / e0;\n  for (var i = 0; i < 15; i++) {\n    dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\n  return NaN;\n}","import mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nexport function init() {\n  if (!this.sphere) {\n    this.e0 = e0fn(this.es);\n    this.e1 = e1fn(this.es);\n    this.e2 = e2fn(this.es);\n    this.e3 = e3fn(this.es);\n    this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  }\n}\n\n/* Cassini forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y;\n  var lam = p.x;\n  var phi = p.y;\n  lam = adjust_lon(lam - this.long0);\n\n  if (this.sphere) {\n    x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\n    y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\n  }\n  else {\n    //ellipsoid\n    var sinphi = Math.sin(phi);\n    var cosphi = Math.cos(phi);\n    var nl = gN(this.a, this.e, sinphi);\n    var tl = Math.tan(phi) * Math.tan(phi);\n    var al = lam * Math.cos(phi);\n    var asq = al * al;\n    var cl = this.es * cosphi * cosphi / (1 - this.es);\n    var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n\n    x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\n    y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\n\n\n  }\n\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var phi, lam;\n\n  if (this.sphere) {\n    var dd = y + this.lat0;\n    phi = Math.asin(Math.sin(dd) * Math.cos(x));\n    lam = Math.atan2(Math.tan(x), Math.cos(dd));\n  }\n  else {\n    /* ellipsoid */\n    var ml1 = this.ml0 / this.a + y;\n    var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\n    if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\n      p.x = this.long0;\n      p.y = HALF_PI;\n      if (y < 0) {\n        p.y *= -1;\n      }\n      return p;\n    }\n    var nl1 = gN(this.a, this.e, Math.sin(phi1));\n\n    var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\n    var tl1 = Math.pow(Math.tan(phi1), 2);\n    var dl = x * this.a / nl1;\n    var dsq = dl * dl;\n    phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\n    lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\n\n  }\n\n  p.x = adjust_lon(lam + this.long0);\n  p.y = adjust_lat(phi);\n  return p;\n\n}\n\nexport var names = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","export default function(eccent, sinphi) {\n  var con;\n  if (eccent > 1.0e-7) {\n    con = eccent * sinphi;\n    return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));\n  }\n  else {\n    return (2 * sinphi);\n  }\n}","\nimport {HALF_PI, EPSLN, FORTPI} from '../constants/values';\n\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\nexport var S_POLE = 1;\n\nexport var N_POLE = 2;\nexport var EQUIT = 3;\nexport var OBLIQ = 4;\n\n/* Initialize the Lambert Azimuthal Equal Area projection\n  ------------------------------------------------------*/\nexport function init() {\n  var t = Math.abs(this.lat0);\n  if (Math.abs(t - HALF_PI) < EPSLN) {\n    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n  }\n  else if (Math.abs(t) < EPSLN) {\n    this.mode = this.EQUIT;\n  }\n  else {\n    this.mode = this.OBLIQ;\n  }\n  if (this.es > 0) {\n    var sinphi;\n\n    this.qp = qsfnz(this.e, 1);\n    this.mmf = 0.5 / (1 - this.es);\n    this.apa = authset(this.es);\n    switch (this.mode) {\n    case this.N_POLE:\n      this.dd = 1;\n      break;\n    case this.S_POLE:\n      this.dd = 1;\n      break;\n    case this.EQUIT:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      this.dd = 1 / this.rq;\n      this.xmf = 1;\n      this.ymf = 0.5 * this.qp;\n      break;\n    case this.OBLIQ:\n      this.rq = Math.sqrt(0.5 * this.qp);\n      sinphi = Math.sin(this.lat0);\n      this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n      this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n      this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n      this.ymf = (this.xmf = this.rq) / this.dd;\n      this.xmf *= this.dd;\n      break;\n    }\n  }\n  else {\n    if (this.mode === this.OBLIQ) {\n      this.sinph0 = Math.sin(this.lat0);\n      this.cosph0 = Math.cos(this.lat0);\n    }\n  }\n}\n\n/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n  var lam = p.x;\n  var phi = p.y;\n\n  lam = adjust_lon(lam - this.long0);\n  if (this.sphere) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    coslam = Math.cos(lam);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n      if (y <= EPSLN) {\n        return null;\n      }\n      y = Math.sqrt(2 / y);\n      x = y * cosphi * Math.sin(lam);\n      y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        coslam = -coslam;\n      }\n      if (Math.abs(phi + this.phi0) < EPSLN) {\n        return null;\n      }\n      y = FORTPI - phi * 0.5;\n      y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\n      x = y * Math.sin(lam);\n      y *= coslam;\n    }\n  }\n  else {\n    sinb = 0;\n    cosb = 0;\n    b = 0;\n    coslam = Math.cos(lam);\n    sinlam = Math.sin(lam);\n    sinphi = Math.sin(phi);\n    q = qsfnz(this.e, sinphi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinb = q / this.qp;\n      cosb = Math.sqrt(1 - sinb * sinb);\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n      b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n      break;\n    case this.EQUIT:\n      b = 1 + cosb * coslam;\n      break;\n    case this.N_POLE:\n      b = HALF_PI + phi;\n      q = this.qp - q;\n      break;\n    case this.S_POLE:\n      b = phi - HALF_PI;\n      q = this.qp + q;\n      break;\n    }\n    if (Math.abs(b) < EPSLN) {\n      return null;\n    }\n    switch (this.mode) {\n    case this.OBLIQ:\n    case this.EQUIT:\n      b = Math.sqrt(2 / b);\n      if (this.mode === this.OBLIQ) {\n        y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n      }\n      else {\n        y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n      }\n      x = this.xmf * b * cosb * sinlam;\n      break;\n    case this.N_POLE:\n    case this.S_POLE:\n      if (q >= 0) {\n        x = (b = Math.sqrt(q)) * sinlam;\n        y = coslam * ((this.mode === this.S_POLE) ? b : -b);\n      }\n      else {\n        x = y = 0;\n      }\n      break;\n    }\n  }\n\n  p.x = this.a * x + this.x0;\n  p.y = this.a * y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var x = p.x / this.a;\n  var y = p.y / this.a;\n  var lam, phi, cCe, sCe, q, rho, ab;\n  if (this.sphere) {\n    var cosz = 0,\n      rh, sinz = 0;\n\n    rh = Math.sqrt(x * x + y * y);\n    phi = rh * 0.5;\n    if (phi > 1) {\n      return null;\n    }\n    phi = 2 * Math.asin(phi);\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      sinz = Math.sin(phi);\n      cosz = Math.cos(phi);\n    }\n    switch (this.mode) {\n    case this.EQUIT:\n      phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\n      x *= sinz;\n      y = cosz * rh;\n      break;\n    case this.OBLIQ:\n      phi = (Math.abs(rh) <= EPSLN) ? this.phi0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n      x *= sinz * this.cosph0;\n      y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n      break;\n    case this.N_POLE:\n      y = -y;\n      phi = HALF_PI - phi;\n      break;\n    case this.S_POLE:\n      phi -= HALF_PI;\n      break;\n    }\n    lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\n  }\n  else {\n    ab = 0;\n    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n      x /= this.dd;\n      y *= this.dd;\n      rho = Math.sqrt(x * x + y * y);\n      if (rho < EPSLN) {\n        p.x = 0;\n        p.y = this.phi0;\n        return p;\n      }\n      sCe = 2 * Math.asin(0.5 * rho / this.rq);\n      cCe = Math.cos(sCe);\n      x *= (sCe = Math.sin(sCe));\n      if (this.mode === this.OBLIQ) {\n        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n        q = this.qp * ab;\n        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n      }\n      else {\n        ab = y * sCe / rho;\n        q = this.qp * ab;\n        y = rho * cCe;\n      }\n    }\n    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n      if (this.mode === this.N_POLE) {\n        y = -y;\n      }\n      q = (x * x + y * y);\n      if (!q) {\n        p.x = 0;\n        p.y = this.phi0;\n        return p;\n      }\n      ab = 1 - q / this.qp;\n      if (this.mode === this.S_POLE) {\n        ab = -ab;\n      }\n    }\n    lam = Math.atan2(x, y);\n    phi = authlat(Math.asin(ab), this.apa);\n  }\n\n  p.x = adjust_lon(this.long0 + lam);\n  p.y = phi;\n  return p;\n}\n\n/* determine latitude from authalic latitude */\nvar P00 = 0.33333333333333333333;\n\nvar P01 = 0.17222222222222222222;\nvar P02 = 0.10257936507936507936;\nvar P10 = 0.06388888888888888888;\nvar P11 = 0.06640211640211640211;\nvar P20 = 0.01641501294219154443;\n\nfunction authset(es) {\n  var t;\n  var APA = [];\n  APA[0] = es * P00;\n  t = es * es;\n  APA[0] += t * P01;\n  APA[1] = t * P10;\n  t *= es;\n  APA[0] += t * P02;\n  APA[1] += t * P11;\n  APA[2] = t * P20;\n  return APA;\n}\n\nfunction authlat(beta, APA) {\n  var t = beta + beta;\n  return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\n}\n\nexport var names = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  S_POLE: S_POLE,\n  N_POLE: N_POLE,\n  EQUIT: EQUIT,\n  OBLIQ: OBLIQ\n};\n","export default function(x) {\n  if (Math.abs(x) > 1) {\n    x = (x > 1) ? 1 : -1;\n  }\n  return Math.asin(x);\n}","import msfnz from '../common/msfnz';\nimport qsfnz from '../common/qsfnz';\nimport adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e3 = Math.sqrt(this.es);\n\n  this.sin_po = Math.sin(this.lat1);\n  this.cos_po = Math.cos(this.lat1);\n  this.t1 = this.sin_po;\n  this.con = this.sin_po;\n  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat2);\n  this.cos_po = Math.cos(this.lat2);\n  this.t2 = this.sin_po;\n  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n  this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  this.sin_po = Math.sin(this.lat0);\n  this.cos_po = Math.cos(this.lat0);\n  this.t3 = this.sin_po;\n  this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n  }\n  else {\n    this.ns0 = this.con;\n  }\n  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n}\n\n/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n  -------------------------------------------------------------------*/\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  this.sin_phi = Math.sin(lat);\n  this.cos_phi = Math.cos(lat);\n\n  var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);\n  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n  var theta = this.ns0 * adjust_lon(lon - this.long0);\n  var x = rh1 * Math.sin(theta) + this.x0;\n  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh1, qs, con, theta, lon, lat;\n\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  if (this.ns0 >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n  con = rh1 * this.ns0 / this.a;\n  if (this.sphere) {\n    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n  }\n  else {\n    qs = (this.c - con * con) / this.ns0;\n    lat = this.phi1z(this.e3, qs);\n  }\n\n  lon = adjust_lon(theta / this.ns0 + this.long0);\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\n/* Function to compute phi1, the latitude for the inverse of the\n   Albers Conical Equal-Area projection.\n-------------------------------------------*/\nexport function phi1z(eccent, qs) {\n  var sinphi, cosphi, con, com, dphi;\n  var phi = asinz(0.5 * qs);\n  if (eccent < EPSLN) {\n    return phi;\n  }\n\n  var eccnts = eccent * eccent;\n  for (var i = 1; i <= 25; i++) {\n    sinphi = Math.sin(phi);\n    cosphi = Math.cos(phi);\n    con = eccent * sinphi;\n    com = 1 - con * con;\n    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi = phi + dphi;\n    if (Math.abs(dphi) <= 1e-7) {\n      return phi;\n    }\n  }\n  return null;\n}\n\nexport var names = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names,\n  phi1z: phi1z\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN} from '../constants/values';\n\n/*\n  reference:\n    Wolfram Mathworld \"Gnomonic Projection\"\n    http://mathworld.wolfram.com/GnomonicProjection.html\n    Accessed: 12th November 2009\n  */\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n  // Approximation for projecting points to the horizon (infinity)\n  this.infinity_dist = 1000 * this.a;\n  this.rc = 1;\n}\n\n/* Gnomonic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g;\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\n  }\n  else {\n\n    // Point is in the opposing hemisphere and is unprojectable\n    // We still need to return a reasonable point, so we project\n    // to infinity, on a bearing\n    // equivalent to the northern hemisphere equivalent\n    // This is a reasonable approximation for short shapes and lines that\n    // straddle the horizon.\n\n    x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\n    y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* Rho */\n  var sinc, cosc;\n  var c;\n  var lon, lat;\n\n  /* Inverse equations\n      -----------------*/\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  p.x /= this.k0;\n  p.y /= this.k0;\n\n  if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {\n    c = Math.atan2(rh, this.rc);\n    sinc = Math.sin(c);\n    cosc = Math.cos(c);\n\n    lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);\n    lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\n    lon = adjust_lon(this.long0 + lon);\n  }\n  else {\n    lat = this.phic0;\n    lon = 0;\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"gnom\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {HALF_PI} from '../constants/values';\n\nexport default function(eccent, q) {\n  var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\n  if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\n    if (q < 0) {\n      return (-1 * HALF_PI);\n    }\n    else {\n      return HALF_PI;\n    }\n  }\n  //var phi = 0.5* q/(1-eccent*eccent);\n  var phi = Math.asin(0.5 * q);\n  var dphi;\n  var sin_phi;\n  var cos_phi;\n  var con;\n  for (var i = 0; i < 30; i++) {\n    sin_phi = Math.sin(phi);\n    cos_phi = Math.cos(phi);\n    con = eccent * sin_phi;\n    dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n\n  //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\n  return NaN;\n}\n","import adjust_lon from '../common/adjust_lon';\nimport qsfnz from '../common/qsfnz';\nimport msfnz from '../common/msfnz';\nimport iqsfnz from '../common/iqsfnz';\n\n/*\n  reference:\n    \"Cartographic Projection Procedures for the UNIX Environment-\n    A User's Manual\" by Gerald I. Evenden,\n    USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n*/\nexport function init() {\n  //no-op\n  if (!this.sphere) {\n    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n  }\n}\n\n/* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  if (this.sphere) {\n    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n  }\n  else {\n    var qs = qsfnz(this.e, Math.sin(lat));\n    x = this.x0 + this.a * this.k0 * dlon;\n    y = this.y0 + this.a * qs * 0.5 / this.k0;\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n  }\n  else {\n    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"cea\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\n\n  this.rc = Math.cos(this.lat_ts);\n}\n\n// forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  var dlon = adjust_lon(lon - this.long0);\n  var dlat = adjust_lat(lat - this.lat0);\n  p.x = this.x0 + (this.a * dlon * this.rc);\n  p.y = this.y0 + (this.a * dlat);\n  return p;\n}\n\n// inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n\n  var x = p.x;\n  var y = p.y;\n\n  p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));\n  p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));\n  return p;\n}\n\nexport var names = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport mlfn from '../common/mlfn';\nimport {EPSLN} from '../constants/values';\n\nimport gN from '../common/gN';\nvar MAX_ITER = 20;\n\nexport function init() {\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n}\n\n/* Polyconic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var x, y, el;\n  var dlon = adjust_lon(lon - this.long0);\n  el = dlon * Math.sin(lat);\n  if (this.sphere) {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.a * this.lat0;\n    }\n    else {\n      x = this.a * Math.sin(el) / Math.tan(lat);\n      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n    }\n  }\n  else {\n    if (Math.abs(lat) <= EPSLN) {\n      x = this.a * dlon;\n      y = -1 * this.ml0;\n    }\n    else {\n      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n      x = nl * Math.sin(el);\n      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n    }\n\n  }\n  p.x = x + this.x0;\n  p.y = y + this.y0;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  var lon, lat, x, y, i;\n  var al, bl;\n  var phi, dphi;\n  x = p.x - this.x0;\n  y = p.y - this.y0;\n\n  if (this.sphere) {\n    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n      lon = adjust_lon(x / this.a + this.long0);\n      lat = 0;\n    }\n    else {\n      al = this.lat0 + y / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var tanphi;\n      for (i = MAX_ITER; i; --i) {\n        tanphi = Math.tan(phi);\n        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n        phi += dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n      lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\n    }\n  }\n  else {\n    if (Math.abs(y + this.ml0) <= EPSLN) {\n      lat = 0;\n      lon = adjust_lon(this.long0 + x / this.a);\n    }\n    else {\n\n      al = (this.ml0 + y) / this.a;\n      bl = x * x / this.a / this.a + al * al;\n      phi = al;\n      var cl, mln, mlnp, ma;\n      var con;\n      for (i = MAX_ITER; i; --i) {\n        con = this.e * Math.sin(phi);\n        cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n        ma = mln / this.a;\n        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n        phi -= dphi;\n        if (Math.abs(dphi) <= EPSLN) {\n          lat = phi;\n          break;\n        }\n      }\n\n      //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n    }\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Polyconic\", \"poly\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import {SEC_TO_RAD} from '../constants/values';\n\n/*\n  reference\n    Department of Land and Survey Technical Circular 1973/32\n      http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\n    OSG Technical Report 4.1\n      http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\n  */\n\n/**\n * iterations: Number of iterations to refine inverse transform.\n *     0 -> km accuracy\n *     1 -> m accuracy -- suitable for most mapping applications\n *     2 -> mm accuracy\n */\nexport var iterations = 1;\n\nexport function init() {\n  this.A = [];\n  this.A[1] = 0.6399175073;\n  this.A[2] = -0.1358797613;\n  this.A[3] = 0.063294409;\n  this.A[4] = -0.02526853;\n  this.A[5] = 0.0117879;\n  this.A[6] = -0.0055161;\n  this.A[7] = 0.0026906;\n  this.A[8] = -0.001333;\n  this.A[9] = 0.00067;\n  this.A[10] = -0.00034;\n\n  this.B_re = [];\n  this.B_im = [];\n  this.B_re[1] = 0.7557853228;\n  this.B_im[1] = 0;\n  this.B_re[2] = 0.249204646;\n  this.B_im[2] = 0.003371507;\n  this.B_re[3] = -0.001541739;\n  this.B_im[3] = 0.041058560;\n  this.B_re[4] = -0.10162907;\n  this.B_im[4] = 0.01727609;\n  this.B_re[5] = -0.26623489;\n  this.B_im[5] = -0.36249218;\n  this.B_re[6] = -0.6870983;\n  this.B_im[6] = -1.1651967;\n\n  this.C_re = [];\n  this.C_im = [];\n  this.C_re[1] = 1.3231270439;\n  this.C_im[1] = 0;\n  this.C_re[2] = -0.577245789;\n  this.C_im[2] = -0.007809598;\n  this.C_re[3] = 0.508307513;\n  this.C_im[3] = -0.112208952;\n  this.C_re[4] = -0.15094762;\n  this.C_im[4] = 0.18200602;\n  this.C_re[5] = 1.01418179;\n  this.C_im[5] = 1.64497696;\n  this.C_re[6] = 1.9660549;\n  this.C_im[6] = 2.5127645;\n\n  this.D = [];\n  this.D[1] = 1.5627014243;\n  this.D[2] = 0.5185406398;\n  this.D[3] = -0.03333098;\n  this.D[4] = -0.1052906;\n  this.D[5] = -0.0368594;\n  this.D[6] = 0.007317;\n  this.D[7] = 0.01220;\n  this.D[8] = 0.00394;\n  this.D[9] = -0.0013;\n}\n\n/**\n    New Zealand Map Grid Forward  - long/lat to x/y\n    long/lat in radians\n  */\nexport function forward(p) {\n  var n;\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lat = lat - this.lat0;\n  var delta_lon = lon - this.long0;\n\n  // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\n  // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\n  var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\n  var d_lambda = delta_lon;\n  var d_phi_n = 1; // d_phi^0\n\n  var d_psi = 0;\n  for (n = 1; n <= 10; n++) {\n    d_phi_n = d_phi_n * d_phi;\n    d_psi = d_psi + this.A[n] * d_phi_n;\n  }\n\n  // 2. Calculate theta\n  var th_re = d_psi;\n  var th_im = d_lambda;\n\n  // 3. Calculate z\n  var th_n_re = 1;\n  var th_n_im = 0; // theta^0\n  var th_n_re1;\n  var th_n_im1;\n\n  var z_re = 0;\n  var z_im = 0;\n  for (n = 1; n <= 6; n++) {\n    th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n    th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n    th_n_re = th_n_re1;\n    th_n_im = th_n_im1;\n    z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\n    z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\n  }\n\n  // 4. Calculate easting and northing\n  p.x = (z_im * this.a) + this.x0;\n  p.y = (z_re * this.a) + this.y0;\n\n  return p;\n}\n\n/**\n    New Zealand Map Grid Inverse  -  x/y to long/lat\n  */\nexport function inverse(p) {\n  var n;\n  var x = p.x;\n  var y = p.y;\n\n  var delta_x = x - this.x0;\n  var delta_y = y - this.y0;\n\n  // 1. Calculate z\n  var z_re = delta_y / this.a;\n  var z_im = delta_x / this.a;\n\n  // 2a. Calculate theta - first approximation gives km accuracy\n  var z_n_re = 1;\n  var z_n_im = 0; // z^0\n  var z_n_re1;\n  var z_n_im1;\n\n  var th_re = 0;\n  var th_im = 0;\n  for (n = 1; n <= 6; n++) {\n    z_n_re1 = z_n_re * z_re - z_n_im * z_im;\n    z_n_im1 = z_n_im * z_re + z_n_re * z_im;\n    z_n_re = z_n_re1;\n    z_n_im = z_n_im1;\n    th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\n    th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\n  }\n\n  // 2b. Iterate to refine the accuracy of the calculation\n  //        0 iterations gives km accuracy\n  //        1 iteration gives m accuracy -- good enough for most mapping applications\n  //        2 iterations bives mm accuracy\n  for (var i = 0; i < this.iterations; i++) {\n    var th_n_re = th_re;\n    var th_n_im = th_im;\n    var th_n_re1;\n    var th_n_im1;\n\n    var num_re = z_re;\n    var num_im = z_im;\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    th_n_re = 1;\n    th_n_im = 0;\n    var den_re = this.B_re[1];\n    var den_im = this.B_im[1];\n    for (n = 2; n <= 6; n++) {\n      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n      th_n_re = th_n_re1;\n      th_n_im = th_n_im1;\n      den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n      den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n    }\n\n    // Complex division\n    var den2 = den_re * den_re + den_im * den_im;\n    th_re = (num_re * den_re + num_im * den_im) / den2;\n    th_im = (num_im * den_re - num_re * den_im) / den2;\n  }\n\n  // 3. Calculate d_phi              ...                                    // and d_lambda\n  var d_psi = th_re;\n  var d_lambda = th_im;\n  var d_psi_n = 1; // d_psi^0\n\n  var d_phi = 0;\n  for (n = 1; n <= 9; n++) {\n    d_psi_n = d_psi_n * d_psi;\n    d_phi = d_phi + this.D[n] * d_psi_n;\n  }\n\n  // 4. Calculate latitude and longitude\n  // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\n  var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);\n  var lon = this.long0 + d_lambda;\n\n  p.x = lon;\n  p.y = lat;\n\n  return p;\n}\n\nexport var names = [\"New_Zealand_Map_Grid\", \"nzmg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\n/*\n  reference\n    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n  */\n\n\n/* Initialize the Miller Cylindrical projection\n  -------------------------------------------*/\nexport function init() {\n  //no-op\n}\n\n/* Miller Cylindrical forward equations--mapping lat,long to x,y\n    ------------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x = this.x0 + this.a * dlon;\n  var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Miller Cylindrical inverse equations--mapping x,y to lat/long\n    ------------------------------------------------------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n\n  var lon = adjust_lon(this.long0 + p.x / this.a);\n  var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Miller_Cylindrical\", \"mill\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport pj_enfn from '../common/pj_enfn';\nvar MAX_ITER = 20;\nimport pj_mlfn from '../common/pj_mlfn';\nimport pj_inv_mlfn from '../common/pj_inv_mlfn';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n\nexport function init() {\n  /* Place parameters in static storage for common use\n    -------------------------------------------------*/\n\n\n  if (!this.sphere) {\n    this.en = pj_enfn(this.es);\n  }\n  else {\n    this.n = 1;\n    this.m = 0;\n    this.es = 0;\n    this.C_y = Math.sqrt((this.m + 1) / this.n);\n    this.C_x = this.C_y / (this.m + 1);\n  }\n\n}\n\n/* Sinusoidal forward equations--mapping lat,long to x,y\n  -----------------------------------------------------*/\nexport function forward(p) {\n  var x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n    -----------------*/\n  lon = adjust_lon(lon - this.long0);\n\n  if (this.sphere) {\n    if (!this.m) {\n      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n    }\n    else {\n      var k = this.n * Math.sin(lat);\n      for (var i = MAX_ITER; i; --i) {\n        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n        lat -= V;\n        if (Math.abs(V) < EPSLN) {\n          break;\n        }\n      }\n    }\n    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n    y = this.a * this.C_y * lat;\n\n  }\n  else {\n\n    var s = Math.sin(lat);\n    var c = Math.cos(lat);\n    y = this.a * pj_mlfn(lat, s, c, this.en);\n    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n  }\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var lat, temp, lon, s;\n\n  p.x -= this.x0;\n  lon = p.x / this.a;\n  p.y -= this.y0;\n  lat = p.y / this.a;\n\n  if (this.sphere) {\n    lat /= this.C_y;\n    lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n    if (this.m) {\n      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n    }\n    else if (this.n !== 1) {\n      lat = asinz(Math.sin(lat) / this.n);\n    }\n    lon = adjust_lon(lon + this.long0);\n    lat = adjust_lat(lat);\n  }\n  else {\n    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n    s = Math.abs(lat);\n    if (s < HALF_PI) {\n      s = Math.sin(lat);\n      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n      //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n      lon = adjust_lon(temp);\n    }\n    else if ((s - EPSLN) < HALF_PI) {\n      lon = this.long0;\n    }\n  }\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Sinusoidal\", \"sinu\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nexport function init() {}\nimport {EPSLN} from '../constants/values';\n/* Mollweide forward equations--mapping lat,long to x,y\n    ----------------------------------------------------*/\nexport function forward(p) {\n\n  /* Forward equations\n      -----------------*/\n  var lon = p.x;\n  var lat = p.y;\n\n  var delta_lon = adjust_lon(lon - this.long0);\n  var theta = lat;\n  var con = Math.PI * Math.sin(lat);\n\n  /* Iterate using the Newton-Raphson method to find theta\n      -----------------------------------------------------*/\n  while (true) {\n    var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\n    theta += delta_theta;\n    if (Math.abs(delta_theta) < EPSLN) {\n      break;\n    }\n  }\n  theta /= 2;\n\n  /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\n       this is done here because of precision problems with \"cos(theta)\"\n       --------------------------------------------------------------------------*/\n  if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\n    delta_lon = 0;\n  }\n  var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\n  var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\n\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var theta;\n  var arg;\n\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  arg = p.y / (1.4142135623731 * this.a);\n\n  /* Because of division by zero problems, 'arg' can not be 1.  Therefore\n       a number very close to one is used instead.\n       -------------------------------------------------------------------*/\n  if (Math.abs(arg) > 0.999999999999) {\n    arg = 0.999999999999;\n  }\n  theta = Math.asin(arg);\n  var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));\n  if (lon < (-Math.PI)) {\n    lon = -Math.PI;\n  }\n  if (lon > Math.PI) {\n    lon = Math.PI;\n  }\n  arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\n  if (Math.abs(arg) > 1) {\n    arg = 1;\n  }\n  var lat = Math.asin(arg);\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Mollweide\", \"moll\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport msfnz from '../common/msfnz';\nimport mlfn from '../common/mlfn';\nimport adjust_lon from '../common/adjust_lon';\nimport adjust_lat from '../common/adjust_lat';\nimport imlfn from '../common/imlfn';\nimport {EPSLN} from '../constants/values';\n\nexport function init() {\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  // Standard Parallels cannot be equal and on opposite sides of the equator\n  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n    return;\n  }\n  this.lat2 = this.lat2 || this.lat1;\n  this.temp = this.b / this.a;\n  this.es = 1 - Math.pow(this.temp, 2);\n  this.e = Math.sqrt(this.es);\n  this.e0 = e0fn(this.es);\n  this.e1 = e1fn(this.es);\n  this.e2 = e2fn(this.es);\n  this.e3 = e3fn(this.es);\n\n  this.sinphi = Math.sin(this.lat1);\n  this.cosphi = Math.cos(this.lat1);\n\n  this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\n  this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\n\n  if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\n    this.ns = this.sinphi;\n  }\n  else {\n    this.sinphi = Math.sin(this.lat2);\n    this.cosphi = Math.cos(this.lat2);\n    this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\n    this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\n    this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\n  }\n  this.g = this.ml1 + this.ms1 / this.ns;\n  this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n  this.rh = this.a * (this.g - this.ml0);\n}\n\n/* Equidistant Conic forward equations--mapping lat,long to x,y\n  -----------------------------------------------------------*/\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var rh1;\n\n  /* Forward equations\n      -----------------*/\n  if (this.sphere) {\n    rh1 = this.a * (this.g - lat);\n  }\n  else {\n    var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n    rh1 = this.a * (this.g - ml);\n  }\n  var theta = this.ns * adjust_lon(lon - this.long0);\n  var x = this.x0 + rh1 * Math.sin(theta);\n  var y = this.y0 + this.rh - rh1 * Math.cos(theta);\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Inverse equations\n  -----------------*/\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y = this.rh - p.y + this.y0;\n  var con, rh1, lat, lon;\n  if (this.ns >= 0) {\n    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n    con = 1;\n  }\n  else {\n    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n    con = -1;\n  }\n  var theta = 0;\n  if (rh1 !== 0) {\n    theta = Math.atan2(con * p.x, con * p.y);\n  }\n\n  if (this.sphere) {\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    lat = adjust_lat(this.g - rh1 / this.a);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    var ml = this.g - rh1 / this.a;\n    lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\n    lon = adjust_lon(this.long0 + theta / this.ns);\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n\n}\n\nexport var names = [\"Equidistant_Conic\", \"eqdc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\n\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport asinz from '../common/asinz';\n\n/* Initialize the Van Der Grinten projection\n  ----------------------------------------*/\nexport function init() {\n  //this.R = 6370997; //Radius of earth\n  this.R = this.a;\n}\n\nexport function forward(p) {\n\n  var lon = p.x;\n  var lat = p.y;\n\n  /* Forward equations\n    -----------------*/\n  var dlon = adjust_lon(lon - this.long0);\n  var x, y;\n\n  if (Math.abs(lat) <= EPSLN) {\n    x = this.x0 + this.R * dlon;\n    y = this.y0;\n  }\n  var theta = asinz(2 * Math.abs(lat / Math.PI));\n  if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {\n    x = this.x0;\n    if (lat >= 0) {\n      y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\n    }\n    else {\n      y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\n    }\n    //  return(OK);\n  }\n  var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));\n  var asq = al * al;\n  var sinth = Math.sin(theta);\n  var costh = Math.cos(theta);\n\n  var g = costh / (sinth + costh - 1);\n  var gsq = g * g;\n  var m = g * (2 / sinth - 1);\n  var msq = m * m;\n  var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\n  if (dlon < 0) {\n    con = -con;\n  }\n  x = this.x0 + con;\n  //con = Math.abs(con / (Math.PI * this.R));\n  var q = asq + g;\n  con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\n  if (lat >= 0) {\n    //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 + con;\n  }\n  else {\n    //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n    y = this.y0 - con;\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\n/* Van Der Grinten inverse equations--mapping x,y to lat/long\n  ---------------------------------------------------------*/\nexport function inverse(p) {\n  var lon, lat;\n  var xx, yy, xys, c1, c2, c3;\n  var a1;\n  var m1;\n  var con;\n  var th1;\n  var d;\n\n  /* inverse equations\n    -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  con = Math.PI * this.R;\n  xx = p.x / con;\n  yy = p.y / con;\n  xys = xx * xx + yy * yy;\n  c1 = -Math.abs(yy) * (1 + xys);\n  c2 = c1 - 2 * yy * yy + xx * xx;\n  c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\n  d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\n  a1 = (c1 - c2 * c2 / 3 / c3) / c3;\n  m1 = 2 * Math.sqrt(-a1 / 3);\n  con = ((3 * d) / a1) / m1;\n  if (Math.abs(con) > 1) {\n    if (con >= 0) {\n      con = 1;\n    }\n    else {\n      con = -1;\n    }\n  }\n  th1 = Math.acos(con) / 3;\n  if (p.y >= 0) {\n    lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n  else {\n    lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n  }\n\n  if (Math.abs(xx) < EPSLN) {\n    lon = this.long0;\n  }\n  else {\n    lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\n  }\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport {HALF_PI, EPSLN} from '../constants/values';\n\nimport mlfn from '../common/mlfn';\nimport e0fn from '../common/e0fn';\nimport e1fn from '../common/e1fn';\nimport e2fn from '../common/e2fn';\nimport e3fn from '../common/e3fn';\nimport gN from '../common/gN';\nimport asinz from '../common/asinz';\nimport imlfn from '../common/imlfn';\n\n\n\nexport function init() {\n  this.sin_p12 = Math.sin(this.lat0);\n  this.cos_p12 = Math.cos(this.lat0);\n}\n\nexport function forward(p) {\n  var lon = p.x;\n  var lat = p.y;\n  var sinphi = Math.sin(p.y);\n  var cosphi = Math.cos(p.y);\n  var dlon = adjust_lon(lon - this.long0);\n  var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\n  if (this.sphere) {\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //default case\n      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n      c = Math.acos(cos_c);\n      kp = c / Math.sin(c);\n      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n      return p;\n    }\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South Pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n      return p;\n    }\n    else {\n      //Default case\n      tanphi = sinphi / cosphi;\n      Nl1 = gN(this.a, this.e, this.sin_p12);\n      Nl = gN(this.a, this.e, sinphi);\n      psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\n      Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\n      if (Az === 0) {\n        s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\n        s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n      }\n      else {\n        s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\n      }\n      G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\n      H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\n      GH = G * H;\n      Hs = H * H;\n      s2 = s * s;\n      s3 = s2 * s;\n      s4 = s3 * s;\n      s5 = s4 * s;\n      c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\n      p.x = this.x0 + c * Math.sin(Az);\n      p.y = this.y0 + c * Math.cos(Az);\n      return p;\n    }\n  }\n\n\n}\n\nexport function inverse(p) {\n  p.x -= this.x0;\n  p.y -= this.y0;\n  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F;\n  if (this.sphere) {\n    rh = Math.sqrt(p.x * p.x + p.y * p.y);\n    if (rh > (2 * HALF_PI * this.a)) {\n      return;\n    }\n    z = rh / this.a;\n\n    sinz = Math.sin(z);\n    cosz = Math.cos(z);\n\n    lon = this.long0;\n    if (Math.abs(rh) <= EPSLN) {\n      lat = this.lat0;\n    }\n    else {\n      lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\n      con = Math.abs(this.lat0) - HALF_PI;\n      if (Math.abs(con) <= EPSLN) {\n        if (this.lat0 >= 0) {\n          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n        }\n        else {\n          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n        }\n      }\n      else {\n        /*con = cosz - this.sin_p12 * Math.sin(lat);\n        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n          //no-op, just keep the lon value as is\n        } else {\n          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n        }*/\n        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n      }\n    }\n\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  else {\n    e0 = e0fn(this.es);\n    e1 = e1fn(this.es);\n    e2 = e2fn(this.es);\n    e3 = e3fn(this.es);\n    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n      //North pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = Mlp - rh;\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n      //South pole case\n      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      M = rh - Mlp;\n\n      lat = imlfn(M / this.a, e0, e1, e2, e3);\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n    else {\n      //default case\n      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n      Az = Math.atan2(p.x, p.y);\n      N1 = gN(this.a, this.e, this.sin_p12);\n      cosAz = Math.cos(Az);\n      tmp = this.e * this.cos_p12 * cosAz;\n      A = -tmp * tmp / (1 - this.es);\n      B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\n      D = rh / N1;\n      Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\n      F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\n      psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\n      lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\n      lat = Math.atan((1 - this.es * F * this.sin_p12 / Math.sin(psi)) * Math.tan(psi) / (1 - this.es));\n      p.x = lon;\n      p.y = lat;\n      return p;\n    }\n  }\n\n}\n\nexport var names = [\"Azimuthal_Equidistant\", \"aeqd\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import adjust_lon from '../common/adjust_lon';\nimport asinz from '../common/asinz';\nimport {EPSLN, HALF_PI} from '../constants/values';\n\nexport function init() {\n  //double temp;      /* temporary variable    */\n\n  /* Place parameters in static storage for common use\n      -------------------------------------------------*/\n  this.sin_p14 = Math.sin(this.lat0);\n  this.cos_p14 = Math.cos(this.lat0);\n}\n\n/* Orthographic forward equations--mapping lat,long to x,y\n    ---------------------------------------------------*/\nexport function forward(p) {\n  var sinphi, cosphi; /* sin and cos value        */\n  var dlon; /* delta longitude value      */\n  var coslon; /* cos of longitude        */\n  var ksp; /* scale factor          */\n  var g, x, y;\n  var lon = p.x;\n  var lat = p.y;\n  /* Forward equations\n      -----------------*/\n  dlon = adjust_lon(lon - this.long0);\n\n  sinphi = Math.sin(lat);\n  cosphi = Math.cos(lat);\n\n  coslon = Math.cos(dlon);\n  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n  ksp = 1;\n  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n    x = this.a * ksp * cosphi * Math.sin(dlon);\n    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n  }\n  p.x = x;\n  p.y = y;\n  return p;\n}\n\nexport function inverse(p) {\n  var rh; /* height above ellipsoid      */\n  var z; /* angle          */\n  var sinz, cosz; /* sin of z and cos of z      */\n  var con;\n  var lon, lat;\n  /* Inverse equations\n      -----------------*/\n  p.x -= this.x0;\n  p.y -= this.y0;\n  rh = Math.sqrt(p.x * p.x + p.y * p.y);\n  z = asinz(rh / this.a);\n\n  sinz = Math.sin(z);\n  cosz = Math.cos(z);\n\n  lon = this.long0;\n  if (Math.abs(rh) <= EPSLN) {\n    lat = this.lat0;\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\n  con = Math.abs(this.lat0) - HALF_PI;\n  if (Math.abs(con) <= EPSLN) {\n    if (this.lat0 >= 0) {\n      lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n    }\n    else {\n      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n    }\n    p.x = lon;\n    p.y = lat;\n    return p;\n  }\n  lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n  p.x = lon;\n  p.y = lat;\n  return p;\n}\n\nexport var names = [\"ortho\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","// QSC projection rewritten from the original PROJ4\n// https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c\n\nimport {EPSLN, TWO_PI, SPI, HALF_PI, FORTPI} from '../constants/values';\n\n/* constants */\nvar FACE_ENUM = {\n    FRONT: 1,\n    RIGHT: 2,\n    BACK: 3,\n    LEFT: 4,\n    TOP: 5,\n    BOTTOM: 6\n};\n\nvar AREA_ENUM = {\n    AREA_0: 1,\n    AREA_1: 2,\n    AREA_2: 3,\n    AREA_3: 4\n};\n\nexport function init() {\n\n  this.x0 = this.x0 || 0;\n  this.y0 = this.y0 || 0;\n  this.lat0 = this.lat0 || 0;\n  this.long0 = this.long0 || 0;\n  this.lat_ts = this.lat_ts || 0;\n  this.title = this.title || \"Quadrilateralized Spherical Cube\";\n\n  /* Determine the cube face from the center of projection. */\n  if (this.lat0 >= HALF_PI - FORTPI / 2.0) {\n    this.face = FACE_ENUM.TOP;\n  } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {\n    this.face = FACE_ENUM.BOTTOM;\n  } else if (Math.abs(this.long0) <= FORTPI) {\n    this.face = FACE_ENUM.FRONT;\n  } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {\n    this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;\n  } else {\n    this.face = FACE_ENUM.BACK;\n  }\n\n  /* Fill in useful values for the ellipsoid <-> sphere shift\n   * described in [LK12]. */\n  if (this.es !== 0) {\n    this.one_minus_f = 1 - (this.a - this.b) / this.a;\n    this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;\n  }\n}\n\n// QSC forward equations--mapping lat,long to x,y\n// -----------------------------------------------------------------\nexport function forward(p) {\n  var xy = {x: 0, y: 0};\n  var lat, lon;\n  var theta, phi;\n  var t, mu;\n  /* nu; */\n  var area = {value: 0};\n\n  // move lon according to projection's lon\n  p.x -= this.long0;\n\n  /* Convert the geodetic latitude to a geocentric latitude.\n   * This corresponds to the shift from the ellipsoid to the sphere\n   * described in [LK12]. */\n  if (this.es !== 0) {//if (P->es != 0) {\n    lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));\n  } else {\n    lat = p.y;\n  }\n\n  /* Convert the input lat, lon into theta, phi as used by QSC.\n   * This depends on the cube face and the area on it.\n   * For the top and bottom face, we can compute theta and phi\n   * directly from phi, lam. For the other faces, we must use\n   * unit sphere cartesian coordinates as an intermediate step. */\n  lon = p.x; //lon = lp.lam;\n  if (this.face === FACE_ENUM.TOP) {\n    phi = HALF_PI - lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = lon - HALF_PI;\n    } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = (lon > 0.0 ? lon - SPI : lon + SPI);\n    } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = lon + HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = lon;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = HALF_PI + lat;\n    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n      theta = -lon + HALF_PI;\n    } else if (lon < FORTPI && lon >= -FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta = -lon;\n    } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = -lon - HALF_PI;\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);\n    }\n  } else {\n    var q, r, s;\n    var sinlat, coslat;\n    var sinlon, coslon;\n\n    if (this.face === FACE_ENUM.RIGHT) {\n      lon = qsc_shift_lon_origin(lon, +HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lon = qsc_shift_lon_origin(lon, +SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lon = qsc_shift_lon_origin(lon, -HALF_PI);\n    }\n    sinlat = Math.sin(lat);\n    coslat = Math.cos(lat);\n    sinlon = Math.sin(lon);\n    coslon = Math.cos(lon);\n    q = coslat * coslon;\n    r = coslat * sinlon;\n    s = sinlat;\n\n    if (this.face === FACE_ENUM.FRONT) {\n      phi = Math.acos(q);\n      theta = qsc_fwd_equat_face_theta(phi, s, r, area);\n    } else if (this.face === FACE_ENUM.RIGHT) {\n      phi = Math.acos(r);\n      theta = qsc_fwd_equat_face_theta(phi, s, -q, area);\n    } else if (this.face === FACE_ENUM.BACK) {\n      phi = Math.acos(-q);\n      theta = qsc_fwd_equat_face_theta(phi, s, -r, area);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      phi = Math.acos(-r);\n      theta = qsc_fwd_equat_face_theta(phi, s, q, area);\n    } else {\n      /* Impossible */\n      phi = theta = 0;\n      area.value = AREA_ENUM.AREA_0;\n    }\n  }\n\n  /* Compute mu and nu for the area of definition.\n   * For mu, see Eq. (3-21) in [OL76], but note the typos:\n   * compare with Eq. (3-14). For nu, see Eq. (3-38). */\n  mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));\n  t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));\n\n  /* Apply the result to the real area. */\n  if (area.value === AREA_ENUM.AREA_1) {\n    mu += HALF_PI;\n  } else if (area.value === AREA_ENUM.AREA_2) {\n    mu += SPI;\n  } else if (area.value === AREA_ENUM.AREA_3) {\n    mu += 1.5 * SPI;\n  }\n\n  /* Now compute x, y from mu and nu */\n  xy.x = t * Math.cos(mu);\n  xy.y = t * Math.sin(mu);\n  xy.x = xy.x * this.a + this.x0;\n  xy.y = xy.y * this.a + this.y0;\n\n  p.x = xy.x;\n  p.y = xy.y;\n  return p;\n}\n\n// QSC inverse equations--mapping x,y to lat/long\n// -----------------------------------------------------------------\nexport function inverse(p) {\n  var lp = {lam: 0, phi: 0};\n  var mu, nu, cosmu, tannu;\n  var tantheta, theta, cosphi, phi;\n  var t;\n  var area = {value: 0};\n\n  /* de-offset */\n  p.x = (p.x - this.x0) / this.a;\n  p.y = (p.y - this.y0) / this.a;\n\n  /* Convert the input x, y to the mu and nu angles as used by QSC.\n   * This depends on the area of the cube face. */\n  nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));\n  mu = Math.atan2(p.y, p.x);\n  if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_0;\n  } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {\n    area.value = AREA_ENUM.AREA_1;\n    mu -= HALF_PI;\n  } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {\n    area.value = AREA_ENUM.AREA_2;\n    mu = (mu < 0.0 ? mu + SPI : mu - SPI);\n  } else {\n    area.value = AREA_ENUM.AREA_3;\n    mu += HALF_PI;\n  }\n\n  /* Compute phi and theta for the area of definition.\n   * The inverse projection is not described in the original paper, but some\n   * good hints can be found here (as of 2011-12-14):\n   * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302\n   * (search for \"Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>\") */\n  t = (SPI / 12) * Math.tan(mu);\n  tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));\n  theta = Math.atan(tantheta);\n  cosmu = Math.cos(mu);\n  tannu = Math.tan(nu);\n  cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));\n  if (cosphi < -1) {\n    cosphi = -1;\n  } else if (cosphi > +1) {\n    cosphi = +1;\n  }\n\n  /* Apply the result to the real area on the cube face.\n   * For the top and bottom face, we can compute phi and lam directly.\n   * For the other faces, we must use unit sphere cartesian coordinates\n   * as an intermediate step. */\n  if (this.face === FACE_ENUM.TOP) {\n    phi = Math.acos(cosphi);\n    lp.phi = HALF_PI - phi;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = theta;\n    }\n  } else if (this.face === FACE_ENUM.BOTTOM) {\n    phi = Math.acos(cosphi);\n    lp.phi = phi - HALF_PI;\n    if (area.value === AREA_ENUM.AREA_0) {\n      lp.lam = -theta + HALF_PI;\n    } else if (area.value === AREA_ENUM.AREA_1) {\n      lp.lam = -theta;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      lp.lam = -theta - HALF_PI;\n    } else /* area.value == AREA_ENUM.AREA_3 */ {\n      lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);\n    }\n  } else {\n    /* Compute phi and lam via cartesian unit sphere coordinates. */\n    var q, r, s;\n    q = cosphi;\n    t = q * q;\n    if (t >= 1) {\n      s = 0;\n    } else {\n      s = Math.sqrt(1 - t) * Math.sin(theta);\n    }\n    t += s * s;\n    if (t >= 1) {\n      r = 0;\n    } else {\n      r = Math.sqrt(1 - t);\n    }\n    /* Rotate q,r,s into the correct area. */\n    if (area.value === AREA_ENUM.AREA_1) {\n      t = r;\n      r = -s;\n      s = t;\n    } else if (area.value === AREA_ENUM.AREA_2) {\n      r = -r;\n      s = -s;\n    } else if (area.value === AREA_ENUM.AREA_3) {\n      t = r;\n      r = s;\n      s = -t;\n    }\n    /* Rotate q,r,s into the correct cube face. */\n    if (this.face === FACE_ENUM.RIGHT) {\n      t = q;\n      q = -r;\n      r = t;\n    } else if (this.face === FACE_ENUM.BACK) {\n      q = -q;\n      r = -r;\n    } else if (this.face === FACE_ENUM.LEFT) {\n      t = q;\n      q = r;\n      r = -t;\n    }\n    /* Now compute phi and lam from the unit sphere coordinates. */\n    lp.phi = Math.acos(-s) - HALF_PI;\n    lp.lam = Math.atan2(r, q);\n    if (this.face === FACE_ENUM.RIGHT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);\n    } else if (this.face === FACE_ENUM.BACK) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);\n    } else if (this.face === FACE_ENUM.LEFT) {\n      lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);\n    }\n  }\n\n  /* Apply the shift from the sphere to the ellipsoid as described\n   * in [LK12]. */\n  if (this.es !== 0) {\n    var invert_sign;\n    var tanphi, xa;\n    invert_sign = (lp.phi < 0 ? 1 : 0);\n    tanphi = Math.tan(lp.phi);\n    xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);\n    lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));\n    if (invert_sign) {\n      lp.phi = -lp.phi;\n    }\n  }\n\n  lp.lam += this.long0;\n  p.x = lp.lam;\n  p.y = lp.phi;\n  return p;\n}\n\n/* Helper function for forward projection: compute the theta angle\n * and determine the area number. */\nfunction qsc_fwd_equat_face_theta(phi, y, x, area) {\n  var theta;\n  if (phi < EPSLN) {\n    area.value = AREA_ENUM.AREA_0;\n    theta = 0.0;\n  } else {\n    theta = Math.atan2(y, x);\n    if (Math.abs(theta) <= FORTPI) {\n      area.value = AREA_ENUM.AREA_0;\n    } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {\n      area.value = AREA_ENUM.AREA_1;\n      theta -= HALF_PI;\n    } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {\n      area.value = AREA_ENUM.AREA_2;\n      theta = (theta >= 0.0 ? theta - SPI : theta + SPI);\n    } else {\n      area.value = AREA_ENUM.AREA_3;\n      theta += HALF_PI;\n    }\n  }\n  return theta;\n}\n\n/* Helper function: shift the longitude. */\nfunction qsc_shift_lon_origin(lon, offset) {\n  var slon = lon + offset;\n  if (slon < -SPI) {\n    slon += TWO_PI;\n  } else if (slon > +SPI) {\n    slon -= TWO_PI;\n  }\n  return slon;\n}\n\nexport var names = [\"Quadrilateralized Spherical Cube\", \"Quadrilateralized_Spherical_Cube\", \"qsc\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n\n","// Robinson projection\n// Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c\n// Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039\n\nimport {HALF_PI, D2R, R2D, EPSLN} from '../constants/values';\nimport adjust_lon from '../common/adjust_lon';\n\nvar COEFS_X = [\n    [1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06],\n    [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06],\n    [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07],\n    [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06],\n    [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06],\n    [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08],\n    [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06],\n    [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06],\n    [0.9216, -0.00467746, -0.00010457, 4.81243e-06],\n    [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06],\n    [0.8679, -0.00609363, -0.000113898, 3.32484e-06],\n    [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07],\n    [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07],\n    [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06],\n    [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06],\n    [0.6732, -0.00986209, -0.000199569, 1.91974e-05],\n    [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],\n    [0.5722, -0.00906601, 0.000182, 6.24051e-06],\n    [0.5322, -0.00677797, 0.000275608, 6.24051e-06]\n];\n\nvar COEFS_Y = [\n    [-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11],\n    [0.0620, 0.0124, -1.26793e-09, 4.22642e-10],\n    [0.1240, 0.0124, 5.07171e-09, -1.60604e-09],\n    [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09],\n    [0.2480, 0.0124002, 7.10039e-08, -2.24e-08],\n    [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08],\n    [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07],\n    [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07],\n    [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07],\n    [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07],\n    [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07],\n    [0.6769, 0.011713, -3.20223e-05, -5.16405e-07],\n    [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07],\n    [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06],\n    [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09],\n    [0.8936, 0.00969686, -6.4636e-05, -8.547e-06],\n    [0.9394, 0.00840947, -0.000192841, -4.2106e-06],\n    [0.9761, 0.00616527, -0.000256, -4.2106e-06],\n    [1.0000, 0.00328947, -0.000319159, -4.2106e-06]\n];\n\nvar FXC = 0.8487;\nvar FYC = 1.3523;\nvar C1 = R2D/5; // rad to 5-degree interval\nvar RC1 = 1/C1;\nvar NODES = 18;\n\nvar poly3_val = function(coefs, x) {\n    return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));\n};\n\nvar poly3_der = function(coefs, x) {\n    return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);\n};\n\nfunction newton_rapshon(f_df, start, max_err, iters) {\n    var x = start;\n    for (; iters; --iters) {\n        var upd = f_df(x);\n        x -= upd;\n        if (Math.abs(upd) < max_err) {\n            break;\n        }\n    }\n    return x;\n}\n\nexport function init() {\n    this.x0 = this.x0 || 0;\n    this.y0 = this.y0 || 0;\n    this.long0 = this.long0 || 0;\n    this.es = 0;\n    this.title = this.title || \"Robinson\";\n}\n\nexport function forward(ll) {\n    var lon = adjust_lon(ll.x - this.long0);\n\n    var dphi = Math.abs(ll.y);\n    var i = Math.floor(dphi * C1);\n    if (i < 0) {\n        i = 0;\n    } else if (i >= NODES) {\n        i = NODES - 1;\n    }\n    dphi = R2D * (dphi - RC1 * i);\n    var xy = {\n        x: poly3_val(COEFS_X[i], dphi) * lon,\n        y: poly3_val(COEFS_Y[i], dphi)\n    };\n    if (ll.y < 0) {\n        xy.y = -xy.y;\n    }\n\n    xy.x = xy.x * this.a * FXC + this.x0;\n    xy.y = xy.y * this.a * FYC + this.y0;\n    return xy;\n}\n\nexport function inverse(xy) {\n    var ll = {\n        x: (xy.x - this.x0) / (this.a * FXC),\n        y: Math.abs(xy.y - this.y0) / (this.a * FYC)\n    };\n\n    if (ll.y >= 1) { // pathologic case\n        ll.x /= COEFS_X[NODES][0];\n        ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;\n    } else {\n        // find table interval\n        var i = Math.floor(ll.y * NODES);\n        if (i < 0) {\n            i = 0;\n        } else if (i >= NODES) {\n            i = NODES - 1;\n        }\n        for (;;) {\n            if (COEFS_Y[i][0] > ll.y) {\n                --i;\n            } else if (COEFS_Y[i+1][0] <= ll.y) {\n                ++i;\n            } else {\n                break;\n            }\n        }\n        // linear interpolation in 5 degree interval\n        var coefs = COEFS_Y[i];\n        var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);\n        // find t so that poly3_val(coefs, t) = ll.y\n        t = newton_rapshon(function(x) {\n            return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);\n        }, t, EPSLN, 100);\n\n        ll.x /= poly3_val(COEFS_X[i], t);\n        ll.y = (5 * i + t) * D2R;\n        if (xy.y < 0) {\n            ll.y = -ll.y;\n        }\n    }\n\n    ll.x = adjust_lon(ll.x + this.long0);\n    return ll;\n}\n\nexport var names = [\"Robinson\", \"robin\"];\nexport default {\n  init: init,\n  forward: forward,\n  inverse: inverse,\n  names: names\n};\n","import tmerc from './lib/projections/tmerc';\nimport etmerc from './lib/projections/etmerc';\nimport utm from './lib/projections/utm';\nimport sterea from './lib/projections/sterea';\nimport stere from './lib/projections/stere';\nimport somerc from './lib/projections/somerc';\nimport omerc from './lib/projections/omerc';\nimport lcc from './lib/projections/lcc';\nimport krovak from './lib/projections/krovak';\nimport cass from './lib/projections/cass';\nimport laea from './lib/projections/laea';\nimport aea from './lib/projections/aea';\nimport gnom from './lib/projections/gnom';\nimport cea from './lib/projections/cea';\nimport eqc from './lib/projections/eqc';\nimport poly from './lib/projections/poly';\nimport nzmg from './lib/projections/nzmg';\nimport mill from './lib/projections/mill';\nimport sinu from './lib/projections/sinu';\nimport moll from './lib/projections/moll';\nimport eqdc from './lib/projections/eqdc';\nimport vandg from './lib/projections/vandg';\nimport aeqd from './lib/projections/aeqd';\nimport ortho from './lib/projections/ortho';\nimport qsc from './lib/projections/qsc';\nimport robin from './lib/projections/robin';\nexport default function(proj4){\n  proj4.Proj.projections.add(tmerc);\n  proj4.Proj.projections.add(etmerc);\n  proj4.Proj.projections.add(utm);\n  proj4.Proj.projections.add(sterea);\n  proj4.Proj.projections.add(stere);\n  proj4.Proj.projections.add(somerc);\n  proj4.Proj.projections.add(omerc);\n  proj4.Proj.projections.add(lcc);\n  proj4.Proj.projections.add(krovak);\n  proj4.Proj.projections.add(cass);\n  proj4.Proj.projections.add(laea);\n  proj4.Proj.projections.add(aea);\n  proj4.Proj.projections.add(gnom);\n  proj4.Proj.projections.add(cea);\n  proj4.Proj.projections.add(eqc);\n  proj4.Proj.projections.add(poly);\n  proj4.Proj.projections.add(nzmg);\n  proj4.Proj.projections.add(mill);\n  proj4.Proj.projections.add(sinu);\n  proj4.Proj.projections.add(moll);\n  proj4.Proj.projections.add(eqdc);\n  proj4.Proj.projections.add(vandg);\n  proj4.Proj.projections.add(aeqd);\n  proj4.Proj.projections.add(ortho);\n  proj4.Proj.projections.add(qsc);\n  proj4.Proj.projections.add(robin);\n}","import proj4 from './core';\nimport Proj from \"./Proj\";\nimport Point from \"./Point\";\nimport common from \"./common/toPoint\";\nimport defs from \"./defs\";\nimport transform from \"./transform\";\nimport mgrs from \"mgrs\";\nimport version from \"./version\";\nimport includedProjections from \"../projs\";\n\nproj4.defaultDatum = 'WGS84'; //default datum\nproj4.Proj = Proj;\nproj4.WGS84 = new proj4.Proj('WGS84');\nproj4.Point = Point;\nproj4.toPoint = common;\nproj4.defs = defs;\nproj4.transform = transform;\nproj4.mgrs = mgrs;\nproj4.version = version;\nincludedProjections(proj4);\nexport default proj4;\n"],"sourceRoot":""}