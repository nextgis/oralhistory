{"version":3,"sources":["webpack:///./node_modules/events/events.js"],"names":["EventEmitter","this","_events","_maxListeners","undefined","isFunction","arg","isObject","isUndefined","module","exports","prototype","defaultMaxListeners","setMaxListeners","n","isNaN","TypeError","emit","type","er","handler","len","args","i","listeners","error","length","arguments","Error","err","context","call","Array","slice","apply","addListener","listener","m","newListener","push","warned","console","trace","on","once","fired","g","removeListener","list","position","splice","removeAllListeners","key","listenerCount","evlistener","emitter"],"mappings":"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","file":"npm.events-e5de6d8.js","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n"],"sourceRoot":""}