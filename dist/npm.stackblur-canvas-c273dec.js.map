{"version":3,"sources":["webpack:///./node_modules/stackblur-canvas/src/stackblur.js"],"names":["mul_table","shg_table","getImageDataFromCanvas","canvas","top_x","top_y","width","height","document","getElementById","HTMLCanvasElement","imageData","context","getContext","getImageData","e","Error","processCanvasRGBA","radius","isNaN","processImageDataRGBA","putImageData","x","y","i","p","yp","yi","yw","r_sum","g_sum","b_sum","a_sum","r_out_sum","g_out_sum","b_out_sum","a_out_sum","r_in_sum","g_in_sum","b_in_sum","a_in_sum","pr","pg","pb","pa","rbs","pixels","data","div","widthMinus1","heightMinus1","radiusPlus1","sumFactor","stackStart","BlurStack","stack","next","stackEnd","stackIn","stackOut","mul_sum","shg_sum","r","g","b","a","processCanvasRGB","processImageDataRGB","this","module","exports","image","img","blurAlphaChannel","HTMLImageElement","w","naturalWidth","h","naturalHeight","style","clearRect","drawImage","canvasRGBA","canvasRGB","imageDataRGBA","imageDataRGB"],"mappings":"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","file":"npm.stackblur-canvas-c273dec.js","sourcesContent":["/*\n    StackBlur - a fast almost Gaussian Blur For Canvas\n\n    Version:     0.5\n    Author:        Mario Klingemann\n    Contact:     mario@quasimondo.com\n    Website:    http://www.quasimondo.com/StackBlurForCanvas\n    Twitter:    @quasimondo\n\n    In case you find this class useful - especially in commercial projects -\n    I am not totally unhappy for a small donation to my PayPal account\n    mario@quasimondo.de\n\n    Or support me on flattr:\n    https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript\n\n    Copyright (c) 2010 Mario Klingemann\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n    */\n\n\nvar mul_table = [\n    512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,\n    454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,\n    482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,\n    437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,\n    497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,\n    320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,\n    446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,\n    329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,\n    505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,\n    399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,\n    324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,\n    268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,\n    451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,\n    385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,\n    332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,\n    289,287,285,282,280,278,275,273,271,269,267,265,263,261,259];\n\n\nvar shg_table = [\n    9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,\n    17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,\n    19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n    20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,\n    21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n    21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,\n    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n    23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24 ];\n\n\nfunction processImage(img, canvas, radius, blurAlphaChannel)\n{\n    if (typeof(img) == 'string') {\n        var img = document.getElementById(img);\n    }\n    else if (typeof HTMLImageElement !== 'undefined' && !img instanceof HTMLImageElement) {\n        return;\n    }\n    var w = img.naturalWidth;\n    var h = img.naturalHeight;\n\n    if (typeof(canvas) == 'string') {\n        var canvas = document.getElementById(canvas);\n    }\n    else if (typeof HTMLCanvasElement !== 'undefined' && !canvas instanceof HTMLCanvasElement) {\n        return;\n    }\n\n    canvas.style.width  = w + 'px';\n    canvas.style.height = h + 'px';\n    canvas.width = w;\n    canvas.height = h;\n\n    var context = canvas.getContext('2d');\n    context.clearRect(0, 0, w, h);\n    context.drawImage(img, 0, 0);\n\n    if (isNaN(radius) || radius < 1) return;\n\n    if (blurAlphaChannel)\n        processCanvasRGBA(canvas, 0, 0, w, h, radius);\n    else\n        processCanvasRGB(canvas, 0, 0, w, h, radius);\n}\n\nfunction getImageDataFromCanvas(canvas, top_x, top_y, width, height)\n{\n    if (typeof(canvas) == 'string')\n        var canvas  = document.getElementById(canvas);\n    else if (typeof HTMLCanvasElement !== 'undefined' && !canvas instanceof HTMLCanvasElement)\n        return;\n\n    var context = canvas.getContext('2d');\n    var imageData;\n\n    try {\n        try {\n            imageData = context.getImageData(top_x, top_y, width, height);\n        } catch(e) {\n            throw new Error(\"unable to access local image data: \" + e);\n            return;\n        }\n    } catch(e) {\n        throw new Error(\"unable to access image data: \" + e);\n    }\n\n    return imageData;\n}\n\nfunction processCanvasRGBA(canvas, top_x, top_y, width, height, radius)\n{\n    if (isNaN(radius) || radius < 1) return;\n    radius |= 0;\n\n    var imageData = getImageDataFromCanvas(canvas, top_x, top_y, width, height);\n\n    imageData = processImageDataRGBA(imageData, top_x, top_y, width, height, radius);\n\n    canvas.getContext('2d').putImageData(imageData, top_x, top_y);\n}\n\nfunction processImageDataRGBA(imageData, top_x, top_y, width, height, radius)\n{\n    var pixels = imageData.data;\n\n    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum,\n        r_out_sum, g_out_sum, b_out_sum, a_out_sum,\n        r_in_sum, g_in_sum, b_in_sum, a_in_sum,\n        pr, pg, pb, pa, rbs;\n\n    var div = radius + radius + 1;\n    var w4 = width << 2;\n    var widthMinus1  = width - 1;\n    var heightMinus1 = height - 1;\n    var radiusPlus1  = radius + 1;\n    var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n\n    var stackStart = new BlurStack();\n    var stack = stackStart;\n    for (i = 1; i < div; i++)\n    {\n        stack = stack.next = new BlurStack();\n        if (i == radiusPlus1) var stackEnd = stack;\n    }\n    stack.next = stackStart;\n    var stackIn = null;\n    var stackOut = null;\n\n    yw = yi = 0;\n\n    var mul_sum = mul_table[radius];\n    var shg_sum = shg_table[radius];\n\n    for (y = 0; y < height; y++)\n    {\n        r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;\n\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi+1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi+2]);\n        a_out_sum = radiusPlus1 * (pa = pixels[yi+3]);\n\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n        a_sum += sumFactor * pa;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++)\n        {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack.a = pa;\n            stack = stack.next;\n        }\n\n        for (i = 1; i < radiusPlus1; i++)\n        {\n            p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n            r_sum += (stack.r = (pr = pixels[p])) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = (pg = pixels[p+1])) * rbs;\n            b_sum += (stack.b = (pb = pixels[p+2])) * rbs;\n            a_sum += (stack.a = (pa = pixels[p+3])) * rbs;\n\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n            a_in_sum += pa;\n\n            stack = stack.next;\n        }\n\n\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (x = 0; x < width; x++)\n        {\n            pixels[yi+3] = pa = (a_sum * mul_sum) >> shg_sum;\n            if (pa != 0)\n            {\n                pa = 255 / pa;\n                pixels[yi]   = ((r_sum * mul_sum) >> shg_sum) * pa;\n                pixels[yi+1] = ((g_sum * mul_sum) >> shg_sum) * pa;\n                pixels[yi+2] = ((b_sum * mul_sum) >> shg_sum) * pa;\n            } else {\n                pixels[yi] = pixels[yi+1] = pixels[yi+2] = 0;\n            }\n\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n            a_sum -= a_out_sum;\n\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n            a_out_sum -= stackIn.a;\n\n            p =  (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;\n\n            r_in_sum += (stackIn.r = pixels[p]);\n            g_in_sum += (stackIn.g = pixels[p+1]);\n            b_in_sum += (stackIn.b = pixels[p+2]);\n            a_in_sum += (stackIn.a = pixels[p+3]);\n\n            r_sum += r_in_sum;\n            g_sum += g_in_sum;\n            b_sum += b_in_sum;\n            a_sum += a_in_sum;\n\n            stackIn = stackIn.next;\n\n            r_out_sum += (pr = stackOut.r);\n            g_out_sum += (pg = stackOut.g);\n            b_out_sum += (pb = stackOut.b);\n            a_out_sum += (pa = stackOut.a);\n\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n            a_in_sum -= pa;\n\n            stackOut = stackOut.next;\n\n            yi += 4;\n        }\n        yw += width;\n    }\n\n\n    for (x = 0; x < width; x++)\n    {\n        g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;\n\n        yi = x << 2;\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi+1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi+2]);\n        a_out_sum = radiusPlus1 * (pa = pixels[yi+3]);\n\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n        a_sum += sumFactor * pa;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++)\n        {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack.a = pa;\n            stack = stack.next;\n        }\n\n        yp = width;\n\n        for (i = 1; i <= radius; i++)\n        {\n            yi = (yp + x) << 2;\n\n            r_sum += (stack.r = (pr = pixels[yi])) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = (pg = pixels[yi+1])) * rbs;\n            b_sum += (stack.b = (pb = pixels[yi+2])) * rbs;\n            a_sum += (stack.a = (pa = pixels[yi+3])) * rbs;\n\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n            a_in_sum += pa;\n\n            stack = stack.next;\n\n            if(i < heightMinus1)\n            {\n                yp += width;\n            }\n        }\n\n        yi = x;\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (y = 0; y < height; y++)\n        {\n            p = yi << 2;\n            pixels[p+3] = pa = (a_sum * mul_sum) >> shg_sum;\n            if (pa > 0)\n            {\n                pa = 255 / pa;\n                pixels[p]   = ((r_sum * mul_sum) >> shg_sum) * pa;\n                pixels[p+1] = ((g_sum * mul_sum) >> shg_sum) * pa;\n                pixels[p+2] = ((b_sum * mul_sum) >> shg_sum) * pa;\n            } else {\n                pixels[p] = pixels[p+1] = pixels[p+2] = 0;\n            }\n\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n            a_sum -= a_out_sum;\n\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n            a_out_sum -= stackIn.a;\n\n            p = (x + (((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width)) << 2;\n\n            r_sum += (r_in_sum += (stackIn.r = pixels[p]));\n            g_sum += (g_in_sum += (stackIn.g = pixels[p+1]));\n            b_sum += (b_in_sum += (stackIn.b = pixels[p+2]));\n            a_sum += (a_in_sum += (stackIn.a = pixels[p+3]));\n\n            stackIn = stackIn.next;\n\n            r_out_sum += (pr = stackOut.r);\n            g_out_sum += (pg = stackOut.g);\n            b_out_sum += (pb = stackOut.b);\n            a_out_sum += (pa = stackOut.a);\n\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n            a_in_sum -= pa;\n\n            stackOut = stackOut.next;\n\n            yi += width;\n        }\n    }\n    return imageData;\n}\n\nfunction processCanvasRGB(canvas, top_x, top_y, width, height, radius)\n{\n    if (isNaN(radius) || radius < 1) return;\n    radius |= 0;\n\n    var imageData = getImageDataFromCanvas(canvas, top_x, top_y, width, height);\n    imageData = processImageDataRGB(imageData, top_x, top_y, width, height, radius);\n\n    canvas.getContext('2d').putImageData(imageData, top_x, top_y);\n}\n\nfunction processImageDataRGB(imageData, top_x, top_y, width, height, radius)\n{\n    var pixels = imageData.data;\n\n    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum,\n        r_out_sum, g_out_sum, b_out_sum,\n        r_in_sum, g_in_sum, b_in_sum,\n        pr, pg, pb, rbs;\n\n    var div = radius + radius + 1;\n    var w4 = width << 2;\n    var widthMinus1  = width - 1;\n    var heightMinus1 = height - 1;\n    var radiusPlus1  = radius + 1;\n    var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n\n    var stackStart = new BlurStack();\n    var stack = stackStart;\n    for (i = 1; i < div; i++)\n    {\n        stack = stack.next = new BlurStack();\n        if (i == radiusPlus1) var stackEnd = stack;\n    }\n    stack.next = stackStart;\n    var stackIn = null;\n    var stackOut = null;\n\n    yw = yi = 0;\n\n    var mul_sum = mul_table[radius];\n    var shg_sum = shg_table[radius];\n\n    for (y = 0; y < height; y++)\n    {\n        r_in_sum = g_in_sum = b_in_sum = r_sum = g_sum = b_sum = 0;\n\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi+1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi+2]);\n\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++)\n        {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack = stack.next;\n        }\n\n        for (i = 1; i < radiusPlus1; i++)\n        {\n            p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n            r_sum += (stack.r = (pr = pixels[p])) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = (pg = pixels[p+1])) * rbs;\n            b_sum += (stack.b = (pb = pixels[p+2])) * rbs;\n\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n\n            stack = stack.next;\n        }\n\n\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (x = 0; x < width; x++)\n        {\n            pixels[yi]   = (r_sum * mul_sum) >> shg_sum;\n            pixels[yi+1] = (g_sum * mul_sum) >> shg_sum;\n            pixels[yi+2] = (b_sum * mul_sum) >> shg_sum;\n\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n\n            p =  (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;\n\n            r_in_sum += (stackIn.r = pixels[p]);\n            g_in_sum += (stackIn.g = pixels[p+1]);\n            b_in_sum += (stackIn.b = pixels[p+2]);\n\n            r_sum += r_in_sum;\n            g_sum += g_in_sum;\n            b_sum += b_in_sum;\n\n            stackIn = stackIn.next;\n\n            r_out_sum += (pr = stackOut.r);\n            g_out_sum += (pg = stackOut.g);\n            b_out_sum += (pb = stackOut.b);\n\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n\n            stackOut = stackOut.next;\n\n            yi += 4;\n        }\n        yw += width;\n    }\n\n\n    for (x = 0; x < width; x++)\n    {\n        g_in_sum = b_in_sum = r_in_sum = g_sum = b_sum = r_sum = 0;\n\n        yi = x << 2;\n        r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n        g_out_sum = radiusPlus1 * (pg = pixels[yi+1]);\n        b_out_sum = radiusPlus1 * (pb = pixels[yi+2]);\n\n        r_sum += sumFactor * pr;\n        g_sum += sumFactor * pg;\n        b_sum += sumFactor * pb;\n\n        stack = stackStart;\n\n        for (i = 0; i < radiusPlus1; i++)\n        {\n            stack.r = pr;\n            stack.g = pg;\n            stack.b = pb;\n            stack = stack.next;\n        }\n\n        yp = width;\n\n        for (i = 1; i <= radius; i++)\n        {\n            yi = (yp + x) << 2;\n\n            r_sum += (stack.r = (pr = pixels[yi])) * (rbs = radiusPlus1 - i);\n            g_sum += (stack.g = (pg = pixels[yi+1])) * rbs;\n            b_sum += (stack.b = (pb = pixels[yi+2])) * rbs;\n\n            r_in_sum += pr;\n            g_in_sum += pg;\n            b_in_sum += pb;\n\n            stack = stack.next;\n\n            if(i < heightMinus1)\n            {\n                yp += width;\n            }\n        }\n\n        yi = x;\n        stackIn = stackStart;\n        stackOut = stackEnd;\n        for (y = 0; y < height; y++)\n        {\n            p = yi << 2;\n            pixels[p]   = (r_sum * mul_sum) >> shg_sum;\n            pixels[p+1] = (g_sum * mul_sum) >> shg_sum;\n            pixels[p+2] = (b_sum * mul_sum) >> shg_sum;\n\n            r_sum -= r_out_sum;\n            g_sum -= g_out_sum;\n            b_sum -= b_out_sum;\n\n            r_out_sum -= stackIn.r;\n            g_out_sum -= stackIn.g;\n            b_out_sum -= stackIn.b;\n\n            p = (x + (((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width)) << 2;\n\n            r_sum += (r_in_sum += (stackIn.r = pixels[p]));\n            g_sum += (g_in_sum += (stackIn.g = pixels[p+1]));\n            b_sum += (b_in_sum += (stackIn.b = pixels[p+2]));\n\n            stackIn = stackIn.next;\n\n            r_out_sum += (pr = stackOut.r);\n            g_out_sum += (pg = stackOut.g);\n            b_out_sum += (pb = stackOut.b);\n\n            r_in_sum -= pr;\n            g_in_sum -= pg;\n            b_in_sum -= pb;\n\n            stackOut = stackOut.next;\n\n            yi += width;\n        }\n    }\n\n    return imageData;\n}\n\nfunction BlurStack()\n{\n    this.r = 0;\n    this.g = 0;\n    this.b = 0;\n    this.a = 0;\n    this.next = null;\n}\n\nmodule.exports = {\n    image: processImage,\n    canvasRGBA: processCanvasRGBA,\n    canvasRGB: processCanvasRGB,\n    imageDataRGBA: processImageDataRGBA,\n    imageDataRGB: processImageDataRGB\n};\n"],"sourceRoot":""}